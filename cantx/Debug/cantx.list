
cantx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022b8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080023c4  080023c4  000033c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002404  08002404  00004014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002404  08002404  00004014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002404  08002404  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002404  08002404  00003404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002408  08002408  00003408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800240c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000014  08002420  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002420  000040ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005bdb  00000000  00000000  0000403d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ae  00000000  00000000  00009c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  0000b1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004a8  00000000  00000000  0000b820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001698d  00000000  00000000  0000bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000779e  00000000  00000000  00022655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083814  00000000  00000000  00029df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad607  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000182c  00000000  00000000  000ad64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000aee78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080023ac 	.word	0x080023ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080023ac 	.word	0x080023ac

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa70 	bl	8000634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f844 	bl	80001e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f912 	bl	8000380 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f8da 	bl	8000314 <MX_CAN_Init>
  MX_ADC1_Init();
 8000160:	f000 f89a 	bl	8000298 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000164:	4818      	ldr	r0, [pc, #96]	@ (80001c8 <main+0x7c>)
 8000166:	f000 fbc3 	bl	80008f0 <HAL_ADC_Start>
    HAL_CAN_Start(&hcan);
 800016a:	4818      	ldr	r0, [pc, #96]	@ (80001cc <main+0x80>)
 800016c:	f001 f80e 	bl	800118c <HAL_CAN_Start>
    TxHeader.DLC = 8;  // data length
 8000170:	4b17      	ldr	r3, [pc, #92]	@ (80001d0 <main+0x84>)
 8000172:	2208      	movs	r2, #8
 8000174:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = CAN_ID_STD;
 8000176:	4b16      	ldr	r3, [pc, #88]	@ (80001d0 <main+0x84>)
 8000178:	2200      	movs	r2, #0
 800017a:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 800017c:	4b14      	ldr	r3, [pc, #80]	@ (80001d0 <main+0x84>)
 800017e:	2200      	movs	r2, #0
 8000180:	60da      	str	r2, [r3, #12]
    TxHeader.StdId = 0x6A5;  // ID can be between Hex1 and Hex7FF (1-2047 decimal)
 8000182:	4b13      	ldr	r3, [pc, #76]	@ (80001d0 <main+0x84>)
 8000184:	f240 62a5 	movw	r2, #1701	@ 0x6a5
 8000188:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_PollForConversion(&hadc1,1000);
 800018a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800018e:	480e      	ldr	r0, [pc, #56]	@ (80001c8 <main+0x7c>)
 8000190:	f000 fc5c 	bl	8000a4c <HAL_ADC_PollForConversion>
	      readValue = HAL_ADC_GetValue(&hadc1);
 8000194:	480c      	ldr	r0, [pc, #48]	@ (80001c8 <main+0x7c>)
 8000196:	f000 fd5f 	bl	8000c58 <HAL_ADC_GetValue>
 800019a:	4603      	mov	r3, r0
 800019c:	b29a      	uxth	r2, r3
 800019e:	4b0d      	ldr	r3, [pc, #52]	@ (80001d4 <main+0x88>)
 80001a0:	801a      	strh	r2, [r3, #0]
	      // readValue is between 0-4095 but we need to transmit maximum 255 (one byte)
	      // We divide readValue by 16 to get 0-255. Better way to divide is by shifting bits
	      // (readValue >> 4) is same as (readValue / 16)
	      TxData[7] = readValue >> 4;
 80001a2:	4b0c      	ldr	r3, [pc, #48]	@ (80001d4 <main+0x88>)
 80001a4:	881b      	ldrh	r3, [r3, #0]
 80001a6:	091b      	lsrs	r3, r3, #4
 80001a8:	b29b      	uxth	r3, r3
 80001aa:	b2da      	uxtb	r2, r3
 80001ac:	4b0a      	ldr	r3, [pc, #40]	@ (80001d8 <main+0x8c>)
 80001ae:	71da      	strb	r2, [r3, #7]
	      HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80001b0:	4b0a      	ldr	r3, [pc, #40]	@ (80001dc <main+0x90>)
 80001b2:	4a09      	ldr	r2, [pc, #36]	@ (80001d8 <main+0x8c>)
 80001b4:	4906      	ldr	r1, [pc, #24]	@ (80001d0 <main+0x84>)
 80001b6:	4805      	ldr	r0, [pc, #20]	@ (80001cc <main+0x80>)
 80001b8:	f001 f82c 	bl	8001214 <HAL_CAN_AddTxMessage>
	      HAL_Delay(1000);
 80001bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001c0:	f000 fa9a 	bl	80006f8 <HAL_Delay>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 80001c4:	bf00      	nop
 80001c6:	e7e0      	b.n	800018a <main+0x3e>
 80001c8:	20000030 	.word	0x20000030
 80001cc:	20000060 	.word	0x20000060
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	20000088 	.word	0x20000088
 80001d8:	20000000 	.word	0x20000000
 80001dc:	200000a4 	.word	0x200000a4

080001e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b094      	sub	sp, #80	@ 0x50
 80001e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001ea:	2228      	movs	r2, #40	@ 0x28
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 f8b0 	bl	8002354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f4:	f107 0314 	add.w	r3, r7, #20
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
 8000202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000210:	2301      	movs	r3, #1
 8000212:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000214:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021e:	2301      	movs	r3, #1
 8000220:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000222:	2302      	movs	r3, #2
 8000224:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000226:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800022a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000230:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000232:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000236:	4618      	mov	r0, r3
 8000238:	f001 fb24 	bl	8001884 <HAL_RCC_OscConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000242:	f000 f8cb 	bl	80003dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000246:	230f      	movs	r3, #15
 8000248:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024a:	2302      	movs	r3, #2
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000252:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000256:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025c:	f107 0314 	add.w	r3, r7, #20
 8000260:	2102      	movs	r1, #2
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fd90 	bl	8001d88 <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800026e:	f000 f8b5 	bl	80003dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000272:	2302      	movs	r3, #2
 8000274:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800027a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4618      	mov	r0, r3
 8000280:	f001 fefc 	bl	800207c <HAL_RCCEx_PeriphCLKConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800028a:	f000 f8a7 	bl	80003dc <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3750      	adds	r7, #80	@ 0x50
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002a8:	4b18      	ldr	r3, [pc, #96]	@ (800030c <MX_ADC1_Init+0x74>)
 80002aa:	4a19      	ldr	r2, [pc, #100]	@ (8000310 <MX_ADC1_Init+0x78>)
 80002ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ae:	4b17      	ldr	r3, [pc, #92]	@ (800030c <MX_ADC1_Init+0x74>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002b4:	4b15      	ldr	r3, [pc, #84]	@ (800030c <MX_ADC1_Init+0x74>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ba:	4b14      	ldr	r3, [pc, #80]	@ (800030c <MX_ADC1_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002c0:	4b12      	ldr	r3, [pc, #72]	@ (800030c <MX_ADC1_Init+0x74>)
 80002c2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c8:	4b10      	ldr	r3, [pc, #64]	@ (800030c <MX_ADC1_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002ce:	4b0f      	ldr	r3, [pc, #60]	@ (800030c <MX_ADC1_Init+0x74>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002d4:	480d      	ldr	r0, [pc, #52]	@ (800030c <MX_ADC1_Init+0x74>)
 80002d6:	f000 fa33 	bl	8000740 <HAL_ADC_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002e0:	f000 f87c 	bl	80003dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80002e4:	2309      	movs	r3, #9
 80002e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002e8:	2301      	movs	r3, #1
 80002ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	4619      	mov	r1, r3
 80002f4:	4805      	ldr	r0, [pc, #20]	@ (800030c <MX_ADC1_Init+0x74>)
 80002f6:	f000 fcbb 	bl	8000c70 <HAL_ADC_ConfigChannel>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000300:	f000 f86c 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000030 	.word	0x20000030
 8000310:	40012400 	.word	0x40012400

08000314 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000318:	4b17      	ldr	r3, [pc, #92]	@ (8000378 <MX_CAN_Init+0x64>)
 800031a:	4a18      	ldr	r2, [pc, #96]	@ (800037c <MX_CAN_Init+0x68>)
 800031c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 72;
 800031e:	4b16      	ldr	r3, [pc, #88]	@ (8000378 <MX_CAN_Init+0x64>)
 8000320:	2248      	movs	r2, #72	@ 0x48
 8000322:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000324:	4b14      	ldr	r3, [pc, #80]	@ (8000378 <MX_CAN_Init+0x64>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800032a:	4b13      	ldr	r3, [pc, #76]	@ (8000378 <MX_CAN_Init+0x64>)
 800032c:	2200      	movs	r2, #0
 800032e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000330:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <MX_CAN_Init+0x64>)
 8000332:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000336:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000338:	4b0f      	ldr	r3, [pc, #60]	@ (8000378 <MX_CAN_Init+0x64>)
 800033a:	2200      	movs	r2, #0
 800033c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800033e:	4b0e      	ldr	r3, [pc, #56]	@ (8000378 <MX_CAN_Init+0x64>)
 8000340:	2200      	movs	r2, #0
 8000342:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000344:	4b0c      	ldr	r3, [pc, #48]	@ (8000378 <MX_CAN_Init+0x64>)
 8000346:	2200      	movs	r2, #0
 8000348:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800034a:	4b0b      	ldr	r3, [pc, #44]	@ (8000378 <MX_CAN_Init+0x64>)
 800034c:	2200      	movs	r2, #0
 800034e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000350:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <MX_CAN_Init+0x64>)
 8000352:	2200      	movs	r2, #0
 8000354:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000356:	4b08      	ldr	r3, [pc, #32]	@ (8000378 <MX_CAN_Init+0x64>)
 8000358:	2200      	movs	r2, #0
 800035a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800035c:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <MX_CAN_Init+0x64>)
 800035e:	2200      	movs	r2, #0
 8000360:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000362:	4805      	ldr	r0, [pc, #20]	@ (8000378 <MX_CAN_Init+0x64>)
 8000364:	f000 fe17 	bl	8000f96 <HAL_CAN_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800036e:	f000 f835 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000060 	.word	0x20000060
 800037c:	40006400 	.word	0x40006400

08000380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000386:	4b14      	ldr	r3, [pc, #80]	@ (80003d8 <MX_GPIO_Init+0x58>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a13      	ldr	r2, [pc, #76]	@ (80003d8 <MX_GPIO_Init+0x58>)
 800038c:	f043 0320 	orr.w	r3, r3, #32
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b11      	ldr	r3, [pc, #68]	@ (80003d8 <MX_GPIO_Init+0x58>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0320 	and.w	r3, r3, #32
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039e:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <MX_GPIO_Init+0x58>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a0d      	ldr	r2, [pc, #52]	@ (80003d8 <MX_GPIO_Init+0x58>)
 80003a4:	f043 0308 	orr.w	r3, r3, #8
 80003a8:	6193      	str	r3, [r2, #24]
 80003aa:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <MX_GPIO_Init+0x58>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f003 0308 	and.w	r3, r3, #8
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b6:	4b08      	ldr	r3, [pc, #32]	@ (80003d8 <MX_GPIO_Init+0x58>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a07      	ldr	r2, [pc, #28]	@ (80003d8 <MX_GPIO_Init+0x58>)
 80003bc:	f043 0304 	orr.w	r3, r3, #4
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b05      	ldr	r3, [pc, #20]	@ (80003d8 <MX_GPIO_Init+0x58>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0304 	and.w	r3, r3, #4
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003ce:	bf00      	nop
 80003d0:	3714      	adds	r7, #20
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	40021000 	.word	0x40021000

080003dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e0:	b672      	cpsid	i
}
 80003e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e4:	bf00      	nop
 80003e6:	e7fd      	b.n	80003e4 <Error_Handler+0x8>

080003e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ee:	4b15      	ldr	r3, [pc, #84]	@ (8000444 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a14      	ldr	r2, [pc, #80]	@ (8000444 <HAL_MspInit+0x5c>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000406:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a0e      	ldr	r2, [pc, #56]	@ (8000444 <HAL_MspInit+0x5c>)
 800040c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800041e:	4b0a      	ldr	r3, [pc, #40]	@ (8000448 <HAL_MspInit+0x60>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	4a04      	ldr	r2, [pc, #16]	@ (8000448 <HAL_MspInit+0x60>)
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043a:	bf00      	nop
 800043c:	3714      	adds	r7, #20
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr
 8000444:	40021000 	.word	0x40021000
 8000448:	40010000 	.word	0x40010000

0800044c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a14      	ldr	r2, [pc, #80]	@ (80004b8 <HAL_ADC_MspInit+0x6c>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d121      	bne.n	80004b0 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800046c:	4b13      	ldr	r3, [pc, #76]	@ (80004bc <HAL_ADC_MspInit+0x70>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a12      	ldr	r2, [pc, #72]	@ (80004bc <HAL_ADC_MspInit+0x70>)
 8000472:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b10      	ldr	r3, [pc, #64]	@ (80004bc <HAL_ADC_MspInit+0x70>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000484:	4b0d      	ldr	r3, [pc, #52]	@ (80004bc <HAL_ADC_MspInit+0x70>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a0c      	ldr	r2, [pc, #48]	@ (80004bc <HAL_ADC_MspInit+0x70>)
 800048a:	f043 0308 	orr.w	r3, r3, #8
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <HAL_ADC_MspInit+0x70>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0308 	and.w	r3, r3, #8
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800049c:	2302      	movs	r3, #2
 800049e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a0:	2303      	movs	r3, #3
 80004a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4805      	ldr	r0, [pc, #20]	@ (80004c0 <HAL_ADC_MspInit+0x74>)
 80004ac:	f001 f866 	bl	800157c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80004b0:	bf00      	nop
 80004b2:	3720      	adds	r7, #32
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40012400 	.word	0x40012400
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010c00 	.word	0x40010c00

080004c4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	@ 0x28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a25      	ldr	r2, [pc, #148]	@ (8000574 <HAL_CAN_MspInit+0xb0>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d143      	bne.n	800056c <HAL_CAN_MspInit+0xa8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004e4:	4b24      	ldr	r3, [pc, #144]	@ (8000578 <HAL_CAN_MspInit+0xb4>)
 80004e6:	69db      	ldr	r3, [r3, #28]
 80004e8:	4a23      	ldr	r2, [pc, #140]	@ (8000578 <HAL_CAN_MspInit+0xb4>)
 80004ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004ee:	61d3      	str	r3, [r2, #28]
 80004f0:	4b21      	ldr	r3, [pc, #132]	@ (8000578 <HAL_CAN_MspInit+0xb4>)
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004f8:	613b      	str	r3, [r7, #16]
 80004fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000578 <HAL_CAN_MspInit+0xb4>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a1d      	ldr	r2, [pc, #116]	@ (8000578 <HAL_CAN_MspInit+0xb4>)
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b1b      	ldr	r3, [pc, #108]	@ (8000578 <HAL_CAN_MspInit+0xb4>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0308 	and.w	r3, r3, #8
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000514:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	4619      	mov	r1, r3
 8000528:	4814      	ldr	r0, [pc, #80]	@ (800057c <HAL_CAN_MspInit+0xb8>)
 800052a:	f001 f827 	bl	800157c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800052e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000534:	2302      	movs	r3, #2
 8000536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000538:	2303      	movs	r3, #3
 800053a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053c:	f107 0314 	add.w	r3, r7, #20
 8000540:	4619      	mov	r1, r3
 8000542:	480e      	ldr	r0, [pc, #56]	@ (800057c <HAL_CAN_MspInit+0xb8>)
 8000544:	f001 f81a 	bl	800157c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000548:	4b0d      	ldr	r3, [pc, #52]	@ (8000580 <HAL_CAN_MspInit+0xbc>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	627b      	str	r3, [r7, #36]	@ 0x24
 800054e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000550:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000554:	627b      	str	r3, [r7, #36]	@ 0x24
 8000556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000558:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800055c:	627b      	str	r3, [r7, #36]	@ 0x24
 800055e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000560:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000564:	627b      	str	r3, [r7, #36]	@ 0x24
 8000566:	4a06      	ldr	r2, [pc, #24]	@ (8000580 <HAL_CAN_MspInit+0xbc>)
 8000568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800056a:	6053      	str	r3, [r2, #4]

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800056c:	bf00      	nop
 800056e:	3728      	adds	r7, #40	@ 0x28
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40006400 	.word	0x40006400
 8000578:	40021000 	.word	0x40021000
 800057c:	40010c00 	.word	0x40010c00
 8000580:	40010000 	.word	0x40010000

08000584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <NMI_Handler+0x4>

0800058c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <HardFault_Handler+0x4>

08000594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <MemManage_Handler+0x4>

0800059c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <BusFault_Handler+0x4>

080005a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <UsageFault_Handler+0x4>

080005ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d4:	f000 f874 	bl	80006c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e8:	f7ff fff8 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ec:	480b      	ldr	r0, [pc, #44]	@ (800061c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ee:	490c      	ldr	r1, [pc, #48]	@ (8000620 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000624 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a09      	ldr	r2, [pc, #36]	@ (8000628 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000604:	4c09      	ldr	r4, [pc, #36]	@ (800062c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000612:	f001 fea7 	bl	8002364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff fd99 	bl	800014c <main>
  bx lr
 800061a:	4770      	bx	lr
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000624:	0800240c 	.word	0x0800240c
  ldr r2, =_sbss
 8000628:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800062c:	200000ac 	.word	0x200000ac

08000630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC1_2_IRQHandler>
	...

08000634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <HAL_Init+0x28>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a07      	ldr	r2, [pc, #28]	@ (800065c <HAL_Init+0x28>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000644:	2003      	movs	r0, #3
 8000646:	f000 ff65 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064a:	200f      	movs	r0, #15
 800064c:	f000 f808 	bl	8000660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000650:	f7ff feca 	bl	80003e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40022000 	.word	0x40022000

08000660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <HAL_InitTick+0x54>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <HAL_InitTick+0x58>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000676:	fbb3 f3f1 	udiv	r3, r3, r1
 800067a:	fbb2 f3f3 	udiv	r3, r2, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f000 ff6f 	bl	8001562 <HAL_SYSTICK_Config>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e00e      	b.n	80006ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	d80a      	bhi.n	80006aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000694:	2200      	movs	r2, #0
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
 800069c:	f000 ff45 	bl	800152a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a0:	4a06      	ldr	r2, [pc, #24]	@ (80006bc <HAL_InitTick+0x5c>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	e000      	b.n	80006ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000008 	.word	0x20000008
 80006b8:	20000010 	.word	0x20000010
 80006bc:	2000000c 	.word	0x2000000c

080006c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c4:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <HAL_IncTick+0x1c>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <HAL_IncTick+0x20>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4413      	add	r3, r2
 80006d0:	4a03      	ldr	r2, [pc, #12]	@ (80006e0 <HAL_IncTick+0x20>)
 80006d2:	6013      	str	r3, [r2, #0]
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	20000010 	.word	0x20000010
 80006e0:	200000a8 	.word	0x200000a8

080006e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return uwTick;
 80006e8:	4b02      	ldr	r3, [pc, #8]	@ (80006f4 <HAL_GetTick+0x10>)
 80006ea:	681b      	ldr	r3, [r3, #0]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	200000a8 	.word	0x200000a8

080006f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000700:	f7ff fff0 	bl	80006e4 <HAL_GetTick>
 8000704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000710:	d005      	beq.n	800071e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000712:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <HAL_Delay+0x44>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4413      	add	r3, r2
 800071c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071e:	bf00      	nop
 8000720:	f7ff ffe0 	bl	80006e4 <HAL_GetTick>
 8000724:	4602      	mov	r2, r0
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	429a      	cmp	r2, r3
 800072e:	d8f7      	bhi.n	8000720 <HAL_Delay+0x28>
  {
  }
}
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000010 	.word	0x20000010

08000740 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000748:	2300      	movs	r3, #0
 800074a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d101      	bne.n	8000762 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	e0be      	b.n	80008e0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800076c:	2b00      	cmp	r3, #0
 800076e:	d109      	bne.n	8000784 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fe64 	bl	800044c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f000 fbc5 	bl	8000f14 <ADC_ConversionStop_Disable>
 800078a:	4603      	mov	r3, r0
 800078c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000792:	f003 0310 	and.w	r3, r3, #16
 8000796:	2b00      	cmp	r3, #0
 8000798:	f040 8099 	bne.w	80008ce <HAL_ADC_Init+0x18e>
 800079c:	7dfb      	ldrb	r3, [r7, #23]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f040 8095 	bne.w	80008ce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007a8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80007ac:	f023 0302 	bic.w	r3, r3, #2
 80007b0:	f043 0202 	orr.w	r2, r3, #2
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7b1b      	ldrb	r3, [r3, #12]
 80007c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80007d8:	d003      	beq.n	80007e2 <HAL_ADC_Init+0xa2>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d102      	bne.n	80007e8 <HAL_ADC_Init+0xa8>
 80007e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e6:	e000      	b.n	80007ea <HAL_ADC_Init+0xaa>
 80007e8:	2300      	movs	r3, #0
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	7d1b      	ldrb	r3, [r3, #20]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d119      	bne.n	800082c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7b1b      	ldrb	r3, [r3, #12]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d109      	bne.n	8000814 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	3b01      	subs	r3, #1
 8000806:	035a      	lsls	r2, r3, #13
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	4313      	orrs	r3, r2
 800080c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	e00b      	b.n	800082c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000818:	f043 0220 	orr.w	r2, r3, #32
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000824:	f043 0201 	orr.w	r2, r3, #1
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	430a      	orrs	r2, r1
 800083e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	689a      	ldr	r2, [r3, #8]
 8000846:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <HAL_ADC_Init+0x1a8>)
 8000848:	4013      	ands	r3, r2
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	6812      	ldr	r2, [r2, #0]
 800084e:	68b9      	ldr	r1, [r7, #8]
 8000850:	430b      	orrs	r3, r1
 8000852:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800085c:	d003      	beq.n	8000866 <HAL_ADC_Init+0x126>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d104      	bne.n	8000870 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	691b      	ldr	r3, [r3, #16]
 800086a:	3b01      	subs	r3, #1
 800086c:	051b      	lsls	r3, r3, #20
 800086e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000876:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	430a      	orrs	r2, r1
 8000882:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <HAL_ADC_Init+0x1ac>)
 800088c:	4013      	ands	r3, r2
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	429a      	cmp	r2, r3
 8000892:	d10b      	bne.n	80008ac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800089e:	f023 0303 	bic.w	r3, r3, #3
 80008a2:	f043 0201 	orr.w	r2, r3, #1
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008aa:	e018      	b.n	80008de <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008b0:	f023 0312 	bic.w	r3, r3, #18
 80008b4:	f043 0210 	orr.w	r2, r3, #16
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c0:	f043 0201 	orr.w	r2, r3, #1
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008cc:	e007      	b.n	80008de <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008d2:	f043 0210 	orr.w	r2, r3, #16
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008de:	7dfb      	ldrb	r3, [r7, #23]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	ffe1f7fd 	.word	0xffe1f7fd
 80008ec:	ff1f0efe 	.word	0xff1f0efe

080008f0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000902:	2b01      	cmp	r3, #1
 8000904:	d101      	bne.n	800090a <HAL_ADC_Start+0x1a>
 8000906:	2302      	movs	r3, #2
 8000908:	e098      	b.n	8000a3c <HAL_ADC_Start+0x14c>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2201      	movs	r2, #1
 800090e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f000 faa4 	bl	8000e60 <ADC_Enable>
 8000918:	4603      	mov	r3, r0
 800091a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f040 8087 	bne.w	8000a32 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000928:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800092c:	f023 0301 	bic.w	r3, r3, #1
 8000930:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a41      	ldr	r2, [pc, #260]	@ (8000a44 <HAL_ADC_Start+0x154>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d105      	bne.n	800094e <HAL_ADC_Start+0x5e>
 8000942:	4b41      	ldr	r3, [pc, #260]	@ (8000a48 <HAL_ADC_Start+0x158>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800094a:	2b00      	cmp	r3, #0
 800094c:	d115      	bne.n	800097a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000952:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000964:	2b00      	cmp	r3, #0
 8000966:	d026      	beq.n	80009b6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800096c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000970:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000978:	e01d      	b.n	80009b6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800097e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a2f      	ldr	r2, [pc, #188]	@ (8000a48 <HAL_ADC_Start+0x158>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d004      	beq.n	800099a <HAL_ADC_Start+0xaa>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a2b      	ldr	r2, [pc, #172]	@ (8000a44 <HAL_ADC_Start+0x154>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d10d      	bne.n	80009b6 <HAL_ADC_Start+0xc6>
 800099a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a48 <HAL_ADC_Start+0x158>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d007      	beq.n	80009b6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80009ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d006      	beq.n	80009d0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c6:	f023 0206 	bic.w	r2, r3, #6
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009ce:	e002      	b.n	80009d6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f06f 0202 	mvn.w	r2, #2
 80009e6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80009f2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80009f6:	d113      	bne.n	8000a20 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009fc:	4a11      	ldr	r2, [pc, #68]	@ (8000a44 <HAL_ADC_Start+0x154>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d105      	bne.n	8000a0e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a02:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <HAL_ADC_Start+0x158>)
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d108      	bne.n	8000a20 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	689a      	ldr	r2, [r3, #8]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	e00c      	b.n	8000a3a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	689a      	ldr	r2, [r3, #8]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	e003      	b.n	8000a3a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40012800 	.word	0x40012800
 8000a48:	40012400 	.word	0x40012400

08000a4c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b087      	sub	sp, #28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000a62:	f7ff fe3f 	bl	80006e4 <HAL_GetTick>
 8000a66:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d00b      	beq.n	8000a8e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a7a:	f043 0220 	orr.w	r2, r3, #32
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e0d3      	b.n	8000c36 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d131      	bne.n	8000b00 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d12a      	bne.n	8000b00 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000aaa:	e021      	b.n	8000af0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab2:	d01d      	beq.n	8000af0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d007      	beq.n	8000aca <HAL_ADC_PollForConversion+0x7e>
 8000aba:	f7ff fe13 	bl	80006e4 <HAL_GetTick>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	683a      	ldr	r2, [r7, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d212      	bcs.n	8000af0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d10b      	bne.n	8000af0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000adc:	f043 0204 	orr.w	r2, r3, #4
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000aec:	2303      	movs	r3, #3
 8000aee:	e0a2      	b.n	8000c36 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0d6      	beq.n	8000aac <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000afe:	e070      	b.n	8000be2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000b00:	4b4f      	ldr	r3, [pc, #316]	@ (8000c40 <HAL_ADC_PollForConversion+0x1f4>)
 8000b02:	681c      	ldr	r4, [r3, #0]
 8000b04:	2002      	movs	r0, #2
 8000b06:	f001 fb6f 	bl	80021e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	6919      	ldr	r1, [r3, #16]
 8000b16:	4b4b      	ldr	r3, [pc, #300]	@ (8000c44 <HAL_ADC_PollForConversion+0x1f8>)
 8000b18:	400b      	ands	r3, r1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d118      	bne.n	8000b50 <HAL_ADC_PollForConversion+0x104>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	68d9      	ldr	r1, [r3, #12]
 8000b24:	4b48      	ldr	r3, [pc, #288]	@ (8000c48 <HAL_ADC_PollForConversion+0x1fc>)
 8000b26:	400b      	ands	r3, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d111      	bne.n	8000b50 <HAL_ADC_PollForConversion+0x104>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6919      	ldr	r1, [r3, #16]
 8000b32:	4b46      	ldr	r3, [pc, #280]	@ (8000c4c <HAL_ADC_PollForConversion+0x200>)
 8000b34:	400b      	ands	r3, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d108      	bne.n	8000b4c <HAL_ADC_PollForConversion+0x100>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	68d9      	ldr	r1, [r3, #12]
 8000b40:	4b43      	ldr	r3, [pc, #268]	@ (8000c50 <HAL_ADC_PollForConversion+0x204>)
 8000b42:	400b      	ands	r3, r1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d101      	bne.n	8000b4c <HAL_ADC_PollForConversion+0x100>
 8000b48:	2314      	movs	r3, #20
 8000b4a:	e020      	b.n	8000b8e <HAL_ADC_PollForConversion+0x142>
 8000b4c:	2329      	movs	r3, #41	@ 0x29
 8000b4e:	e01e      	b.n	8000b8e <HAL_ADC_PollForConversion+0x142>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	6919      	ldr	r1, [r3, #16]
 8000b56:	4b3d      	ldr	r3, [pc, #244]	@ (8000c4c <HAL_ADC_PollForConversion+0x200>)
 8000b58:	400b      	ands	r3, r1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d106      	bne.n	8000b6c <HAL_ADC_PollForConversion+0x120>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68d9      	ldr	r1, [r3, #12]
 8000b64:	4b3a      	ldr	r3, [pc, #232]	@ (8000c50 <HAL_ADC_PollForConversion+0x204>)
 8000b66:	400b      	ands	r3, r1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d00d      	beq.n	8000b88 <HAL_ADC_PollForConversion+0x13c>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	6919      	ldr	r1, [r3, #16]
 8000b72:	4b38      	ldr	r3, [pc, #224]	@ (8000c54 <HAL_ADC_PollForConversion+0x208>)
 8000b74:	400b      	ands	r3, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d108      	bne.n	8000b8c <HAL_ADC_PollForConversion+0x140>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68d9      	ldr	r1, [r3, #12]
 8000b80:	4b34      	ldr	r3, [pc, #208]	@ (8000c54 <HAL_ADC_PollForConversion+0x208>)
 8000b82:	400b      	ands	r3, r1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d101      	bne.n	8000b8c <HAL_ADC_PollForConversion+0x140>
 8000b88:	2354      	movs	r3, #84	@ 0x54
 8000b8a:	e000      	b.n	8000b8e <HAL_ADC_PollForConversion+0x142>
 8000b8c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000b94:	e021      	b.n	8000bda <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b9c:	d01a      	beq.n	8000bd4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d007      	beq.n	8000bb4 <HAL_ADC_PollForConversion+0x168>
 8000ba4:	f7ff fd9e 	bl	80006e4 <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d20f      	bcs.n	8000bd4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d90b      	bls.n	8000bd4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bc0:	f043 0204 	orr.w	r2, r3, #4
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e030      	b.n	8000c36 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d8d9      	bhi.n	8000b96 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f06f 0212 	mvn.w	r2, #18
 8000bea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bf0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000c02:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000c06:	d115      	bne.n	8000c34 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d111      	bne.n	8000c34 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d105      	bne.n	8000c34 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c2c:	f043 0201 	orr.w	r2, r3, #1
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	371c      	adds	r7, #28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd90      	pop	{r4, r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	24924924 	.word	0x24924924
 8000c48:	00924924 	.word	0x00924924
 8000c4c:	12492492 	.word	0x12492492
 8000c50:	00492492 	.word	0x00492492
 8000c54:	00249249 	.word	0x00249249

08000c58 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d101      	bne.n	8000c90 <HAL_ADC_ConfigChannel+0x20>
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	e0dc      	b.n	8000e4a <HAL_ADC_ConfigChannel+0x1da>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b06      	cmp	r3, #6
 8000c9e:	d81c      	bhi.n	8000cda <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	4613      	mov	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	3b05      	subs	r3, #5
 8000cb2:	221f      	movs	r2, #31
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	4019      	ands	r1, r3
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	3b05      	subs	r3, #5
 8000ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cd8:	e03c      	b.n	8000d54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b0c      	cmp	r3, #12
 8000ce0:	d81c      	bhi.n	8000d1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	3b23      	subs	r3, #35	@ 0x23
 8000cf4:	221f      	movs	r2, #31
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	4019      	ands	r1, r3
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	6818      	ldr	r0, [r3, #0]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	4613      	mov	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	3b23      	subs	r3, #35	@ 0x23
 8000d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d1a:	e01b      	b.n	8000d54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	3b41      	subs	r3, #65	@ 0x41
 8000d2e:	221f      	movs	r2, #31
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	4019      	ands	r1, r3
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	3b41      	subs	r3, #65	@ 0x41
 8000d48:	fa00 f203 	lsl.w	r2, r0, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b09      	cmp	r3, #9
 8000d5a:	d91c      	bls.n	8000d96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68d9      	ldr	r1, [r3, #12]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4613      	mov	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	3b1e      	subs	r3, #30
 8000d6e:	2207      	movs	r2, #7
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	4019      	ands	r1, r3
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	6898      	ldr	r0, [r3, #8]
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4613      	mov	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4413      	add	r3, r2
 8000d86:	3b1e      	subs	r3, #30
 8000d88:	fa00 f203 	lsl.w	r2, r0, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	e019      	b.n	8000dca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6919      	ldr	r1, [r3, #16]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	2207      	movs	r2, #7
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	4019      	ands	r1, r3
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	6898      	ldr	r0, [r3, #8]
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4613      	mov	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b10      	cmp	r3, #16
 8000dd0:	d003      	beq.n	8000dda <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dd6:	2b11      	cmp	r3, #17
 8000dd8:	d132      	bne.n	8000e40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1d      	ldr	r2, [pc, #116]	@ (8000e54 <HAL_ADC_ConfigChannel+0x1e4>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d125      	bne.n	8000e30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d126      	bne.n	8000e40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000e00:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b10      	cmp	r3, #16
 8000e08:	d11a      	bne.n	8000e40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e0a:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a13      	ldr	r2, [pc, #76]	@ (8000e5c <HAL_ADC_ConfigChannel+0x1ec>)
 8000e10:	fba2 2303 	umull	r2, r3, r2, r3
 8000e14:	0c9a      	lsrs	r2, r3, #18
 8000e16:	4613      	mov	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e20:	e002      	b.n	8000e28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f9      	bne.n	8000e22 <HAL_ADC_ConfigChannel+0x1b2>
 8000e2e:	e007      	b.n	8000e40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e34:	f043 0220 	orr.w	r2, r3, #32
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	40012400 	.word	0x40012400
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	431bde83 	.word	0x431bde83

08000e60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d040      	beq.n	8000f00 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f042 0201 	orr.w	r2, r2, #1
 8000e8c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f0c <ADC_Enable+0xac>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a1f      	ldr	r2, [pc, #124]	@ (8000f10 <ADC_Enable+0xb0>)
 8000e94:	fba2 2303 	umull	r2, r3, r2, r3
 8000e98:	0c9b      	lsrs	r3, r3, #18
 8000e9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e9c:	e002      	b.n	8000ea4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1f9      	bne.n	8000e9e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eaa:	f7ff fc1b 	bl	80006e4 <HAL_GetTick>
 8000eae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000eb0:	e01f      	b.n	8000ef2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000eb2:	f7ff fc17 	bl	80006e4 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d918      	bls.n	8000ef2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d011      	beq.n	8000ef2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed2:	f043 0210 	orr.w	r2, r3, #16
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ede:	f043 0201 	orr.w	r2, r3, #1
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e007      	b.n	8000f02 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d1d8      	bne.n	8000eb2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	431bde83 	.word	0x431bde83

08000f14 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d12e      	bne.n	8000f8c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0201 	bic.w	r2, r2, #1
 8000f3c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f3e:	f7ff fbd1 	bl	80006e4 <HAL_GetTick>
 8000f42:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f44:	e01b      	b.n	8000f7e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f46:	f7ff fbcd 	bl	80006e4 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d914      	bls.n	8000f7e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d10d      	bne.n	8000f7e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f66:	f043 0210 	orr.w	r2, r3, #16
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f72:	f043 0201 	orr.w	r2, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e007      	b.n	8000f8e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d0dc      	beq.n	8000f46 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e0ed      	b.n	8001184 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff fa85 	bl	80004c4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f042 0201 	orr.w	r2, r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fca:	f7ff fb8b 	bl	80006e4 <HAL_GetTick>
 8000fce:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fd0:	e012      	b.n	8000ff8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fd2:	f7ff fb87 	bl	80006e4 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b0a      	cmp	r3, #10
 8000fde:	d90b      	bls.n	8000ff8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2205      	movs	r2, #5
 8000ff0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e0c5      	b.n	8001184 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0e5      	beq.n	8000fd2 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0202 	bic.w	r2, r2, #2
 8001014:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001016:	f7ff fb65 	bl	80006e4 <HAL_GetTick>
 800101a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800101c:	e012      	b.n	8001044 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800101e:	f7ff fb61 	bl	80006e4 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b0a      	cmp	r3, #10
 800102a:	d90b      	bls.n	8001044 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001030:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2205      	movs	r2, #5
 800103c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e09f      	b.n	8001184 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1e5      	bne.n	800101e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7e1b      	ldrb	r3, [r3, #24]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d108      	bne.n	800106c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	e007      	b.n	800107c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800107a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7e5b      	ldrb	r3, [r3, #25]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d108      	bne.n	8001096 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e007      	b.n	80010a6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7e9b      	ldrb	r3, [r3, #26]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d108      	bne.n	80010c0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f042 0220 	orr.w	r2, r2, #32
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e007      	b.n	80010d0 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0220 	bic.w	r2, r2, #32
 80010ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7edb      	ldrb	r3, [r3, #27]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d108      	bne.n	80010ea <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0210 	bic.w	r2, r2, #16
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	e007      	b.n	80010fa <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 0210 	orr.w	r2, r2, #16
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7f1b      	ldrb	r3, [r3, #28]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d108      	bne.n	8001114 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0208 	orr.w	r2, r2, #8
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e007      	b.n	8001124 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0208 	bic.w	r2, r2, #8
 8001122:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7f5b      	ldrb	r3, [r3, #29]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d108      	bne.n	800113e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0204 	orr.w	r2, r2, #4
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	e007      	b.n	800114e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0204 	bic.w	r2, r2, #4
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	ea42 0103 	orr.w	r1, r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	1e5a      	subs	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b01      	cmp	r3, #1
 800119e:	d12e      	bne.n	80011fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2202      	movs	r2, #2
 80011a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011b8:	f7ff fa94 	bl	80006e4 <HAL_GetTick>
 80011bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011be:	e012      	b.n	80011e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011c0:	f7ff fa90 	bl	80006e4 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b0a      	cmp	r3, #10
 80011cc:	d90b      	bls.n	80011e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2205      	movs	r2, #5
 80011de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e012      	b.n	800120c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1e5      	bne.n	80011c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e006      	b.n	800120c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001202:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
  }
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	@ 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001228:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001232:	7ffb      	ldrb	r3, [r7, #31]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d003      	beq.n	8001240 <HAL_CAN_AddTxMessage+0x2c>
 8001238:	7ffb      	ldrb	r3, [r7, #31]
 800123a:	2b02      	cmp	r3, #2
 800123c:	f040 80ad 	bne.w	800139a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10a      	bne.n	8001260 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001250:	2b00      	cmp	r3, #0
 8001252:	d105      	bne.n	8001260 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8095 	beq.w	800138a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	0e1b      	lsrs	r3, r3, #24
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800126a:	2201      	movs	r2, #1
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10d      	bne.n	8001298 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001286:	68f9      	ldr	r1, [r7, #12]
 8001288:	6809      	ldr	r1, [r1, #0]
 800128a:	431a      	orrs	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3318      	adds	r3, #24
 8001290:	011b      	lsls	r3, r3, #4
 8001292:	440b      	add	r3, r1
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e00f      	b.n	80012b8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012a2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012a8:	68f9      	ldr	r1, [r7, #12]
 80012aa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012ac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3318      	adds	r3, #24
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	440b      	add	r3, r1
 80012b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6819      	ldr	r1, [r3, #0]
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3318      	adds	r3, #24
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	440b      	add	r3, r1
 80012c8:	3304      	adds	r3, #4
 80012ca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	7d1b      	ldrb	r3, [r3, #20]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d111      	bne.n	80012f8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3318      	adds	r3, #24
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	4413      	add	r3, r2
 80012e0:	3304      	adds	r3, #4
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	6811      	ldr	r1, [r2, #0]
 80012e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3318      	adds	r3, #24
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	440b      	add	r3, r1
 80012f4:	3304      	adds	r3, #4
 80012f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3307      	adds	r3, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	061a      	lsls	r2, r3, #24
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3306      	adds	r3, #6
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	041b      	lsls	r3, r3, #16
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3305      	adds	r3, #5
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	4313      	orrs	r3, r2
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	3204      	adds	r2, #4
 8001318:	7812      	ldrb	r2, [r2, #0]
 800131a:	4610      	mov	r0, r2
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	6811      	ldr	r1, [r2, #0]
 8001320:	ea43 0200 	orr.w	r2, r3, r0
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	440b      	add	r3, r1
 800132a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800132e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3303      	adds	r3, #3
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	061a      	lsls	r2, r3, #24
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3302      	adds	r3, #2
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	041b      	lsls	r3, r3, #16
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3301      	adds	r3, #1
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	4313      	orrs	r3, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	7812      	ldrb	r2, [r2, #0]
 8001350:	4610      	mov	r0, r2
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	6811      	ldr	r1, [r2, #0]
 8001356:	ea43 0200 	orr.w	r2, r3, r0
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	440b      	add	r3, r1
 8001360:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001364:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3318      	adds	r3, #24
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	4413      	add	r3, r2
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	6811      	ldr	r1, [r2, #0]
 8001378:	f043 0201 	orr.w	r2, r3, #1
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	3318      	adds	r3, #24
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	440b      	add	r3, r1
 8001384:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e00e      	b.n	80013a8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e006      	b.n	80013a8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
  }
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3724      	adds	r7, #36	@ 0x24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
	...

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	@ (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	@ (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	@ (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	@ 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	@ 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f7ff ff90 	bl	8001418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff49 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff5e 	bl	80013fc <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff90 	bl	800146c <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5f 	bl	8001418 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ffb0 	bl	80014d0 <SysTick_Config>
 8001570:	4603      	mov	r3, r0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800157c:	b480      	push	{r7}
 800157e:	b08b      	sub	sp, #44	@ 0x2c
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158e:	e169      	b.n	8001864 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001590:	2201      	movs	r2, #1
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	f040 8158 	bne.w	800185e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4a9a      	ldr	r2, [pc, #616]	@ (800181c <HAL_GPIO_Init+0x2a0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d05e      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
 80015b8:	4a98      	ldr	r2, [pc, #608]	@ (800181c <HAL_GPIO_Init+0x2a0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d875      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015be:	4a98      	ldr	r2, [pc, #608]	@ (8001820 <HAL_GPIO_Init+0x2a4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d058      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
 80015c4:	4a96      	ldr	r2, [pc, #600]	@ (8001820 <HAL_GPIO_Init+0x2a4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d86f      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015ca:	4a96      	ldr	r2, [pc, #600]	@ (8001824 <HAL_GPIO_Init+0x2a8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d052      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
 80015d0:	4a94      	ldr	r2, [pc, #592]	@ (8001824 <HAL_GPIO_Init+0x2a8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d869      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015d6:	4a94      	ldr	r2, [pc, #592]	@ (8001828 <HAL_GPIO_Init+0x2ac>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d04c      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
 80015dc:	4a92      	ldr	r2, [pc, #584]	@ (8001828 <HAL_GPIO_Init+0x2ac>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d863      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015e2:	4a92      	ldr	r2, [pc, #584]	@ (800182c <HAL_GPIO_Init+0x2b0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d046      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
 80015e8:	4a90      	ldr	r2, [pc, #576]	@ (800182c <HAL_GPIO_Init+0x2b0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d85d      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015ee:	2b12      	cmp	r3, #18
 80015f0:	d82a      	bhi.n	8001648 <HAL_GPIO_Init+0xcc>
 80015f2:	2b12      	cmp	r3, #18
 80015f4:	d859      	bhi.n	80016aa <HAL_GPIO_Init+0x12e>
 80015f6:	a201      	add	r2, pc, #4	@ (adr r2, 80015fc <HAL_GPIO_Init+0x80>)
 80015f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fc:	08001677 	.word	0x08001677
 8001600:	08001651 	.word	0x08001651
 8001604:	08001663 	.word	0x08001663
 8001608:	080016a5 	.word	0x080016a5
 800160c:	080016ab 	.word	0x080016ab
 8001610:	080016ab 	.word	0x080016ab
 8001614:	080016ab 	.word	0x080016ab
 8001618:	080016ab 	.word	0x080016ab
 800161c:	080016ab 	.word	0x080016ab
 8001620:	080016ab 	.word	0x080016ab
 8001624:	080016ab 	.word	0x080016ab
 8001628:	080016ab 	.word	0x080016ab
 800162c:	080016ab 	.word	0x080016ab
 8001630:	080016ab 	.word	0x080016ab
 8001634:	080016ab 	.word	0x080016ab
 8001638:	080016ab 	.word	0x080016ab
 800163c:	080016ab 	.word	0x080016ab
 8001640:	08001659 	.word	0x08001659
 8001644:	0800166d 	.word	0x0800166d
 8001648:	4a79      	ldr	r2, [pc, #484]	@ (8001830 <HAL_GPIO_Init+0x2b4>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d013      	beq.n	8001676 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800164e:	e02c      	b.n	80016aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	623b      	str	r3, [r7, #32]
          break;
 8001656:	e029      	b.n	80016ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	3304      	adds	r3, #4
 800165e:	623b      	str	r3, [r7, #32]
          break;
 8001660:	e024      	b.n	80016ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	3308      	adds	r3, #8
 8001668:	623b      	str	r3, [r7, #32]
          break;
 800166a:	e01f      	b.n	80016ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	330c      	adds	r3, #12
 8001672:	623b      	str	r3, [r7, #32]
          break;
 8001674:	e01a      	b.n	80016ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d102      	bne.n	8001684 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800167e:	2304      	movs	r3, #4
 8001680:	623b      	str	r3, [r7, #32]
          break;
 8001682:	e013      	b.n	80016ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d105      	bne.n	8001698 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800168c:	2308      	movs	r3, #8
 800168e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	611a      	str	r2, [r3, #16]
          break;
 8001696:	e009      	b.n	80016ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001698:	2308      	movs	r3, #8
 800169a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	615a      	str	r2, [r3, #20]
          break;
 80016a2:	e003      	b.n	80016ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
          break;
 80016a8:	e000      	b.n	80016ac <HAL_GPIO_Init+0x130>
          break;
 80016aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2bff      	cmp	r3, #255	@ 0xff
 80016b0:	d801      	bhi.n	80016b6 <HAL_GPIO_Init+0x13a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	e001      	b.n	80016ba <HAL_GPIO_Init+0x13e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3304      	adds	r3, #4
 80016ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2bff      	cmp	r3, #255	@ 0xff
 80016c0:	d802      	bhi.n	80016c8 <HAL_GPIO_Init+0x14c>
 80016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	e002      	b.n	80016ce <HAL_GPIO_Init+0x152>
 80016c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ca:	3b08      	subs	r3, #8
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	210f      	movs	r1, #15
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	401a      	ands	r2, r3
 80016e0:	6a39      	ldr	r1, [r7, #32]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	431a      	orrs	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 80b1 	beq.w	800185e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001834 <HAL_GPIO_Init+0x2b8>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a4c      	ldr	r2, [pc, #304]	@ (8001834 <HAL_GPIO_Init+0x2b8>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b4a      	ldr	r3, [pc, #296]	@ (8001834 <HAL_GPIO_Init+0x2b8>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001714:	4a48      	ldr	r2, [pc, #288]	@ (8001838 <HAL_GPIO_Init+0x2bc>)
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	3302      	adds	r3, #2
 800171c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001720:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	220f      	movs	r2, #15
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a40      	ldr	r2, [pc, #256]	@ (800183c <HAL_GPIO_Init+0x2c0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d013      	beq.n	8001768 <HAL_GPIO_Init+0x1ec>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a3f      	ldr	r2, [pc, #252]	@ (8001840 <HAL_GPIO_Init+0x2c4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d00d      	beq.n	8001764 <HAL_GPIO_Init+0x1e8>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a3e      	ldr	r2, [pc, #248]	@ (8001844 <HAL_GPIO_Init+0x2c8>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d007      	beq.n	8001760 <HAL_GPIO_Init+0x1e4>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a3d      	ldr	r2, [pc, #244]	@ (8001848 <HAL_GPIO_Init+0x2cc>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d101      	bne.n	800175c <HAL_GPIO_Init+0x1e0>
 8001758:	2303      	movs	r3, #3
 800175a:	e006      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 800175c:	2304      	movs	r3, #4
 800175e:	e004      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 8001760:	2302      	movs	r3, #2
 8001762:	e002      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 8001768:	2300      	movs	r3, #0
 800176a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800176c:	f002 0203 	and.w	r2, r2, #3
 8001770:	0092      	lsls	r2, r2, #2
 8001772:	4093      	lsls	r3, r2
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4313      	orrs	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800177a:	492f      	ldr	r1, [pc, #188]	@ (8001838 <HAL_GPIO_Init+0x2bc>)
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3302      	adds	r3, #2
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001794:	4b2d      	ldr	r3, [pc, #180]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	492c      	ldr	r1, [pc, #176]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	608b      	str	r3, [r1, #8]
 80017a0:	e006      	b.n	80017b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017a2:	4b2a      	ldr	r3, [pc, #168]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	4928      	ldr	r1, [pc, #160]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d006      	beq.n	80017ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017bc:	4b23      	ldr	r3, [pc, #140]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	4922      	ldr	r1, [pc, #136]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	60cb      	str	r3, [r1, #12]
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017ca:	4b20      	ldr	r3, [pc, #128]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	491e      	ldr	r1, [pc, #120]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017e4:	4b19      	ldr	r3, [pc, #100]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4918      	ldr	r1, [pc, #96]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017f2:	4b16      	ldr	r3, [pc, #88]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4914      	ldr	r1, [pc, #80]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d021      	beq.n	8001850 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	490e      	ldr	r1, [pc, #56]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
 8001818:	e021      	b.n	800185e <HAL_GPIO_Init+0x2e2>
 800181a:	bf00      	nop
 800181c:	10320000 	.word	0x10320000
 8001820:	10310000 	.word	0x10310000
 8001824:	10220000 	.word	0x10220000
 8001828:	10210000 	.word	0x10210000
 800182c:	10120000 	.word	0x10120000
 8001830:	10110000 	.word	0x10110000
 8001834:	40021000 	.word	0x40021000
 8001838:	40010000 	.word	0x40010000
 800183c:	40010800 	.word	0x40010800
 8001840:	40010c00 	.word	0x40010c00
 8001844:	40011000 	.word	0x40011000
 8001848:	40011400 	.word	0x40011400
 800184c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001850:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <HAL_GPIO_Init+0x304>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	43db      	mvns	r3, r3
 8001858:	4909      	ldr	r1, [pc, #36]	@ (8001880 <HAL_GPIO_Init+0x304>)
 800185a:	4013      	ands	r3, r2
 800185c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	3301      	adds	r3, #1
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	fa22 f303 	lsr.w	r3, r2, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	f47f ae8e 	bne.w	8001590 <HAL_GPIO_Init+0x14>
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	372c      	adds	r7, #44	@ 0x2c
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	40010400 	.word	0x40010400

08001884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e272      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8087 	beq.w	80019b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a4:	4b92      	ldr	r3, [pc, #584]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d00c      	beq.n	80018ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b0:	4b8f      	ldr	r3, [pc, #572]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d112      	bne.n	80018e2 <HAL_RCC_OscConfig+0x5e>
 80018bc:	4b8c      	ldr	r3, [pc, #560]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c8:	d10b      	bne.n	80018e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ca:	4b89      	ldr	r3, [pc, #548]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d06c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x12c>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d168      	bne.n	80019b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e24c      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ea:	d106      	bne.n	80018fa <HAL_RCC_OscConfig+0x76>
 80018ec:	4b80      	ldr	r3, [pc, #512]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a7f      	ldr	r2, [pc, #508]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	e02e      	b.n	8001958 <HAL_RCC_OscConfig+0xd4>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x98>
 8001902:	4b7b      	ldr	r3, [pc, #492]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a7a      	ldr	r2, [pc, #488]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b78      	ldr	r3, [pc, #480]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a77      	ldr	r2, [pc, #476]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001914:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e01d      	b.n	8001958 <HAL_RCC_OscConfig+0xd4>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0xbc>
 8001926:	4b72      	ldr	r3, [pc, #456]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a71      	ldr	r2, [pc, #452]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 800192c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	4b6f      	ldr	r3, [pc, #444]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a6e      	ldr	r2, [pc, #440]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e00b      	b.n	8001958 <HAL_RCC_OscConfig+0xd4>
 8001940:	4b6b      	ldr	r3, [pc, #428]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a6a      	ldr	r2, [pc, #424]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b68      	ldr	r3, [pc, #416]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a67      	ldr	r2, [pc, #412]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001956:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d013      	beq.n	8001988 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7fe fec0 	bl	80006e4 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7fe febc 	bl	80006e4 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	@ 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e200      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	4b5d      	ldr	r3, [pc, #372]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0xe4>
 8001986:	e014      	b.n	80019b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7fe feac 	bl	80006e4 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7fe fea8 	bl	80006e4 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	@ 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e1ec      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a2:	4b53      	ldr	r3, [pc, #332]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x10c>
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d063      	beq.n	8001a86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019be:	4b4c      	ldr	r3, [pc, #304]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00b      	beq.n	80019e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ca:	4b49      	ldr	r3, [pc, #292]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d11c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x18c>
 80019d6:	4b46      	ldr	r3, [pc, #280]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d116      	bne.n	8001a10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	4b43      	ldr	r3, [pc, #268]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d005      	beq.n	80019fa <HAL_RCC_OscConfig+0x176>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e1c0      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fa:	4b3d      	ldr	r3, [pc, #244]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4939      	ldr	r1, [pc, #228]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0e:	e03a      	b.n	8001a86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d020      	beq.n	8001a5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a18:	4b36      	ldr	r3, [pc, #216]	@ (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7fe fe61 	bl	80006e4 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a26:	f7fe fe5d 	bl	80006e4 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e1a1      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a38:	4b2d      	ldr	r3, [pc, #180]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a44:	4b2a      	ldr	r3, [pc, #168]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4927      	ldr	r1, [pc, #156]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]
 8001a58:	e015      	b.n	8001a86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5a:	4b26      	ldr	r3, [pc, #152]	@ (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7fe fe40 	bl	80006e4 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a68:	f7fe fe3c 	bl	80006e4 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e180      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d03a      	beq.n	8001b08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d019      	beq.n	8001ace <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9a:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa0:	f7fe fe20 	bl	80006e4 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7fe fe1c 	bl	80006e4 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e160      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aba:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f000 faba 	bl	8002040 <RCC_Delay>
 8001acc:	e01c      	b.n	8001b08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ace:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad4:	f7fe fe06 	bl	80006e4 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ada:	e00f      	b.n	8001afc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001adc:	f7fe fe02 	bl	80006e4 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d908      	bls.n	8001afc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e146      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
 8001af4:	42420000 	.word	0x42420000
 8001af8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	4b92      	ldr	r3, [pc, #584]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e9      	bne.n	8001adc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80a6 	beq.w	8001c62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1a:	4b8b      	ldr	r3, [pc, #556]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10d      	bne.n	8001b42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	4b88      	ldr	r3, [pc, #544]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4a87      	ldr	r2, [pc, #540]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b30:	61d3      	str	r3, [r2, #28]
 8001b32:	4b85      	ldr	r3, [pc, #532]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b42:	4b82      	ldr	r3, [pc, #520]	@ (8001d4c <HAL_RCC_OscConfig+0x4c8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d118      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d4c <HAL_RCC_OscConfig+0x4c8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a7e      	ldr	r2, [pc, #504]	@ (8001d4c <HAL_RCC_OscConfig+0x4c8>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5a:	f7fe fdc3 	bl	80006e4 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b62:	f7fe fdbf 	bl	80006e4 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b64      	cmp	r3, #100	@ 0x64
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e103      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	4b75      	ldr	r3, [pc, #468]	@ (8001d4c <HAL_RCC_OscConfig+0x4c8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x312>
 8001b88:	4b6f      	ldr	r3, [pc, #444]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	e02d      	b.n	8001bf2 <HAL_RCC_OscConfig+0x36e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x334>
 8001b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a69      	ldr	r2, [pc, #420]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6213      	str	r3, [r2, #32]
 8001baa:	4b67      	ldr	r3, [pc, #412]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a66      	ldr	r2, [pc, #408]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	f023 0304 	bic.w	r3, r3, #4
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	e01c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x36e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d10c      	bne.n	8001bda <HAL_RCC_OscConfig+0x356>
 8001bc0:	4b61      	ldr	r3, [pc, #388]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a60      	ldr	r2, [pc, #384]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6213      	str	r3, [r2, #32]
 8001bcc:	4b5e      	ldr	r3, [pc, #376]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4a5d      	ldr	r2, [pc, #372]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6213      	str	r3, [r2, #32]
 8001bd8:	e00b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x36e>
 8001bda:	4b5b      	ldr	r3, [pc, #364]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a5a      	ldr	r2, [pc, #360]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	4b58      	ldr	r3, [pc, #352]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a57      	ldr	r2, [pc, #348]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d015      	beq.n	8001c26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfa:	f7fe fd73 	bl	80006e4 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7fe fd6f 	bl	80006e4 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e0b1      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c18:	4b4b      	ldr	r3, [pc, #300]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0ee      	beq.n	8001c02 <HAL_RCC_OscConfig+0x37e>
 8001c24:	e014      	b.n	8001c50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c26:	f7fe fd5d 	bl	80006e4 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7fe fd59 	bl	80006e4 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e09b      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c44:	4b40      	ldr	r3, [pc, #256]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1ee      	bne.n	8001c2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d105      	bne.n	8001c62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c56:	4b3c      	ldr	r3, [pc, #240]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8087 	beq.w	8001d7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c6c:	4b36      	ldr	r3, [pc, #216]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d061      	beq.n	8001d3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d146      	bne.n	8001d0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c80:	4b33      	ldr	r3, [pc, #204]	@ (8001d50 <HAL_RCC_OscConfig+0x4cc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7fe fd2d 	bl	80006e4 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7fe fd29 	bl	80006e4 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e06d      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca0:	4b29      	ldr	r3, [pc, #164]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb4:	d108      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cb6:	4b24      	ldr	r3, [pc, #144]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	4921      	ldr	r1, [pc, #132]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a19      	ldr	r1, [r3, #32]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	491b      	ldr	r1, [pc, #108]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <HAL_RCC_OscConfig+0x4cc>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7fe fcfd 	bl	80006e4 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7fe fcf9 	bl	80006e4 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e03d      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d00:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x46a>
 8001d0c:	e035      	b.n	8001d7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <HAL_RCC_OscConfig+0x4cc>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7fe fce6 	bl	80006e4 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7fe fce2 	bl	80006e4 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e026      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x498>
 8001d3a:	e01e      	b.n	8001d7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e019      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d54:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <HAL_RCC_OscConfig+0x500>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000

08001d88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0d0      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d910      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b67      	ldr	r3, [pc, #412]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 0207 	bic.w	r2, r3, #7
 8001db2:	4965      	ldr	r1, [pc, #404]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b63      	ldr	r3, [pc, #396]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0b8      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de4:	4b59      	ldr	r3, [pc, #356]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4a58      	ldr	r2, [pc, #352]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dfc:	4b53      	ldr	r3, [pc, #332]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4a52      	ldr	r2, [pc, #328]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	4b50      	ldr	r3, [pc, #320]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	494d      	ldr	r1, [pc, #308]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d040      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	4b47      	ldr	r3, [pc, #284]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d115      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e07f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e46:	4b41      	ldr	r3, [pc, #260]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e073      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e56:	4b3d      	ldr	r3, [pc, #244]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e06b      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e66:	4b39      	ldr	r3, [pc, #228]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f023 0203 	bic.w	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4936      	ldr	r1, [pc, #216]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e78:	f7fe fc34 	bl	80006e4 <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e80:	f7fe fc30 	bl	80006e4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e053      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	4b2d      	ldr	r3, [pc, #180]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 020c 	and.w	r2, r3, #12
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1eb      	bne.n	8001e80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b27      	ldr	r3, [pc, #156]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d210      	bcs.n	8001ed8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b24      	ldr	r3, [pc, #144]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 0207 	bic.w	r2, r3, #7
 8001ebe:	4922      	ldr	r1, [pc, #136]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e032      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4916      	ldr	r1, [pc, #88]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f02:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	490e      	ldr	r1, [pc, #56]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f16:	f000 f821 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	490a      	ldr	r1, [pc, #40]	@ (8001f50 <HAL_RCC_ClockConfig+0x1c8>)
 8001f28:	5ccb      	ldrb	r3, [r1, r3]
 8001f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2e:	4a09      	ldr	r2, [pc, #36]	@ (8001f54 <HAL_RCC_ClockConfig+0x1cc>)
 8001f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <HAL_RCC_ClockConfig+0x1d0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fb92 	bl	8000660 <HAL_InitTick>

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	080023c4 	.word	0x080023c4
 8001f54:	20000008 	.word	0x20000008
 8001f58:	2000000c 	.word	0x2000000c

08001f5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d002      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x30>
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d003      	beq.n	8001f92 <HAL_RCC_GetSysClockFreq+0x36>
 8001f8a:	e027      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f8e:	613b      	str	r3, [r7, #16]
      break;
 8001f90:	e027      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	0c9b      	lsrs	r3, r3, #18
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	4a17      	ldr	r2, [pc, #92]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d010      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001faa:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	0c5b      	lsrs	r3, r3, #17
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	4a11      	ldr	r2, [pc, #68]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fbe:	fb03 f202 	mul.w	r2, r3, r2
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	e004      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a0c      	ldr	r2, [pc, #48]	@ (8002000 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	613b      	str	r3, [r7, #16]
      break;
 8001fda:	e002      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fde:	613b      	str	r3, [r7, #16]
      break;
 8001fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fe2:	693b      	ldr	r3, [r7, #16]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	371c      	adds	r7, #28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	007a1200 	.word	0x007a1200
 8001ff8:	080023dc 	.word	0x080023dc
 8001ffc:	080023ec 	.word	0x080023ec
 8002000:	003d0900 	.word	0x003d0900

08002004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002008:	4b02      	ldr	r3, [pc, #8]	@ (8002014 <HAL_RCC_GetHCLKFreq+0x10>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	20000008 	.word	0x20000008

08002018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800201c:	f7ff fff2 	bl	8002004 <HAL_RCC_GetHCLKFreq>
 8002020:	4602      	mov	r2, r0
 8002022:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	0adb      	lsrs	r3, r3, #11
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	4903      	ldr	r1, [pc, #12]	@ (800203c <HAL_RCC_GetPCLK2Freq+0x24>)
 800202e:	5ccb      	ldrb	r3, [r1, r3]
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	080023d4 	.word	0x080023d4

08002040 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002048:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <RCC_Delay+0x34>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0a      	ldr	r2, [pc, #40]	@ (8002078 <RCC_Delay+0x38>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	0a5b      	lsrs	r3, r3, #9
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800205c:	bf00      	nop
  }
  while (Delay --);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1e5a      	subs	r2, r3, #1
 8002062:	60fa      	str	r2, [r7, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f9      	bne.n	800205c <RCC_Delay+0x1c>
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	20000008 	.word	0x20000008
 8002078:	10624dd3 	.word	0x10624dd3

0800207c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d07d      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002098:	2300      	movs	r3, #0
 800209a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209c:	4b4f      	ldr	r3, [pc, #316]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10d      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	4b4c      	ldr	r3, [pc, #304]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	4a4b      	ldr	r2, [pc, #300]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	61d3      	str	r3, [r2, #28]
 80020b4:	4b49      	ldr	r3, [pc, #292]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c0:	2301      	movs	r3, #1
 80020c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	4b46      	ldr	r3, [pc, #280]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d118      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020d0:	4b43      	ldr	r3, [pc, #268]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a42      	ldr	r2, [pc, #264]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020dc:	f7fe fb02 	bl	80006e4 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e2:	e008      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e4:	f7fe fafe 	bl	80006e4 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	@ 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e06d      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f6:	4b3a      	ldr	r3, [pc, #232]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002102:	4b36      	ldr	r3, [pc, #216]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800210a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d02e      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	429a      	cmp	r2, r3
 800211e:	d027      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002120:	4b2e      	ldr	r3, [pc, #184]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002128:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800212a:	4b2e      	ldr	r3, [pc, #184]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800212c:	2201      	movs	r2, #1
 800212e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002130:	4b2c      	ldr	r3, [pc, #176]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002136:	4a29      	ldr	r2, [pc, #164]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d014      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7fe facd 	bl	80006e4 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7fe fac9 	bl	80006e4 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e036      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002164:	4b1d      	ldr	r3, [pc, #116]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ee      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002170:	4b1a      	ldr	r3, [pc, #104]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4917      	ldr	r1, [pc, #92]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217e:	4313      	orrs	r3, r2
 8002180:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002182:	7dfb      	ldrb	r3, [r7, #23]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002188:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	4a13      	ldr	r2, [pc, #76]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002192:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021a0:	4b0e      	ldr	r3, [pc, #56]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	490b      	ldr	r1, [pc, #44]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d008      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021be:	4b07      	ldr	r3, [pc, #28]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	4904      	ldr	r1, [pc, #16]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40007000 	.word	0x40007000
 80021e4:	42420440 	.word	0x42420440

080021e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	2300      	movs	r3, #0
 8002202:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b10      	cmp	r3, #16
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b10      	cmp	r3, #16
 800220e:	f200 808a 	bhi.w	8002326 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d045      	beq.n	80022a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d075      	beq.n	800230a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800221e:	e082      	b.n	8002326 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002220:	4b46      	ldr	r3, [pc, #280]	@ (800233c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002226:	4b45      	ldr	r3, [pc, #276]	@ (800233c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d07b      	beq.n	800232a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	0c9b      	lsrs	r3, r3, #18
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	4a41      	ldr	r2, [pc, #260]	@ (8002340 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800223c:	5cd3      	ldrb	r3, [r2, r3]
 800223e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d015      	beq.n	8002276 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800224a:	4b3c      	ldr	r3, [pc, #240]	@ (800233c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	0c5b      	lsrs	r3, r3, #17
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	4a3b      	ldr	r2, [pc, #236]	@ (8002344 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00d      	beq.n	8002280 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002264:	4a38      	ldr	r2, [pc, #224]	@ (8002348 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	fbb2 f2f3 	udiv	r2, r2, r3
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	e004      	b.n	8002280 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4a34      	ldr	r2, [pc, #208]	@ (800234c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002280:	4b2e      	ldr	r3, [pc, #184]	@ (800233c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002288:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800228c:	d102      	bne.n	8002294 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	61bb      	str	r3, [r7, #24]
      break;
 8002292:	e04a      	b.n	800232a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4a2d      	ldr	r2, [pc, #180]	@ (8002350 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	085b      	lsrs	r3, r3, #1
 80022a0:	61bb      	str	r3, [r7, #24]
      break;
 80022a2:	e042      	b.n	800232a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80022a4:	4b25      	ldr	r3, [pc, #148]	@ (800233c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022b4:	d108      	bne.n	80022c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80022c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	e01f      	b.n	8002308 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022d2:	d109      	bne.n	80022e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80022d4:	4b19      	ldr	r3, [pc, #100]	@ (800233c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80022e0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	e00f      	b.n	8002308 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80022f2:	d11c      	bne.n	800232e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80022f4:	4b11      	ldr	r3, [pc, #68]	@ (800233c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d016      	beq.n	800232e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002300:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002304:	61bb      	str	r3, [r7, #24]
      break;
 8002306:	e012      	b.n	800232e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002308:	e011      	b.n	800232e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800230a:	f7ff fe85 	bl	8002018 <HAL_RCC_GetPCLK2Freq>
 800230e:	4602      	mov	r2, r0
 8002310:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	0b9b      	lsrs	r3, r3, #14
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	3301      	adds	r3, #1
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002322:	61bb      	str	r3, [r7, #24]
      break;
 8002324:	e004      	b.n	8002330 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002326:	bf00      	nop
 8002328:	e002      	b.n	8002330 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800232a:	bf00      	nop
 800232c:	e000      	b.n	8002330 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800232e:	bf00      	nop
    }
  }
  return (frequency);
 8002330:	69bb      	ldr	r3, [r7, #24]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	080023f0 	.word	0x080023f0
 8002344:	08002400 	.word	0x08002400
 8002348:	007a1200 	.word	0x007a1200
 800234c:	003d0900 	.word	0x003d0900
 8002350:	aaaaaaab 	.word	0xaaaaaaab

08002354 <memset>:
 8002354:	4603      	mov	r3, r0
 8002356:	4402      	add	r2, r0
 8002358:	4293      	cmp	r3, r2
 800235a:	d100      	bne.n	800235e <memset+0xa>
 800235c:	4770      	bx	lr
 800235e:	f803 1b01 	strb.w	r1, [r3], #1
 8002362:	e7f9      	b.n	8002358 <memset+0x4>

08002364 <__libc_init_array>:
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	2600      	movs	r6, #0
 8002368:	4d0c      	ldr	r5, [pc, #48]	@ (800239c <__libc_init_array+0x38>)
 800236a:	4c0d      	ldr	r4, [pc, #52]	@ (80023a0 <__libc_init_array+0x3c>)
 800236c:	1b64      	subs	r4, r4, r5
 800236e:	10a4      	asrs	r4, r4, #2
 8002370:	42a6      	cmp	r6, r4
 8002372:	d109      	bne.n	8002388 <__libc_init_array+0x24>
 8002374:	f000 f81a 	bl	80023ac <_init>
 8002378:	2600      	movs	r6, #0
 800237a:	4d0a      	ldr	r5, [pc, #40]	@ (80023a4 <__libc_init_array+0x40>)
 800237c:	4c0a      	ldr	r4, [pc, #40]	@ (80023a8 <__libc_init_array+0x44>)
 800237e:	1b64      	subs	r4, r4, r5
 8002380:	10a4      	asrs	r4, r4, #2
 8002382:	42a6      	cmp	r6, r4
 8002384:	d105      	bne.n	8002392 <__libc_init_array+0x2e>
 8002386:	bd70      	pop	{r4, r5, r6, pc}
 8002388:	f855 3b04 	ldr.w	r3, [r5], #4
 800238c:	4798      	blx	r3
 800238e:	3601      	adds	r6, #1
 8002390:	e7ee      	b.n	8002370 <__libc_init_array+0xc>
 8002392:	f855 3b04 	ldr.w	r3, [r5], #4
 8002396:	4798      	blx	r3
 8002398:	3601      	adds	r6, #1
 800239a:	e7f2      	b.n	8002382 <__libc_init_array+0x1e>
 800239c:	08002404 	.word	0x08002404
 80023a0:	08002404 	.word	0x08002404
 80023a4:	08002404 	.word	0x08002404
 80023a8:	08002408 	.word	0x08002408

080023ac <_init>:
 80023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ae:	bf00      	nop
 80023b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b2:	bc08      	pop	{r3}
 80023b4:	469e      	mov	lr, r3
 80023b6:	4770      	bx	lr

080023b8 <_fini>:
 80023b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ba:	bf00      	nop
 80023bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023be:	bc08      	pop	{r3}
 80023c0:	469e      	mov	lr, r3
 80023c2:	4770      	bx	lr
