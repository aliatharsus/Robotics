
vel2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006610  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08006720  08006720  00007720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006acc  08006acc  00008204  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006acc  08006acc  00007acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ad4  08006ad4  00008204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ad4  08006ad4  00007ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ad8  08006ad8  00007ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  08006adc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000208  08006ce0  00008208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08006ce0  0000845c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb9e  00000000  00000000  0000822d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b98  00000000  00000000  00013dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00015968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b0  00000000  00000000  000165d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001878b  00000000  00000000  00016f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d208  00000000  00000000  0002f70b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c9e4  00000000  00000000  0003c913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c92f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f4  00000000  00000000  000c933c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000cda30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	08006708 	.word	0x08006708

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	08006708 	.word	0x08006708

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4906      	ldr	r1, [pc, #24]	@ (8001150 <__NVIC_EnableIRQ+0x34>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	@ (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <HAL_GPIO_EXTI_Callback>:

int velsArr[] = {0,1000,300,500,1000,0,-250,800,-1000};
int velArri=0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80011b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b6:	480e      	ldr	r0, [pc, #56]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0x48>)
 80011b8:	f001 f969 	bl	800248e <HAL_GPIO_TogglePin>
	if(GPIO_Pin==C1_Pin){
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d111      	bne.n	80011e6 <HAL_GPIO_EXTI_Callback+0x3e>
		  if(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))currPos--;
 80011c2:	2108      	movs	r1, #8
 80011c4:	480b      	ldr	r0, [pc, #44]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80011c6:	f001 f933 	bl	8002430 <HAL_GPIO_ReadPin>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_GPIO_EXTI_Callback+0x34>
 80011d0:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x50>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	4a08      	ldr	r2, [pc, #32]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x50>)
 80011d8:	6013      	str	r3, [r2, #0]
		  else currPos++;
	  }
}
 80011da:	e004      	b.n	80011e6 <HAL_GPIO_EXTI_Callback+0x3e>
		  else currPos++;
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x50>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	4a05      	ldr	r2, [pc, #20]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x50>)
 80011e4:	6013      	str	r3, [r2, #0]
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40011000 	.word	0x40011000
 80011f4:	40010800 	.word	0x40010800
 80011f8:	200002b4 	.word	0x200002b4

080011fc <TIM2_Init>:
#define GET_TIM2_COUNT()    (TIM2->CNT)
void TIM2_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001200:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <TIM2_Init+0x74>)
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	4a1a      	ldr	r2, [pc, #104]	@ (8001270 <TIM2_Init+0x74>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	61d3      	str	r3, [r2, #28]
    TIM2->CR1 = 0;
 800120c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
    TIM2->PSC = 72 - 1;
 8001214:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001218:	2247      	movs	r2, #71	@ 0x47
 800121a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 0xFFFF - 1;
 800121c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001220:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001224:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CNT = 0;
 8001226:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->DIER |= TIM_DIER_UIE;
 800122e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	60d3      	str	r3, [r2, #12]
    TIM2->SR &= ~TIM_SR_UIF;
 800123e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	6113      	str	r3, [r2, #16]
    NVIC_SetPriority(TIM2_IRQn, 2);
 800124e:	2102      	movs	r1, #2
 8001250:	201c      	movs	r0, #28
 8001252:	f7ff ff7f 	bl	8001154 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8001256:	201c      	movs	r0, #28
 8001258:	f7ff ff60 	bl	800111c <__NVIC_EnableIRQ>
    TIM2->CR1 |= TIM_CR1_CEN;
 800125c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000

08001274 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
 8001274:	b490      	push	{r4, r7}
 8001276:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 8001278:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d012      	beq.n	80012ac <TIM2_IRQHandler+0x38>
    {
        TIM2->SR &= ~TIM_SR_UIF;
 8001286:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	6113      	str	r3, [r2, #16]
        micros += 65535;
 8001296:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <TIM2_IRQHandler+0x40>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80012a0:	1910      	adds	r0, r2, r4
 80012a2:	f143 0100 	adc.w	r1, r3, #0
 80012a6:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <TIM2_IRQHandler+0x40>)
 80012a8:	e9c3 0100 	strd	r0, r1, [r3]
    }
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc90      	pop	{r4, r7}
 80012b2:	4770      	bx	lr
 80012b4:	200002d0 	.word	0x200002d0

080012b8 <getMicros>:
long long getMicros(){
 80012b8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80012bc:	b087      	sub	sp, #28
 80012be:	af00      	add	r7, sp, #0
	unsigned int cnt;
	long long over1, over2;
	do {
	        over1 = micros;
 80012c0:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <getMicros+0x5c>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	        cnt = GET_TIM2_COUNT();
 80012ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d0:	60fb      	str	r3, [r7, #12]
	        over2 = micros;
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <getMicros+0x5c>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	e9c7 2300 	strd	r2, r3, [r7]
	} while (over1 != over2);
 80012dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80012e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012e4:	429d      	cmp	r5, r3
 80012e6:	bf08      	it	eq
 80012e8:	4294      	cmpeq	r4, r2
 80012ea:	d1e9      	bne.n	80012c0 <getMicros+0x8>
	return over1 + cnt;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	4611      	mov	r1, r2
 80012f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012f8:	eb10 0802 	adds.w	r8, r0, r2
 80012fc:	eb41 0903 	adc.w	r9, r1, r3
 8001300:	4642      	mov	r2, r8
 8001302:	464b      	mov	r3, r9
}
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	200002d0 	.word	0x200002d0

08001318 <constrain>:
uint32_t millis(){ return	HAL_GetTick();}
int abs(int val){	return val >= 0 ? val : -val;}
float constrain(float val, float min, float max){
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  if(val >= max) return max;
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f7ff febe 	bl	80010a8 <__aeabi_fcmpge>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <constrain+0x1e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	e009      	b.n	800134a <constrain+0x32>
  else if(val <= min) return min;
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f7ff feab 	bl	8001094 <__aeabi_fcmple>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <constrain+0x30>
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	e000      	b.n	800134a <constrain+0x32>
  else return val;
 8001348:	68fb      	ldr	r3, [r7, #12]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <writeMotor>:
void writeMotor(int val){
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	val = (int)constrain(val,-1023,1023);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fc9d 	bl	8000c9c <__aeabi_i2f>
 8001362:	4603      	mov	r3, r0
 8001364:	4a24      	ldr	r2, [pc, #144]	@ (80013f8 <writeMotor+0xa4>)
 8001366:	4925      	ldr	r1, [pc, #148]	@ (80013fc <writeMotor+0xa8>)
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ffd5 	bl	8001318 <constrain>
 800136e:	4603      	mov	r3, r0
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fead 	bl	80010d0 <__aeabi_f2iz>
 8001376:	4603      	mov	r3, r0
 8001378:	607b      	str	r3, [r7, #4]
  if(val > 100){
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b64      	cmp	r3, #100	@ 0x64
 800137e:	dd12      	ble.n	80013a6 <writeMotor+0x52>
    HAL_GPIO_WritePin(INA_GPIO_Port, INA_Pin, 1);
 8001380:	2201      	movs	r2, #1
 8001382:	2120      	movs	r1, #32
 8001384:	481e      	ldr	r0, [pc, #120]	@ (8001400 <writeMotor+0xac>)
 8001386:	f001 f86a 	bl	800245e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INB_GPIO_Port, INB_Pin, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2140      	movs	r1, #64	@ 0x40
 800138e:	481c      	ldr	r0, [pc, #112]	@ (8001400 <writeMotor+0xac>)
 8001390:	f001 f865 	bl	800245e <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, abs(val));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800139a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800139e:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <writeMotor+0xb0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	639a      	str	r2, [r3, #56]	@ 0x38
    // Stop motor completely
    HAL_GPIO_WritePin(INA_GPIO_Port, INA_Pin, 0);
    HAL_GPIO_WritePin(INB_GPIO_Port, INB_Pin, 0);
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
  }
}
 80013a4:	e024      	b.n	80013f0 <writeMotor+0x9c>
  else if(val < -100){
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80013ac:	da12      	bge.n	80013d4 <writeMotor+0x80>
    HAL_GPIO_WritePin(INA_GPIO_Port, INA_Pin, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2120      	movs	r1, #32
 80013b2:	4813      	ldr	r0, [pc, #76]	@ (8001400 <writeMotor+0xac>)
 80013b4:	f001 f853 	bl	800245e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INB_GPIO_Port, INB_Pin, 1);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2140      	movs	r1, #64	@ 0x40
 80013bc:	4810      	ldr	r0, [pc, #64]	@ (8001400 <writeMotor+0xac>)
 80013be:	f001 f84e 	bl	800245e <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, abs(val));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80013c8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80013cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <writeMotor+0xb0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80013d2:	e00d      	b.n	80013f0 <writeMotor+0x9c>
    HAL_GPIO_WritePin(INA_GPIO_Port, INA_Pin, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2120      	movs	r1, #32
 80013d8:	4809      	ldr	r0, [pc, #36]	@ (8001400 <writeMotor+0xac>)
 80013da:	f001 f840 	bl	800245e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INB_GPIO_Port, INB_Pin, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2140      	movs	r1, #64	@ 0x40
 80013e2:	4807      	ldr	r0, [pc, #28]	@ (8001400 <writeMotor+0xac>)
 80013e4:	f001 f83b 	bl	800245e <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <writeMotor+0xb0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2200      	movs	r2, #0
 80013ee:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	447fc000 	.word	0x447fc000
 80013fc:	c47fc000 	.word	0xc47fc000
 8001400:	40010800 	.word	0x40010800
 8001404:	20000224 	.word	0x20000224

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140a:	b095      	sub	sp, #84	@ 0x54
 800140c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140e:	f000 fd1b 	bl	8001e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001412:	f000 f993 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001416:	f000 fa85 	bl	8001924 <MX_GPIO_Init>
  MX_TIM1_Init();
 800141a:	f000 f9d5 	bl	80017c8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800141e:	f000 fa57 	bl	80018d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TIM2_Init();
 8001422:	f7ff feeb 	bl	80011fc <TIM2_Init>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001426:	4ba4      	ldr	r3, [pc, #656]	@ (80016b8 <main+0x2b0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2200      	movs	r2, #0
 800142c:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800142e:	2104      	movs	r1, #4
 8001430:	48a1      	ldr	r0, [pc, #644]	@ (80016b8 <main+0x2b0>)
 8001432:	f001 fcbd 	bl	8002db0 <HAL_TIM_PWM_Start>
  long long prevT = getMicros();
 8001436:	f7ff ff3f 	bl	80012b8 <getMicros>
 800143a:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
  float prevErr=0, err=0;
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
  //float rawVel=0;
  float dt=0;
 800144a:	f04f 0300 	mov.w	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  double velCounter=getMicros();
 8001450:	f7ff ff32 	bl	80012b8 <getMicros>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff f80e 	bl	800047c <__aeabi_l2d>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  int term=0;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char ch[25];
	  sprintf(ch, "%.1f, %d\n",currVel,tarVel);
 800146c:	4b93      	ldr	r3, [pc, #588]	@ (80016bc <main+0x2b4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe ffd9 	bl	8000428 <__aeabi_f2d>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4991      	ldr	r1, [pc, #580]	@ (80016c0 <main+0x2b8>)
 800147c:	6809      	ldr	r1, [r1, #0]
 800147e:	4638      	mov	r0, r7
 8001480:	9100      	str	r1, [sp, #0]
 8001482:	4990      	ldr	r1, [pc, #576]	@ (80016c4 <main+0x2bc>)
 8001484:	f003 f802 	bl	800448c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)ch, strlen(ch), 5);
 8001488:	463b      	mov	r3, r7
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe fe60 	bl	8000150 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	4639      	mov	r1, r7
 8001496:	2305      	movs	r3, #5
 8001498:	488b      	ldr	r0, [pc, #556]	@ (80016c8 <main+0x2c0>)
 800149a:	f002 f906 	bl	80036aa <HAL_UART_Transmit>

	  if (getMicros()-velCounter>5000000){
 800149e:	f7ff ff0b 	bl	80012b8 <getMicros>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	f7fe ffe7 	bl	800047c <__aeabi_l2d>
 80014ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80014b2:	f7fe fe59 	bl	8000168 <__aeabi_dsub>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	a37a      	add	r3, pc, #488	@ (adr r3, 80016a8 <main+0x2a0>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff fa98 	bl	80009f8 <__aeabi_dcmpgt>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d01e      	beq.n	800150c <main+0x104>
		  velCounter=getMicros();
 80014ce:	f7ff fef3 	bl	80012b8 <getMicros>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7fe ffcf 	bl	800047c <__aeabi_l2d>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		  tarVel = velsArr[velArri];
 80014e6:	4b79      	ldr	r3, [pc, #484]	@ (80016cc <main+0x2c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a79      	ldr	r2, [pc, #484]	@ (80016d0 <main+0x2c8>)
 80014ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f0:	4a73      	ldr	r2, [pc, #460]	@ (80016c0 <main+0x2b8>)
 80014f2:	6013      	str	r3, [r2, #0]
		  velArri += 1;
 80014f4:	4b75      	ldr	r3, [pc, #468]	@ (80016cc <main+0x2c4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	4a74      	ldr	r2, [pc, #464]	@ (80016cc <main+0x2c4>)
 80014fc:	6013      	str	r3, [r2, #0]
		  if(velArri>=9)velArri=0;
 80014fe:	4b73      	ldr	r3, [pc, #460]	@ (80016cc <main+0x2c4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b08      	cmp	r3, #8
 8001504:	dd02      	ble.n	800150c <main+0x104>
 8001506:	4b71      	ldr	r3, [pc, #452]	@ (80016cc <main+0x2c4>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
	  }

	  dt = (getMicros()-prevT) / 1000000.0;
 800150c:	f7ff fed4 	bl	80012b8 <getMicros>
 8001510:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001514:	1a84      	subs	r4, r0, r2
 8001516:	eb61 0503 	sbc.w	r5, r1, r3
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7fe ffad 	bl	800047c <__aeabi_l2d>
 8001522:	a363      	add	r3, pc, #396	@ (adr r3, 80016b0 <main+0x2a8>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff f900 	bl	800072c <__aeabi_ddiv>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f7ff faa8 	bl	8000a88 <__aeabi_d2f>
 8001538:	4603      	mov	r3, r0
 800153a:	623b      	str	r3, [r7, #32]
	  	  if(dt>0.005f){
 800153c:	4965      	ldr	r1, [pc, #404]	@ (80016d4 <main+0x2cc>)
 800153e:	6a38      	ldr	r0, [r7, #32]
 8001540:	f7ff fdbc 	bl	80010bc <__aeabi_fcmpgt>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 80f2 	beq.w	8001730 <main+0x328>
//	  		  	rawVel = (currPos-lastPos)/dt;
//	  		  	currVel = (rawVel + rawVel1 + rawVel2)/3.0;  //in pulse persecond...
				velBuffer[velIndex] = (currPos-lastPos)/dt;
 800154c:	4b62      	ldr	r3, [pc, #392]	@ (80016d8 <main+0x2d0>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b62      	ldr	r3, [pc, #392]	@ (80016dc <main+0x2d4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fba0 	bl	8000c9c <__aeabi_i2f>
 800155c:	4603      	mov	r3, r0
 800155e:	4a60      	ldr	r2, [pc, #384]	@ (80016e0 <main+0x2d8>)
 8001560:	6816      	ldr	r6, [r2, #0]
 8001562:	6a39      	ldr	r1, [r7, #32]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fca1 	bl	8000eac <__aeabi_fdiv>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	4b5d      	ldr	r3, [pc, #372]	@ (80016e4 <main+0x2dc>)
 8001570:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
				velIndex = (velIndex + 1) % VEL_FILTER_SIZE;
 8001574:	4b5a      	ldr	r3, [pc, #360]	@ (80016e0 <main+0x2d8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	1c59      	adds	r1, r3, #1
 800157a:	4b5b      	ldr	r3, [pc, #364]	@ (80016e8 <main+0x2e0>)
 800157c:	fb83 2301 	smull	r2, r3, r3, r1
 8001580:	109a      	asrs	r2, r3, #2
 8001582:	17cb      	asrs	r3, r1, #31
 8001584:	1ad2      	subs	r2, r2, r3
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	1aca      	subs	r2, r1, r3
 8001590:	4b53      	ldr	r3, [pc, #332]	@ (80016e0 <main+0x2d8>)
 8001592:	601a      	str	r2, [r3, #0]
				float sum = 0;
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	@ 0x2c
				for(int i=0; i<VEL_FILTER_SIZE; i++) sum += velBuffer[i];
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800159e:	e00c      	b.n	80015ba <main+0x1b2>
 80015a0:	4a50      	ldr	r2, [pc, #320]	@ (80016e4 <main+0x2dc>)
 80015a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a8:	4619      	mov	r1, r3
 80015aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80015ac:	f7ff fac2 	bl	8000b34 <__addsf3>
 80015b0:	4603      	mov	r3, r0
 80015b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b6:	3301      	adds	r3, #1
 80015b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015bc:	2b09      	cmp	r3, #9
 80015be:	ddef      	ble.n	80015a0 <main+0x198>
				currVel = sum / VEL_FILTER_SIZE;
 80015c0:	494a      	ldr	r1, [pc, #296]	@ (80016ec <main+0x2e4>)
 80015c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80015c4:	f7ff fc72 	bl	8000eac <__aeabi_fdiv>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b3b      	ldr	r3, [pc, #236]	@ (80016bc <main+0x2b4>)
 80015ce:	601a      	str	r2, [r3, #0]
				err = tarVel-currVel;
 80015d0:	4b3b      	ldr	r3, [pc, #236]	@ (80016c0 <main+0x2b8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fb61 	bl	8000c9c <__aeabi_i2f>
 80015da:	4602      	mov	r2, r0
 80015dc:	4b37      	ldr	r3, [pc, #220]	@ (80016bc <main+0x2b4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	4610      	mov	r0, r2
 80015e4:	f7ff faa4 	bl	8000b30 <__aeabi_fsub>
 80015e8:	4603      	mov	r3, r0
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
				integ += err*dt;
 80015ec:	6a39      	ldr	r1, [r7, #32]
 80015ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015f0:	f7ff fba8 	bl	8000d44 <__aeabi_fmul>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b3d      	ldr	r3, [pc, #244]	@ (80016f0 <main+0x2e8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	4610      	mov	r0, r2
 8001600:	f7ff fa98 	bl	8000b34 <__addsf3>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	4b39      	ldr	r3, [pc, #228]	@ (80016f0 <main+0x2e8>)
 800160a:	601a      	str	r2, [r3, #0]
				integ = constrain(integ,-1000,1000);
 800160c:	4b38      	ldr	r3, [pc, #224]	@ (80016f0 <main+0x2e8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a38      	ldr	r2, [pc, #224]	@ (80016f4 <main+0x2ec>)
 8001612:	4939      	ldr	r1, [pc, #228]	@ (80016f8 <main+0x2f0>)
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fe7f 	bl	8001318 <constrain>
 800161a:	4603      	mov	r3, r0
 800161c:	4a34      	ldr	r2, [pc, #208]	@ (80016f0 <main+0x2e8>)
 800161e:	6013      	str	r3, [r2, #0]
				der = (err-prevErr)/dt;
 8001620:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001622:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001624:	f7ff fa84 	bl	8000b30 <__aeabi_fsub>
 8001628:	4603      	mov	r3, r0
 800162a:	6a39      	ldr	r1, [r7, #32]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fc3d 	bl	8000eac <__aeabi_fdiv>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	4b31      	ldr	r3, [pc, #196]	@ (80016fc <main+0x2f4>)
 8001638:	601a      	str	r2, [r3, #0]

				term = kp*err + ki*integ + kd*der;
 800163a:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <main+0x2f8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fb7f 	bl	8000d44 <__aeabi_fmul>
 8001646:	4603      	mov	r3, r0
 8001648:	461e      	mov	r6, r3
 800164a:	4b2e      	ldr	r3, [pc, #184]	@ (8001704 <main+0x2fc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a28      	ldr	r2, [pc, #160]	@ (80016f0 <main+0x2e8>)
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fb75 	bl	8000d44 <__aeabi_fmul>
 800165a:	4603      	mov	r3, r0
 800165c:	4619      	mov	r1, r3
 800165e:	4630      	mov	r0, r6
 8001660:	f7ff fa68 	bl	8000b34 <__addsf3>
 8001664:	4603      	mov	r3, r0
 8001666:	461e      	mov	r6, r3
 8001668:	4b27      	ldr	r3, [pc, #156]	@ (8001708 <main+0x300>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a23      	ldr	r2, [pc, #140]	@ (80016fc <main+0x2f4>)
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	4611      	mov	r1, r2
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fb66 	bl	8000d44 <__aeabi_fmul>
 8001678:	4603      	mov	r3, r0
 800167a:	4619      	mov	r1, r3
 800167c:	4630      	mov	r0, r6
 800167e:	f7ff fa59 	bl	8000b34 <__addsf3>
 8001682:	4603      	mov	r3, r0
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fd23 	bl	80010d0 <__aeabi_f2iz>
 800168a:	4603      	mov	r3, r0
 800168c:	61fb      	str	r3, [r7, #28]
				term = term>1023?1023:term<-1023?-1023:term;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001694:	da3c      	bge.n	8001710 <main+0x308>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	4a1c      	ldr	r2, [pc, #112]	@ (800170c <main+0x304>)
 800169a:	4293      	cmp	r3, r2
 800169c:	bfb8      	it	lt
 800169e:	4613      	movlt	r3, r2
 80016a0:	e038      	b.n	8001714 <main+0x30c>
 80016a2:	bf00      	nop
 80016a4:	f3af 8000 	nop.w
 80016a8:	00000000 	.word	0x00000000
 80016ac:	415312d0 	.word	0x415312d0
 80016b0:	00000000 	.word	0x00000000
 80016b4:	412e8480 	.word	0x412e8480
 80016b8:	20000224 	.word	0x20000224
 80016bc:	200002bc 	.word	0x200002bc
 80016c0:	200002c0 	.word	0x200002c0
 80016c4:	08006720 	.word	0x08006720
 80016c8:	2000026c 	.word	0x2000026c
 80016cc:	200002d8 	.word	0x200002d8
 80016d0:	2000000c 	.word	0x2000000c
 80016d4:	3ba3d70a 	.word	0x3ba3d70a
 80016d8:	200002b4 	.word	0x200002b4
 80016dc:	200002b8 	.word	0x200002b8
 80016e0:	20000304 	.word	0x20000304
 80016e4:	200002dc 	.word	0x200002dc
 80016e8:	66666667 	.word	0x66666667
 80016ec:	41200000 	.word	0x41200000
 80016f0:	200002c8 	.word	0x200002c8
 80016f4:	447a0000 	.word	0x447a0000
 80016f8:	c47a0000 	.word	0xc47a0000
 80016fc:	200002c4 	.word	0x200002c4
 8001700:	20000000 	.word	0x20000000
 8001704:	20000004 	.word	0x20000004
 8001708:	20000008 	.word	0x20000008
 800170c:	fffffc01 	.word	0xfffffc01
 8001710:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8001714:	61fb      	str	r3, [r7, #28]
				//if(tarVel<200 && tarVel>-200){term=0;}
				writeMotor(term);
 8001716:	69f8      	ldr	r0, [r7, #28]
 8001718:	f7ff fe1c 	bl	8001354 <writeMotor>

				lastPos = currPos;
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <main+0x32c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a05      	ldr	r2, [pc, #20]	@ (8001738 <main+0x330>)
 8001722:	6013      	str	r3, [r2, #0]
//	  		  	rawVel2 = rawVel1;
//	  		  	rawVel1 = rawVel;
				prevErr=err;
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	63fb      	str	r3, [r7, #60]	@ 0x3c
				prevT = getMicros();
 8001728:	f7ff fdc6 	bl	80012b8 <getMicros>
 800172c:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
  {
 8001730:	e69c      	b.n	800146c <main+0x64>
 8001732:	bf00      	nop
 8001734:	200002b4 	.word	0x200002b4
 8001738:	200002b8 	.word	0x200002b8

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b090      	sub	sp, #64	@ 0x40
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0318 	add.w	r3, r7, #24
 8001746:	2228      	movs	r2, #40	@ 0x28
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f002 ff03 	bl	8004556 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800175e:	2301      	movs	r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001762:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001766:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800176c:	2301      	movs	r3, #1
 800176e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001770:	2302      	movs	r3, #2
 8001772:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001774:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001778:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800177a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800177e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001780:	f107 0318 	add.w	r3, r7, #24
 8001784:	4618      	mov	r0, r3
 8001786:	f000 feb3 	bl	80024f0 <HAL_RCC_OscConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001790:	f000 f956 	bl	8001a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001794:	230f      	movs	r3, #15
 8001796:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001798:	2302      	movs	r3, #2
 800179a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2102      	movs	r1, #2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f001 f920 	bl	80029f4 <HAL_RCC_ClockConfig>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80017ba:	f000 f941 	bl	8001a40 <Error_Handler>
  }
}
 80017be:	bf00      	nop
 80017c0:	3740      	adds	r7, #64	@ 0x40
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b092      	sub	sp, #72	@ 0x48
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
 80017e8:	615a      	str	r2, [r3, #20]
 80017ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f002 feaf 	bl	8004556 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f8:	4b33      	ldr	r3, [pc, #204]	@ (80018c8 <MX_TIM1_Init+0x100>)
 80017fa:	4a34      	ldr	r2, [pc, #208]	@ (80018cc <MX_TIM1_Init+0x104>)
 80017fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80017fe:	4b32      	ldr	r3, [pc, #200]	@ (80018c8 <MX_TIM1_Init+0x100>)
 8001800:	2247      	movs	r2, #71	@ 0x47
 8001802:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001804:	4b30      	ldr	r3, [pc, #192]	@ (80018c8 <MX_TIM1_Init+0x100>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800180a:	4b2f      	ldr	r3, [pc, #188]	@ (80018c8 <MX_TIM1_Init+0x100>)
 800180c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001810:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001812:	4b2d      	ldr	r3, [pc, #180]	@ (80018c8 <MX_TIM1_Init+0x100>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001818:	4b2b      	ldr	r3, [pc, #172]	@ (80018c8 <MX_TIM1_Init+0x100>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181e:	4b2a      	ldr	r3, [pc, #168]	@ (80018c8 <MX_TIM1_Init+0x100>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001824:	4828      	ldr	r0, [pc, #160]	@ (80018c8 <MX_TIM1_Init+0x100>)
 8001826:	f001 fa73 	bl	8002d10 <HAL_TIM_PWM_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001830:	f000 f906 	bl	8001a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800183c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001840:	4619      	mov	r1, r3
 8001842:	4821      	ldr	r0, [pc, #132]	@ (80018c8 <MX_TIM1_Init+0x100>)
 8001844:	f001 fe32 	bl	80034ac <HAL_TIMEx_MasterConfigSynchronization>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800184e:	f000 f8f7 	bl	8001a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001852:	2360      	movs	r3, #96	@ 0x60
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800185e:	2300      	movs	r3, #0
 8001860:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800186e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001872:	2204      	movs	r2, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4814      	ldr	r0, [pc, #80]	@ (80018c8 <MX_TIM1_Init+0x100>)
 8001878:	f001 fb3c 	bl	8002ef4 <HAL_TIM_PWM_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001882:	f000 f8dd 	bl	8001a40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800189a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800189e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4619      	mov	r1, r3
 80018a8:	4807      	ldr	r0, [pc, #28]	@ (80018c8 <MX_TIM1_Init+0x100>)
 80018aa:	f001 fe5d 	bl	8003568 <HAL_TIMEx_ConfigBreakDeadTime>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80018b4:	f000 f8c4 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018b8:	4803      	ldr	r0, [pc, #12]	@ (80018c8 <MX_TIM1_Init+0x100>)
 80018ba:	f000 f917 	bl	8001aec <HAL_TIM_MspPostInit>

}
 80018be:	bf00      	nop
 80018c0:	3748      	adds	r7, #72	@ 0x48
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000224 	.word	0x20000224
 80018cc:	40012c00 	.word	0x40012c00

080018d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <MX_USART1_UART_Init+0x4c>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	@ (8001920 <MX_USART1_UART_Init+0x50>)
 80018d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <MX_USART1_UART_Init+0x4c>)
 80018dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <MX_USART1_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <MX_USART1_UART_Init+0x4c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <MX_USART1_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018f4:	4b09      	ldr	r3, [pc, #36]	@ (800191c <MX_USART1_UART_Init+0x4c>)
 80018f6:	220c      	movs	r2, #12
 80018f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	@ (800191c <MX_USART1_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <MX_USART1_UART_Init+0x4c>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	@ (800191c <MX_USART1_UART_Init+0x4c>)
 8001908:	f001 fe7f 	bl	800360a <HAL_UART_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001912:	f000 f895 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000026c 	.word	0x2000026c
 8001920:	40013800 	.word	0x40013800

08001924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	f107 0310 	add.w	r3, r7, #16
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001938:	4b3d      	ldr	r3, [pc, #244]	@ (8001a30 <MX_GPIO_Init+0x10c>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a3c      	ldr	r2, [pc, #240]	@ (8001a30 <MX_GPIO_Init+0x10c>)
 800193e:	f043 0310 	orr.w	r3, r3, #16
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b3a      	ldr	r3, [pc, #232]	@ (8001a30 <MX_GPIO_Init+0x10c>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001950:	4b37      	ldr	r3, [pc, #220]	@ (8001a30 <MX_GPIO_Init+0x10c>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a36      	ldr	r2, [pc, #216]	@ (8001a30 <MX_GPIO_Init+0x10c>)
 8001956:	f043 0320 	orr.w	r3, r3, #32
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b34      	ldr	r3, [pc, #208]	@ (8001a30 <MX_GPIO_Init+0x10c>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	4b31      	ldr	r3, [pc, #196]	@ (8001a30 <MX_GPIO_Init+0x10c>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a30      	ldr	r2, [pc, #192]	@ (8001a30 <MX_GPIO_Init+0x10c>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b2e      	ldr	r3, [pc, #184]	@ (8001a30 <MX_GPIO_Init+0x10c>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001980:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <MX_GPIO_Init+0x10c>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a2a      	ldr	r2, [pc, #168]	@ (8001a30 <MX_GPIO_Init+0x10c>)
 8001986:	f043 0308 	orr.w	r3, r3, #8
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b28      	ldr	r3, [pc, #160]	@ (8001a30 <MX_GPIO_Init+0x10c>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800199e:	4825      	ldr	r0, [pc, #148]	@ (8001a34 <MX_GPIO_Init+0x110>)
 80019a0:	f000 fd5d 	bl	800245e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INA_Pin|INB_Pin, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2160      	movs	r1, #96	@ 0x60
 80019a8:	4823      	ldr	r0, [pc, #140]	@ (8001a38 <MX_GPIO_Init+0x114>)
 80019aa:	f000 fd58 	bl	800245e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 80019ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2302      	movs	r3, #2
 80019be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	4619      	mov	r1, r3
 80019c6:	481b      	ldr	r0, [pc, #108]	@ (8001a34 <MX_GPIO_Init+0x110>)
 80019c8:	f000 fbae 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : C1_Pin */
  GPIO_InitStruct.Pin = C1_Pin;
 80019cc:	2304      	movs	r3, #4
 80019ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <MX_GPIO_Init+0x118>)
 80019d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C1_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	4619      	mov	r1, r3
 80019de:	4816      	ldr	r0, [pc, #88]	@ (8001a38 <MX_GPIO_Init+0x114>)
 80019e0:	f000 fba2 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : C2_Pin */
  GPIO_InitStruct.Pin = C2_Pin;
 80019e4:	2308      	movs	r3, #8
 80019e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C2_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	4619      	mov	r1, r3
 80019f6:	4810      	ldr	r0, [pc, #64]	@ (8001a38 <MX_GPIO_Init+0x114>)
 80019f8:	f000 fb96 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : INA_Pin INB_Pin */
  GPIO_InitStruct.Pin = INA_Pin|INB_Pin;
 80019fc:	2360      	movs	r3, #96	@ 0x60
 80019fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a00:	2301      	movs	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	4619      	mov	r1, r3
 8001a12:	4809      	ldr	r0, [pc, #36]	@ (8001a38 <MX_GPIO_Init+0x114>)
 8001a14:	f000 fb88 	bl	8002128 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2008      	movs	r0, #8
 8001a1e:	f000 fb4c 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a22:	2008      	movs	r0, #8
 8001a24:	f000 fb65 	bl	80020f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a28:	bf00      	nop
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40011000 	.word	0x40011000
 8001a38:	40010800 	.word	0x40010800
 8001a3c:	10110000 	.word	0x10110000

08001a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a44:	b672      	cpsid	i
}
 8001a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <Error_Handler+0x8>

08001a4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <HAL_MspInit+0x5c>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	4a14      	ldr	r2, [pc, #80]	@ (8001aa8 <HAL_MspInit+0x5c>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6193      	str	r3, [r2, #24]
 8001a5e:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_MspInit+0x5c>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <HAL_MspInit+0x5c>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa8 <HAL_MspInit+0x5c>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a74:	61d3      	str	r3, [r2, #28]
 8001a76:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <HAL_MspInit+0x5c>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a82:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <HAL_MspInit+0x60>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <HAL_MspInit+0x60>)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40010000 	.word	0x40010000

08001ab0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a09      	ldr	r2, [pc, #36]	@ (8001ae4 <HAL_TIM_PWM_MspInit+0x34>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d10b      	bne.n	8001ada <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0x38>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	4a08      	ldr	r2, [pc, #32]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0x38>)
 8001ac8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001acc:	6193      	str	r3, [r2, #24]
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <HAL_TIM_PWM_MspInit+0x38>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	40012c00 	.word	0x40012c00
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a10      	ldr	r2, [pc, #64]	@ (8001b48 <HAL_TIM_MspPostInit+0x5c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d118      	bne.n	8001b3e <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <HAL_TIM_MspPostInit+0x60>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a0e      	ldr	r2, [pc, #56]	@ (8001b4c <HAL_TIM_MspPostInit+0x60>)
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <HAL_TIM_MspPostInit+0x60>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8001b24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <HAL_TIM_MspPostInit+0x64>)
 8001b3a:	f000 faf5 	bl	8002128 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40012c00 	.word	0x40012c00
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010800 	.word	0x40010800

08001b54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a22      	ldr	r2, [pc, #136]	@ (8001bf8 <HAL_UART_MspInit+0xa4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d13d      	bne.n	8001bf0 <HAL_UART_MspInit+0x9c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b74:	4b21      	ldr	r3, [pc, #132]	@ (8001bfc <HAL_UART_MspInit+0xa8>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a20      	ldr	r2, [pc, #128]	@ (8001bfc <HAL_UART_MspInit+0xa8>)
 8001b7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <HAL_UART_MspInit+0xa8>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <HAL_UART_MspInit+0xa8>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4a1a      	ldr	r2, [pc, #104]	@ (8001bfc <HAL_UART_MspInit+0xa8>)
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	6193      	str	r3, [r2, #24]
 8001b98:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <HAL_UART_MspInit+0xa8>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ba4:	2340      	movs	r3, #64	@ 0x40
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4812      	ldr	r0, [pc, #72]	@ (8001c00 <HAL_UART_MspInit+0xac>)
 8001bb8:	f000 fab6 	bl	8002128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480c      	ldr	r0, [pc, #48]	@ (8001c00 <HAL_UART_MspInit+0xac>)
 8001bd0:	f000 faaa 	bl	8002128 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <HAL_UART_MspInit+0xb0>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bea:	4a06      	ldr	r2, [pc, #24]	@ (8001c04 <HAL_UART_MspInit+0xb0>)
 8001bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bee:	6053      	str	r3, [r2, #4]

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	@ 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40013800 	.word	0x40013800
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	40010000 	.word	0x40010000

08001c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <NMI_Handler+0x4>

08001c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <HardFault_Handler+0x4>

08001c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <MemManage_Handler+0x4>

08001c20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <BusFault_Handler+0x4>

08001c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <UsageFault_Handler+0x4>

08001c30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c58:	f000 f93c 	bl	8001ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C1_Pin);
 8001c64:	2004      	movs	r0, #4
 8001c66:	f000 fc2b 	bl	80024c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  return 1;
 8001c72:	2301      	movs	r3, #1
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <_kill>:

int _kill(int pid, int sig)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c86:	f002 fcb9 	bl	80045fc <__errno>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2216      	movs	r2, #22
 8001c8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_exit>:

void _exit (int status)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ffe7 	bl	8001c7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cae:	bf00      	nop
 8001cb0:	e7fd      	b.n	8001cae <_exit+0x12>

08001cb2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	e00a      	b.n	8001cda <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cc4:	f3af 8000 	nop.w
 8001cc8:	4601      	mov	r1, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	60ba      	str	r2, [r7, #8]
 8001cd0:	b2ca      	uxtb	r2, r1
 8001cd2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	dbf0      	blt.n	8001cc4 <_read+0x12>
  }

  return len;
 8001ce2:	687b      	ldr	r3, [r7, #4]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	e009      	b.n	8001d12 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	60ba      	str	r2, [r7, #8]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	dbf1      	blt.n	8001cfe <_write+0x12>
  }
  return len;
 8001d1a:	687b      	ldr	r3, [r7, #4]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_close>:

int _close(int file)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr

08001d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <_isatty>:

int _isatty(int file)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	@ (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d98:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db4:	f002 fc22 	bl	80045fc <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	220c      	movs	r2, #12
 8001dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	@ (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20005000 	.word	0x20005000
 8001de4:	00000400 	.word	0x00000400
 8001de8:	20000308 	.word	0x20000308
 8001dec:	20000460 	.word	0x20000460

08001df0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dfc:	f7ff fff8 	bl	8001df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e00:	480b      	ldr	r0, [pc, #44]	@ (8001e30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e02:	490c      	ldr	r1, [pc, #48]	@ (8001e34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e04:	4a0c      	ldr	r2, [pc, #48]	@ (8001e38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a09      	ldr	r2, [pc, #36]	@ (8001e3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e18:	4c09      	ldr	r4, [pc, #36]	@ (8001e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e26:	f002 fbef 	bl	8004608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e2a:	f7ff faed 	bl	8001408 <main>
  bx lr
 8001e2e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e34:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001e38:	08006adc 	.word	0x08006adc
  ldr r2, =_sbss
 8001e3c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001e40:	2000045c 	.word	0x2000045c

08001e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC1_2_IRQHandler>
	...

08001e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e4c:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <HAL_Init+0x28>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a07      	ldr	r2, [pc, #28]	@ (8001e70 <HAL_Init+0x28>)
 8001e52:	f043 0310 	orr.w	r3, r3, #16
 8001e56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f000 f923 	bl	80020a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e5e:	200f      	movs	r0, #15
 8001e60:	f000 f808 	bl	8001e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e64:	f7ff fdf2 	bl	8001a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40022000 	.word	0x40022000

08001e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <HAL_InitTick+0x54>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <HAL_InitTick+0x58>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f93b 	bl	800210e <HAL_SYSTICK_Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00e      	b.n	8001ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d80a      	bhi.n	8001ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f000 f903 	bl	80020ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb4:	4a06      	ldr	r2, [pc, #24]	@ (8001ed0 <HAL_InitTick+0x5c>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e000      	b.n	8001ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000030 	.word	0x20000030
 8001ecc:	20000038 	.word	0x20000038
 8001ed0:	20000034 	.word	0x20000034

08001ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed8:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <HAL_IncTick+0x1c>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_IncTick+0x20>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4a03      	ldr	r2, [pc, #12]	@ (8001ef4 <HAL_IncTick+0x20>)
 8001ee6:	6013      	str	r3, [r2, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	20000038 	.word	0x20000038
 8001ef4:	2000030c 	.word	0x2000030c

08001ef8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return uwTick;
 8001efc:	4b02      	ldr	r3, [pc, #8]	@ (8001f08 <HAL_GetTick+0x10>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	2000030c 	.word	0x2000030c

08001f0c <__NVIC_SetPriorityGrouping>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	@ (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_GetPriorityGrouping>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	@ (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4906      	ldr	r1, [pc, #24]	@ (8001fa4 <__NVIC_EnableIRQ+0x34>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <__NVIC_SetPriority>:
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	@ (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	@ (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	@ 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	@ 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002070:	d301      	bcc.n	8002076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002072:	2301      	movs	r3, #1
 8002074:	e00f      	b.n	8002096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002076:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <SysTick_Config+0x40>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207e:	210f      	movs	r1, #15
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f7ff ff90 	bl	8001fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002088:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <SysTick_Config+0x40>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208e:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <SysTick_Config+0x40>)
 8002090:	2207      	movs	r2, #7
 8002092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	e000e010 	.word	0xe000e010

080020a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff2d 	bl	8001f0c <__NVIC_SetPriorityGrouping>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020cc:	f7ff ff42 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 80020d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	6978      	ldr	r0, [r7, #20]
 80020d8:	f7ff ff90 	bl	8001ffc <NVIC_EncodePriority>
 80020dc:	4602      	mov	r2, r0
 80020de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff5f 	bl	8001fa8 <__NVIC_SetPriority>
}
 80020ea:	bf00      	nop
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff35 	bl	8001f70 <__NVIC_EnableIRQ>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ffa2 	bl	8002060 <SysTick_Config>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002128:	b480      	push	{r7}
 800212a:	b08b      	sub	sp, #44	@ 0x2c
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213a:	e169      	b.n	8002410 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800213c:	2201      	movs	r2, #1
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	429a      	cmp	r2, r3
 8002156:	f040 8158 	bne.w	800240a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4a9a      	ldr	r2, [pc, #616]	@ (80023c8 <HAL_GPIO_Init+0x2a0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d05e      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002164:	4a98      	ldr	r2, [pc, #608]	@ (80023c8 <HAL_GPIO_Init+0x2a0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d875      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800216a:	4a98      	ldr	r2, [pc, #608]	@ (80023cc <HAL_GPIO_Init+0x2a4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d058      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002170:	4a96      	ldr	r2, [pc, #600]	@ (80023cc <HAL_GPIO_Init+0x2a4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d86f      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 8002176:	4a96      	ldr	r2, [pc, #600]	@ (80023d0 <HAL_GPIO_Init+0x2a8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d052      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 800217c:	4a94      	ldr	r2, [pc, #592]	@ (80023d0 <HAL_GPIO_Init+0x2a8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d869      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 8002182:	4a94      	ldr	r2, [pc, #592]	@ (80023d4 <HAL_GPIO_Init+0x2ac>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d04c      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002188:	4a92      	ldr	r2, [pc, #584]	@ (80023d4 <HAL_GPIO_Init+0x2ac>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d863      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800218e:	4a92      	ldr	r2, [pc, #584]	@ (80023d8 <HAL_GPIO_Init+0x2b0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d046      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002194:	4a90      	ldr	r2, [pc, #576]	@ (80023d8 <HAL_GPIO_Init+0x2b0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d85d      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800219a:	2b12      	cmp	r3, #18
 800219c:	d82a      	bhi.n	80021f4 <HAL_GPIO_Init+0xcc>
 800219e:	2b12      	cmp	r3, #18
 80021a0:	d859      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 80021a2:	a201      	add	r2, pc, #4	@ (adr r2, 80021a8 <HAL_GPIO_Init+0x80>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	08002223 	.word	0x08002223
 80021ac:	080021fd 	.word	0x080021fd
 80021b0:	0800220f 	.word	0x0800220f
 80021b4:	08002251 	.word	0x08002251
 80021b8:	08002257 	.word	0x08002257
 80021bc:	08002257 	.word	0x08002257
 80021c0:	08002257 	.word	0x08002257
 80021c4:	08002257 	.word	0x08002257
 80021c8:	08002257 	.word	0x08002257
 80021cc:	08002257 	.word	0x08002257
 80021d0:	08002257 	.word	0x08002257
 80021d4:	08002257 	.word	0x08002257
 80021d8:	08002257 	.word	0x08002257
 80021dc:	08002257 	.word	0x08002257
 80021e0:	08002257 	.word	0x08002257
 80021e4:	08002257 	.word	0x08002257
 80021e8:	08002257 	.word	0x08002257
 80021ec:	08002205 	.word	0x08002205
 80021f0:	08002219 	.word	0x08002219
 80021f4:	4a79      	ldr	r2, [pc, #484]	@ (80023dc <HAL_GPIO_Init+0x2b4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021fa:	e02c      	b.n	8002256 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	623b      	str	r3, [r7, #32]
          break;
 8002202:	e029      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	3304      	adds	r3, #4
 800220a:	623b      	str	r3, [r7, #32]
          break;
 800220c:	e024      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	3308      	adds	r3, #8
 8002214:	623b      	str	r3, [r7, #32]
          break;
 8002216:	e01f      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	330c      	adds	r3, #12
 800221e:	623b      	str	r3, [r7, #32]
          break;
 8002220:	e01a      	b.n	8002258 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800222a:	2304      	movs	r3, #4
 800222c:	623b      	str	r3, [r7, #32]
          break;
 800222e:	e013      	b.n	8002258 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d105      	bne.n	8002244 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002238:	2308      	movs	r3, #8
 800223a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	611a      	str	r2, [r3, #16]
          break;
 8002242:	e009      	b.n	8002258 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002244:	2308      	movs	r3, #8
 8002246:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	615a      	str	r2, [r3, #20]
          break;
 800224e:	e003      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
          break;
 8002254:	e000      	b.n	8002258 <HAL_GPIO_Init+0x130>
          break;
 8002256:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2bff      	cmp	r3, #255	@ 0xff
 800225c:	d801      	bhi.n	8002262 <HAL_GPIO_Init+0x13a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	e001      	b.n	8002266 <HAL_GPIO_Init+0x13e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3304      	adds	r3, #4
 8002266:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2bff      	cmp	r3, #255	@ 0xff
 800226c:	d802      	bhi.n	8002274 <HAL_GPIO_Init+0x14c>
 800226e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	e002      	b.n	800227a <HAL_GPIO_Init+0x152>
 8002274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002276:	3b08      	subs	r3, #8
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	210f      	movs	r1, #15
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	401a      	ands	r2, r3
 800228c:	6a39      	ldr	r1, [r7, #32]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	431a      	orrs	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80b1 	beq.w	800240a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022a8:	4b4d      	ldr	r3, [pc, #308]	@ (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	4a4c      	ldr	r2, [pc, #304]	@ (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6193      	str	r3, [r2, #24]
 80022b4:	4b4a      	ldr	r3, [pc, #296]	@ (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022c0:	4a48      	ldr	r2, [pc, #288]	@ (80023e4 <HAL_GPIO_Init+0x2bc>)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	3302      	adds	r3, #2
 80022c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	220f      	movs	r2, #15
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a40      	ldr	r2, [pc, #256]	@ (80023e8 <HAL_GPIO_Init+0x2c0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <HAL_GPIO_Init+0x1ec>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a3f      	ldr	r2, [pc, #252]	@ (80023ec <HAL_GPIO_Init+0x2c4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00d      	beq.n	8002310 <HAL_GPIO_Init+0x1e8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a3e      	ldr	r2, [pc, #248]	@ (80023f0 <HAL_GPIO_Init+0x2c8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d007      	beq.n	800230c <HAL_GPIO_Init+0x1e4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3d      	ldr	r2, [pc, #244]	@ (80023f4 <HAL_GPIO_Init+0x2cc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_GPIO_Init+0x1e0>
 8002304:	2303      	movs	r3, #3
 8002306:	e006      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002308:	2304      	movs	r3, #4
 800230a:	e004      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 800230c:	2302      	movs	r3, #2
 800230e:	e002      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002314:	2300      	movs	r3, #0
 8002316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002318:	f002 0203 	and.w	r2, r2, #3
 800231c:	0092      	lsls	r2, r2, #2
 800231e:	4093      	lsls	r3, r2
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002326:	492f      	ldr	r1, [pc, #188]	@ (80023e4 <HAL_GPIO_Init+0x2bc>)
 8002328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002340:	4b2d      	ldr	r3, [pc, #180]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	492c      	ldr	r1, [pc, #176]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800234e:	4b2a      	ldr	r3, [pc, #168]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	43db      	mvns	r3, r3
 8002356:	4928      	ldr	r1, [pc, #160]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002358:	4013      	ands	r3, r2
 800235a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002368:	4b23      	ldr	r3, [pc, #140]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	4922      	ldr	r1, [pc, #136]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	60cb      	str	r3, [r1, #12]
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002376:	4b20      	ldr	r3, [pc, #128]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	43db      	mvns	r3, r3
 800237e:	491e      	ldr	r1, [pc, #120]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002380:	4013      	ands	r3, r2
 8002382:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002390:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	4918      	ldr	r1, [pc, #96]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
 800239c:	e006      	b.n	80023ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800239e:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	4914      	ldr	r1, [pc, #80]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d021      	beq.n	80023fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023b8:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	490e      	ldr	r1, [pc, #56]	@ (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]
 80023c4:	e021      	b.n	800240a <HAL_GPIO_Init+0x2e2>
 80023c6:	bf00      	nop
 80023c8:	10320000 	.word	0x10320000
 80023cc:	10310000 	.word	0x10310000
 80023d0:	10220000 	.word	0x10220000
 80023d4:	10210000 	.word	0x10210000
 80023d8:	10120000 	.word	0x10120000
 80023dc:	10110000 	.word	0x10110000
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40010000 	.word	0x40010000
 80023e8:	40010800 	.word	0x40010800
 80023ec:	40010c00 	.word	0x40010c00
 80023f0:	40011000 	.word	0x40011000
 80023f4:	40011400 	.word	0x40011400
 80023f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023fc:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <HAL_GPIO_Init+0x304>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	43db      	mvns	r3, r3
 8002404:	4909      	ldr	r1, [pc, #36]	@ (800242c <HAL_GPIO_Init+0x304>)
 8002406:	4013      	ands	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	3301      	adds	r3, #1
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	f47f ae8e 	bne.w	800213c <HAL_GPIO_Init+0x14>
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	372c      	adds	r7, #44	@ 0x2c
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	40010400 	.word	0x40010400

08002430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e001      	b.n	8002452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	807b      	strh	r3, [r7, #2]
 800246a:	4613      	mov	r3, r2
 800246c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800246e:	787b      	ldrb	r3, [r7, #1]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002474:	887a      	ldrh	r2, [r7, #2]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800247a:	e003      	b.n	8002484 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	041a      	lsls	r2, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	611a      	str	r2, [r3, #16]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800248e:	b480      	push	{r7}
 8002490:	b085      	sub	sp, #20
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024a0:	887a      	ldrh	r2, [r7, #2]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4013      	ands	r3, r2
 80024a6:	041a      	lsls	r2, r3, #16
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	887b      	ldrh	r3, [r7, #2]
 80024ae:	400b      	ands	r3, r1
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	611a      	str	r2, [r3, #16]
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024ca:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024d6:	4a05      	ldr	r2, [pc, #20]	@ (80024ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fe62 	bl	80011a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40010400 	.word	0x40010400

080024f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e272      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8087 	beq.w	800261e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002510:	4b92      	ldr	r3, [pc, #584]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b04      	cmp	r3, #4
 800251a:	d00c      	beq.n	8002536 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800251c:	4b8f      	ldr	r3, [pc, #572]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b08      	cmp	r3, #8
 8002526:	d112      	bne.n	800254e <HAL_RCC_OscConfig+0x5e>
 8002528:	4b8c      	ldr	r3, [pc, #560]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002534:	d10b      	bne.n	800254e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002536:	4b89      	ldr	r3, [pc, #548]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d06c      	beq.n	800261c <HAL_RCC_OscConfig+0x12c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d168      	bne.n	800261c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e24c      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002556:	d106      	bne.n	8002566 <HAL_RCC_OscConfig+0x76>
 8002558:	4b80      	ldr	r3, [pc, #512]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a7f      	ldr	r2, [pc, #508]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800255e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	e02e      	b.n	80025c4 <HAL_RCC_OscConfig+0xd4>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x98>
 800256e:	4b7b      	ldr	r3, [pc, #492]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a7a      	ldr	r2, [pc, #488]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b78      	ldr	r3, [pc, #480]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a77      	ldr	r2, [pc, #476]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002580:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e01d      	b.n	80025c4 <HAL_RCC_OscConfig+0xd4>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002590:	d10c      	bne.n	80025ac <HAL_RCC_OscConfig+0xbc>
 8002592:	4b72      	ldr	r3, [pc, #456]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a71      	ldr	r2, [pc, #452]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b6f      	ldr	r3, [pc, #444]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a6e      	ldr	r2, [pc, #440]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	e00b      	b.n	80025c4 <HAL_RCC_OscConfig+0xd4>
 80025ac:	4b6b      	ldr	r3, [pc, #428]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a6a      	ldr	r2, [pc, #424]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b68      	ldr	r3, [pc, #416]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a67      	ldr	r2, [pc, #412]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d013      	beq.n	80025f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7ff fc94 	bl	8001ef8 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d4:	f7ff fc90 	bl	8001ef8 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	@ 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e200      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	4b5d      	ldr	r3, [pc, #372]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0xe4>
 80025f2:	e014      	b.n	800261e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7ff fc80 	bl	8001ef8 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7ff fc7c 	bl	8001ef8 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	@ 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e1ec      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260e:	4b53      	ldr	r3, [pc, #332]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x10c>
 800261a:	e000      	b.n	800261e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d063      	beq.n	80026f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800262a:	4b4c      	ldr	r3, [pc, #304]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00b      	beq.n	800264e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002636:	4b49      	ldr	r3, [pc, #292]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b08      	cmp	r3, #8
 8002640:	d11c      	bne.n	800267c <HAL_RCC_OscConfig+0x18c>
 8002642:	4b46      	ldr	r3, [pc, #280]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d116      	bne.n	800267c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264e:	4b43      	ldr	r3, [pc, #268]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_RCC_OscConfig+0x176>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d001      	beq.n	8002666 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e1c0      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002666:	4b3d      	ldr	r3, [pc, #244]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4939      	ldr	r1, [pc, #228]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267a:	e03a      	b.n	80026f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d020      	beq.n	80026c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002684:	4b36      	ldr	r3, [pc, #216]	@ (8002760 <HAL_RCC_OscConfig+0x270>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7ff fc35 	bl	8001ef8 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002692:	f7ff fc31 	bl	8001ef8 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e1a1      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a4:	4b2d      	ldr	r3, [pc, #180]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b0:	4b2a      	ldr	r3, [pc, #168]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4927      	ldr	r1, [pc, #156]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]
 80026c4:	e015      	b.n	80026f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c6:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <HAL_RCC_OscConfig+0x270>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7ff fc14 	bl	8001ef8 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d4:	f7ff fc10 	bl	8001ef8 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e180      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e6:	4b1d      	ldr	r3, [pc, #116]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d03a      	beq.n	8002774 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d019      	beq.n	800273a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002706:	4b17      	ldr	r3, [pc, #92]	@ (8002764 <HAL_RCC_OscConfig+0x274>)
 8002708:	2201      	movs	r2, #1
 800270a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270c:	f7ff fbf4 	bl	8001ef8 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002714:	f7ff fbf0 	bl	8001ef8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e160      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002726:	4b0d      	ldr	r3, [pc, #52]	@ (800275c <HAL_RCC_OscConfig+0x26c>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002732:	2001      	movs	r0, #1
 8002734:	f000 face 	bl	8002cd4 <RCC_Delay>
 8002738:	e01c      	b.n	8002774 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273a:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <HAL_RCC_OscConfig+0x274>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002740:	f7ff fbda 	bl	8001ef8 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002746:	e00f      	b.n	8002768 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002748:	f7ff fbd6 	bl	8001ef8 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d908      	bls.n	8002768 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e146      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000
 8002760:	42420000 	.word	0x42420000
 8002764:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002768:	4b92      	ldr	r3, [pc, #584]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e9      	bne.n	8002748 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80a6 	beq.w	80028ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002786:	4b8b      	ldr	r3, [pc, #556]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10d      	bne.n	80027ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4b88      	ldr	r3, [pc, #544]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a87      	ldr	r2, [pc, #540]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279c:	61d3      	str	r3, [r2, #28]
 800279e:	4b85      	ldr	r3, [pc, #532]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ae:	4b82      	ldr	r3, [pc, #520]	@ (80029b8 <HAL_RCC_OscConfig+0x4c8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d118      	bne.n	80027ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ba:	4b7f      	ldr	r3, [pc, #508]	@ (80029b8 <HAL_RCC_OscConfig+0x4c8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a7e      	ldr	r2, [pc, #504]	@ (80029b8 <HAL_RCC_OscConfig+0x4c8>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c6:	f7ff fb97 	bl	8001ef8 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7ff fb93 	bl	8001ef8 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b64      	cmp	r3, #100	@ 0x64
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e103      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e0:	4b75      	ldr	r3, [pc, #468]	@ (80029b8 <HAL_RCC_OscConfig+0x4c8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_OscConfig+0x312>
 80027f4:	4b6f      	ldr	r3, [pc, #444]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4a6e      	ldr	r2, [pc, #440]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6213      	str	r3, [r2, #32]
 8002800:	e02d      	b.n	800285e <HAL_RCC_OscConfig+0x36e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x334>
 800280a:	4b6a      	ldr	r3, [pc, #424]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4a69      	ldr	r2, [pc, #420]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	6213      	str	r3, [r2, #32]
 8002816:	4b67      	ldr	r3, [pc, #412]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4a66      	ldr	r2, [pc, #408]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	f023 0304 	bic.w	r3, r3, #4
 8002820:	6213      	str	r3, [r2, #32]
 8002822:	e01c      	b.n	800285e <HAL_RCC_OscConfig+0x36e>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d10c      	bne.n	8002846 <HAL_RCC_OscConfig+0x356>
 800282c:	4b61      	ldr	r3, [pc, #388]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4a60      	ldr	r2, [pc, #384]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	f043 0304 	orr.w	r3, r3, #4
 8002836:	6213      	str	r3, [r2, #32]
 8002838:	4b5e      	ldr	r3, [pc, #376]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	4a5d      	ldr	r2, [pc, #372]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6213      	str	r3, [r2, #32]
 8002844:	e00b      	b.n	800285e <HAL_RCC_OscConfig+0x36e>
 8002846:	4b5b      	ldr	r3, [pc, #364]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	4a5a      	ldr	r2, [pc, #360]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	6213      	str	r3, [r2, #32]
 8002852:	4b58      	ldr	r3, [pc, #352]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4a57      	ldr	r2, [pc, #348]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	f023 0304 	bic.w	r3, r3, #4
 800285c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d015      	beq.n	8002892 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002866:	f7ff fb47 	bl	8001ef8 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7ff fb43 	bl	8001ef8 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e0b1      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	4b4b      	ldr	r3, [pc, #300]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ee      	beq.n	800286e <HAL_RCC_OscConfig+0x37e>
 8002890:	e014      	b.n	80028bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7ff fb31 	bl	8001ef8 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7ff fb2d 	bl	8001ef8 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e09b      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b0:	4b40      	ldr	r3, [pc, #256]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1ee      	bne.n	800289a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d105      	bne.n	80028ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c2:	4b3c      	ldr	r3, [pc, #240]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	4a3b      	ldr	r2, [pc, #236]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8087 	beq.w	80029e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d8:	4b36      	ldr	r3, [pc, #216]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 030c 	and.w	r3, r3, #12
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d061      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d146      	bne.n	800297a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ec:	4b33      	ldr	r3, [pc, #204]	@ (80029bc <HAL_RCC_OscConfig+0x4cc>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f2:	f7ff fb01 	bl	8001ef8 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fa:	f7ff fafd 	bl	8001ef8 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e06d      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290c:	4b29      	ldr	r3, [pc, #164]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002920:	d108      	bne.n	8002934 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002922:	4b24      	ldr	r3, [pc, #144]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	4921      	ldr	r1, [pc, #132]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002934:	4b1f      	ldr	r3, [pc, #124]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a19      	ldr	r1, [r3, #32]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	430b      	orrs	r3, r1
 8002946:	491b      	ldr	r1, [pc, #108]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800294c:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <HAL_RCC_OscConfig+0x4cc>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002952:	f7ff fad1 	bl	8001ef8 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295a:	f7ff facd 	bl	8001ef8 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e03d      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800296c:	4b11      	ldr	r3, [pc, #68]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x46a>
 8002978:	e035      	b.n	80029e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b10      	ldr	r3, [pc, #64]	@ (80029bc <HAL_RCC_OscConfig+0x4cc>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7ff faba 	bl	8001ef8 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002988:	f7ff fab6 	bl	8001ef8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e026      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x498>
 80029a6:	e01e      	b.n	80029e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e019      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40007000 	.word	0x40007000
 80029bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029c0:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <HAL_RCC_OscConfig+0x500>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000

080029f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0d0      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a08:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d910      	bls.n	8002a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b67      	ldr	r3, [pc, #412]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 0207 	bic.w	r2, r3, #7
 8002a1e:	4965      	ldr	r1, [pc, #404]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b63      	ldr	r3, [pc, #396]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0b8      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a50:	4b59      	ldr	r3, [pc, #356]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a58      	ldr	r2, [pc, #352]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a68:	4b53      	ldr	r3, [pc, #332]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a52      	ldr	r2, [pc, #328]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a74:	4b50      	ldr	r3, [pc, #320]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	494d      	ldr	r1, [pc, #308]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d040      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d107      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	4b47      	ldr	r3, [pc, #284]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d115      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e07f      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab2:	4b41      	ldr	r3, [pc, #260]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e073      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e06b      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad2:	4b39      	ldr	r3, [pc, #228]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f023 0203 	bic.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4936      	ldr	r1, [pc, #216]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae4:	f7ff fa08 	bl	8001ef8 <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aec:	f7ff fa04 	bl	8001ef8 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e053      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 020c 	and.w	r2, r3, #12
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d1eb      	bne.n	8002aec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b14:	4b27      	ldr	r3, [pc, #156]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d210      	bcs.n	8002b44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 0207 	bic.w	r2, r3, #7
 8002b2a:	4922      	ldr	r1, [pc, #136]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b20      	ldr	r3, [pc, #128]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e032      	b.n	8002baa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b50:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4916      	ldr	r1, [pc, #88]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b6e:	4b12      	ldr	r3, [pc, #72]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	490e      	ldr	r1, [pc, #56]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b82:	f000 f821 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8002b86:	4602      	mov	r2, r0
 8002b88:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	490a      	ldr	r1, [pc, #40]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b94:	5ccb      	ldrb	r3, [r1, r3]
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	4a09      	ldr	r2, [pc, #36]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1cc>)
 8002b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b9e:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff f966 	bl	8001e74 <HAL_InitTick>

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	0800672c 	.word	0x0800672c
 8002bc0:	20000030 	.word	0x20000030
 8002bc4:	20000034 	.word	0x20000034

08002bc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002be2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d002      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x30>
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x36>
 8002bf6:	e027      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf8:	4b19      	ldr	r3, [pc, #100]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bfa:	613b      	str	r3, [r7, #16]
      break;
 8002bfc:	e027      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	0c9b      	lsrs	r3, r3, #18
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	4a17      	ldr	r2, [pc, #92]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c08:	5cd3      	ldrb	r3, [r2, r3]
 8002c0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d010      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c16:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	0c5b      	lsrs	r3, r3, #17
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	4a11      	ldr	r2, [pc, #68]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c22:	5cd3      	ldrb	r3, [r2, r3]
 8002c24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c2a:	fb03 f202 	mul.w	r2, r3, r2
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	e004      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c3c:	fb02 f303 	mul.w	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	613b      	str	r3, [r7, #16]
      break;
 8002c46:	e002      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c4a:	613b      	str	r3, [r7, #16]
      break;
 8002c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4e:	693b      	ldr	r3, [r7, #16]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	007a1200 	.word	0x007a1200
 8002c64:	08006744 	.word	0x08006744
 8002c68:	08006754 	.word	0x08006754
 8002c6c:	003d0900 	.word	0x003d0900

08002c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c74:	4b02      	ldr	r3, [pc, #8]	@ (8002c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	20000030 	.word	0x20000030

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c88:	f7ff fff2 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4903      	ldr	r1, [pc, #12]	@ (8002ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	0800673c 	.word	0x0800673c

08002cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cb0:	f7ff ffde 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	0adb      	lsrs	r3, r3, #11
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4903      	ldr	r1, [pc, #12]	@ (8002cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	0800673c 	.word	0x0800673c

08002cd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <RCC_Delay+0x34>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8002d0c <RCC_Delay+0x38>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0a5b      	lsrs	r3, r3, #9
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cf0:	bf00      	nop
  }
  while (Delay --);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1e5a      	subs	r2, r3, #1
 8002cf6:	60fa      	str	r2, [r7, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f9      	bne.n	8002cf0 <RCC_Delay+0x1c>
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr
 8002d08:	20000030 	.word	0x20000030
 8002d0c:	10624dd3 	.word	0x10624dd3

08002d10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e041      	b.n	8002da6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe feba 	bl	8001ab0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f000 f992 	bl	8003078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d109      	bne.n	8002dd4 <HAL_TIM_PWM_Start+0x24>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	bf14      	ite	ne
 8002dcc:	2301      	movne	r3, #1
 8002dce:	2300      	moveq	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e022      	b.n	8002e1a <HAL_TIM_PWM_Start+0x6a>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d109      	bne.n	8002dee <HAL_TIM_PWM_Start+0x3e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	bf14      	ite	ne
 8002de6:	2301      	movne	r3, #1
 8002de8:	2300      	moveq	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	e015      	b.n	8002e1a <HAL_TIM_PWM_Start+0x6a>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d109      	bne.n	8002e08 <HAL_TIM_PWM_Start+0x58>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	bf14      	ite	ne
 8002e00:	2301      	movne	r3, #1
 8002e02:	2300      	moveq	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	e008      	b.n	8002e1a <HAL_TIM_PWM_Start+0x6a>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e05e      	b.n	8002ee0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_PWM_Start+0x82>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e30:	e013      	b.n	8002e5a <HAL_TIM_PWM_Start+0xaa>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_PWM_Start+0x92>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e40:	e00b      	b.n	8002e5a <HAL_TIM_PWM_Start+0xaa>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d104      	bne.n	8002e52 <HAL_TIM_PWM_Start+0xa2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e50:	e003      	b.n	8002e5a <HAL_TIM_PWM_Start+0xaa>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	6839      	ldr	r1, [r7, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fafe 	bl	8003464 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee8 <HAL_TIM_PWM_Start+0x138>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d107      	bne.n	8002e82 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a18      	ldr	r2, [pc, #96]	@ (8002ee8 <HAL_TIM_PWM_Start+0x138>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00e      	beq.n	8002eaa <HAL_TIM_PWM_Start+0xfa>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e94:	d009      	beq.n	8002eaa <HAL_TIM_PWM_Start+0xfa>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a14      	ldr	r2, [pc, #80]	@ (8002eec <HAL_TIM_PWM_Start+0x13c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d004      	beq.n	8002eaa <HAL_TIM_PWM_Start+0xfa>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a12      	ldr	r2, [pc, #72]	@ (8002ef0 <HAL_TIM_PWM_Start+0x140>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d111      	bne.n	8002ece <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b06      	cmp	r3, #6
 8002eba:	d010      	beq.n	8002ede <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ecc:	e007      	b.n	8002ede <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0201 	orr.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40012c00 	.word	0x40012c00
 8002eec:	40000400 	.word	0x40000400
 8002ef0:	40000800 	.word	0x40000800

08002ef4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e0ae      	b.n	8003070 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	f200 809f 	bhi.w	8003060 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f22:	a201      	add	r2, pc, #4	@ (adr r2, 8002f28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f28:	08002f5d 	.word	0x08002f5d
 8002f2c:	08003061 	.word	0x08003061
 8002f30:	08003061 	.word	0x08003061
 8002f34:	08003061 	.word	0x08003061
 8002f38:	08002f9d 	.word	0x08002f9d
 8002f3c:	08003061 	.word	0x08003061
 8002f40:	08003061 	.word	0x08003061
 8002f44:	08003061 	.word	0x08003061
 8002f48:	08002fdf 	.word	0x08002fdf
 8002f4c:	08003061 	.word	0x08003061
 8002f50:	08003061 	.word	0x08003061
 8002f54:	08003061 	.word	0x08003061
 8002f58:	0800301f 	.word	0x0800301f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f8f6 	bl	8003154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0208 	orr.w	r2, r2, #8
 8002f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0204 	bic.w	r2, r2, #4
 8002f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6999      	ldr	r1, [r3, #24]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	619a      	str	r2, [r3, #24]
      break;
 8002f9a:	e064      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f93c 	bl	8003220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6999      	ldr	r1, [r3, #24]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	021a      	lsls	r2, r3, #8
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	619a      	str	r2, [r3, #24]
      break;
 8002fdc:	e043      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 f985 	bl	80032f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0208 	orr.w	r2, r2, #8
 8002ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0204 	bic.w	r2, r2, #4
 8003008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69d9      	ldr	r1, [r3, #28]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	61da      	str	r2, [r3, #28]
      break;
 800301c:	e023      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	4618      	mov	r0, r3
 8003026:	f000 f9cf 	bl	80033c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69d9      	ldr	r1, [r3, #28]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	021a      	lsls	r2, r3, #8
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	61da      	str	r2, [r3, #28]
      break;
 800305e:	e002      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	75fb      	strb	r3, [r7, #23]
      break;
 8003064:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800306e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a2f      	ldr	r2, [pc, #188]	@ (8003148 <TIM_Base_SetConfig+0xd0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00b      	beq.n	80030a8 <TIM_Base_SetConfig+0x30>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003096:	d007      	beq.n	80030a8 <TIM_Base_SetConfig+0x30>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a2c      	ldr	r2, [pc, #176]	@ (800314c <TIM_Base_SetConfig+0xd4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d003      	beq.n	80030a8 <TIM_Base_SetConfig+0x30>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003150 <TIM_Base_SetConfig+0xd8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d108      	bne.n	80030ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a22      	ldr	r2, [pc, #136]	@ (8003148 <TIM_Base_SetConfig+0xd0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00b      	beq.n	80030da <TIM_Base_SetConfig+0x62>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030c8:	d007      	beq.n	80030da <TIM_Base_SetConfig+0x62>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a1f      	ldr	r2, [pc, #124]	@ (800314c <TIM_Base_SetConfig+0xd4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d003      	beq.n	80030da <TIM_Base_SetConfig+0x62>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003150 <TIM_Base_SetConfig+0xd8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d108      	bne.n	80030ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a0d      	ldr	r2, [pc, #52]	@ (8003148 <TIM_Base_SetConfig+0xd0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d103      	bne.n	8003120 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f023 0201 	bic.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	611a      	str	r2, [r3, #16]
  }
}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800

08003154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f023 0201 	bic.w	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f023 0302 	bic.w	r3, r3, #2
 800319c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a1c      	ldr	r2, [pc, #112]	@ (800321c <TIM_OC1_SetConfig+0xc8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d10c      	bne.n	80031ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f023 0308 	bic.w	r3, r3, #8
 80031b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f023 0304 	bic.w	r3, r3, #4
 80031c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a13      	ldr	r2, [pc, #76]	@ (800321c <TIM_OC1_SetConfig+0xc8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d111      	bne.n	80031f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	621a      	str	r2, [r3, #32]
}
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40012c00 	.word	0x40012c00

08003220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f023 0210 	bic.w	r2, r3, #16
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800324e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f023 0320 	bic.w	r3, r3, #32
 800326a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a1d      	ldr	r2, [pc, #116]	@ (80032f0 <TIM_OC2_SetConfig+0xd0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d10d      	bne.n	800329c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800329a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a14      	ldr	r2, [pc, #80]	@ (80032f0 <TIM_OC2_SetConfig+0xd0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d113      	bne.n	80032cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	621a      	str	r2, [r3, #32]
}
 80032e6:	bf00      	nop
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	40012c00 	.word	0x40012c00

080032f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0303 	bic.w	r3, r3, #3
 800332a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800333c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1d      	ldr	r2, [pc, #116]	@ (80033c4 <TIM_OC3_SetConfig+0xd0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d10d      	bne.n	800336e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800336c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a14      	ldr	r2, [pc, #80]	@ (80033c4 <TIM_OC3_SetConfig+0xd0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d113      	bne.n	800339e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800337c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003384:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	621a      	str	r2, [r3, #32]
}
 80033b8:	bf00      	nop
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40012c00 	.word	0x40012c00

080033c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	031b      	lsls	r3, r3, #12
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a0f      	ldr	r2, [pc, #60]	@ (8003460 <TIM_OC4_SetConfig+0x98>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d109      	bne.n	800343c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800342e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	019b      	lsls	r3, r3, #6
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	40012c00 	.word	0x40012c00

08003464 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 031f 	and.w	r3, r3, #31
 8003476:	2201      	movs	r2, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a1a      	ldr	r2, [r3, #32]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	43db      	mvns	r3, r3
 8003486:	401a      	ands	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a1a      	ldr	r2, [r3, #32]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	fa01 f303 	lsl.w	r3, r1, r3
 800349c:	431a      	orrs	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	621a      	str	r2, [r3, #32]
}
 80034a2:	bf00      	nop
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e046      	b.n	8003552 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a16      	ldr	r2, [pc, #88]	@ (800355c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00e      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003510:	d009      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a12      	ldr	r2, [pc, #72]	@ (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a10      	ldr	r2, [pc, #64]	@ (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d10c      	bne.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800352c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	4313      	orrs	r3, r2
 8003536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800

08003568 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003580:	2302      	movs	r3, #2
 8003582:	e03d      	b.n	8003600 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e042      	b.n	80036a2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d106      	bne.n	8003636 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7fe fa8f 	bl	8001b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2224      	movs	r2, #36	@ 0x24
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800364c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f972 	bl	8003938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003662:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003672:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003682:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b08a      	sub	sp, #40	@ 0x28
 80036ae:	af02      	add	r7, sp, #8
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	4613      	mov	r3, r2
 80036b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d175      	bne.n	80037b6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_UART_Transmit+0x2c>
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e06e      	b.n	80037b8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2221      	movs	r2, #33	@ 0x21
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036e8:	f7fe fc06 	bl	8001ef8 <HAL_GetTick>
 80036ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	88fa      	ldrh	r2, [r7, #6]
 80036f2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	88fa      	ldrh	r2, [r7, #6]
 80036f8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003702:	d108      	bne.n	8003716 <HAL_UART_Transmit+0x6c>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d104      	bne.n	8003716 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	e003      	b.n	800371e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800371e:	e02e      	b.n	800377e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2200      	movs	r2, #0
 8003728:	2180      	movs	r1, #128	@ 0x80
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f848 	bl	80037c0 <UART_WaitOnFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e03a      	b.n	80037b8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10b      	bne.n	8003760 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003756:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	3302      	adds	r3, #2
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	e007      	b.n	8003770 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	781a      	ldrb	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3301      	adds	r3, #1
 800376e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1cb      	bne.n	8003720 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2200      	movs	r2, #0
 8003790:	2140      	movs	r1, #64	@ 0x40
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f814 	bl	80037c0 <UART_WaitOnFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e006      	b.n	80037b8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
  }
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d0:	e03b      	b.n	800384a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d037      	beq.n	800384a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037da:	f7fe fb8d 	bl	8001ef8 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	6a3a      	ldr	r2, [r7, #32]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d302      	bcc.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e03a      	b.n	800386a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d023      	beq.n	800384a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b80      	cmp	r3, #128	@ 0x80
 8003806:	d020      	beq.n	800384a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b40      	cmp	r3, #64	@ 0x40
 800380c:	d01d      	beq.n	800384a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b08      	cmp	r3, #8
 800381a:	d116      	bne.n	800384a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f81d 	bl	8003872 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2208      	movs	r2, #8
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e00f      	b.n	800386a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4013      	ands	r3, r2
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	429a      	cmp	r2, r3
 8003858:	bf0c      	ite	eq
 800385a:	2301      	moveq	r3, #1
 800385c:	2300      	movne	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	429a      	cmp	r2, r3
 8003866:	d0b4      	beq.n	80037d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003872:	b480      	push	{r7}
 8003874:	b095      	sub	sp, #84	@ 0x54
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	330c      	adds	r3, #12
 8003880:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800388a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003890:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800389a:	643a      	str	r2, [r7, #64]	@ 0x40
 800389c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e5      	bne.n	800387a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3314      	adds	r3, #20
 80038b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f023 0301 	bic.w	r3, r3, #1
 80038c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3314      	adds	r3, #20
 80038cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e5      	bne.n	80038ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d119      	bne.n	800391e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	330c      	adds	r3, #12
 80038f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	e853 3f00 	ldrex	r3, [r3]
 80038f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f023 0310 	bic.w	r3, r3, #16
 8003900:	647b      	str	r3, [r7, #68]	@ 0x44
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	330c      	adds	r3, #12
 8003908:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800390a:	61ba      	str	r2, [r7, #24]
 800390c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390e:	6979      	ldr	r1, [r7, #20]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	e841 2300 	strex	r3, r2, [r1]
 8003916:	613b      	str	r3, [r7, #16]
   return(result);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1e5      	bne.n	80038ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800392c:	bf00      	nop
 800392e:	3754      	adds	r7, #84	@ 0x54
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr
	...

08003938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003972:	f023 030c 	bic.w	r3, r3, #12
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	430b      	orrs	r3, r1
 800397e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2c      	ldr	r2, [pc, #176]	@ (8003a4c <UART_SetConfig+0x114>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d103      	bne.n	80039a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039a0:	f7ff f984 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	e002      	b.n	80039ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039a8:	f7ff f96c 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 80039ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	009a      	lsls	r2, r3, #2
 80039b8:	441a      	add	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	4a22      	ldr	r2, [pc, #136]	@ (8003a50 <UART_SetConfig+0x118>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	0119      	lsls	r1, r3, #4
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	009a      	lsls	r2, r3, #2
 80039d8:	441a      	add	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a50 <UART_SetConfig+0x118>)
 80039e6:	fba3 0302 	umull	r0, r3, r3, r2
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	2064      	movs	r0, #100	@ 0x64
 80039ee:	fb00 f303 	mul.w	r3, r0, r3
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	3332      	adds	r3, #50	@ 0x32
 80039f8:	4a15      	ldr	r2, [pc, #84]	@ (8003a50 <UART_SetConfig+0x118>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a04:	4419      	add	r1, r3
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009a      	lsls	r2, r3, #2
 8003a10:	441a      	add	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a50 <UART_SetConfig+0x118>)
 8003a1e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	2064      	movs	r0, #100	@ 0x64
 8003a26:	fb00 f303 	mul.w	r3, r0, r3
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	3332      	adds	r3, #50	@ 0x32
 8003a30:	4a07      	ldr	r2, [pc, #28]	@ (8003a50 <UART_SetConfig+0x118>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	f003 020f 	and.w	r2, r3, #15
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	440a      	add	r2, r1
 8003a42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40013800 	.word	0x40013800
 8003a50:	51eb851f 	.word	0x51eb851f

08003a54 <__cvt>:
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a5a:	461d      	mov	r5, r3
 8003a5c:	bfbb      	ittet	lt
 8003a5e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003a62:	461d      	movlt	r5, r3
 8003a64:	2300      	movge	r3, #0
 8003a66:	232d      	movlt	r3, #45	@ 0x2d
 8003a68:	b088      	sub	sp, #32
 8003a6a:	4614      	mov	r4, r2
 8003a6c:	bfb8      	it	lt
 8003a6e:	4614      	movlt	r4, r2
 8003a70:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003a72:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003a74:	7013      	strb	r3, [r2, #0]
 8003a76:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003a78:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003a7c:	f023 0820 	bic.w	r8, r3, #32
 8003a80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003a84:	d005      	beq.n	8003a92 <__cvt+0x3e>
 8003a86:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003a8a:	d100      	bne.n	8003a8e <__cvt+0x3a>
 8003a8c:	3601      	adds	r6, #1
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e000      	b.n	8003a94 <__cvt+0x40>
 8003a92:	2303      	movs	r3, #3
 8003a94:	aa07      	add	r2, sp, #28
 8003a96:	9204      	str	r2, [sp, #16]
 8003a98:	aa06      	add	r2, sp, #24
 8003a9a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003a9e:	e9cd 3600 	strd	r3, r6, [sp]
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	462b      	mov	r3, r5
 8003aa6:	f000 fe6f 	bl	8004788 <_dtoa_r>
 8003aaa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003aae:	4607      	mov	r7, r0
 8003ab0:	d119      	bne.n	8003ae6 <__cvt+0x92>
 8003ab2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003ab4:	07db      	lsls	r3, r3, #31
 8003ab6:	d50e      	bpl.n	8003ad6 <__cvt+0x82>
 8003ab8:	eb00 0906 	add.w	r9, r0, r6
 8003abc:	2200      	movs	r2, #0
 8003abe:	2300      	movs	r3, #0
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	f7fc ff70 	bl	80009a8 <__aeabi_dcmpeq>
 8003ac8:	b108      	cbz	r0, 8003ace <__cvt+0x7a>
 8003aca:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ace:	2230      	movs	r2, #48	@ 0x30
 8003ad0:	9b07      	ldr	r3, [sp, #28]
 8003ad2:	454b      	cmp	r3, r9
 8003ad4:	d31e      	bcc.n	8003b14 <__cvt+0xc0>
 8003ad6:	4638      	mov	r0, r7
 8003ad8:	9b07      	ldr	r3, [sp, #28]
 8003ada:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003adc:	1bdb      	subs	r3, r3, r7
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	b008      	add	sp, #32
 8003ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003aea:	eb00 0906 	add.w	r9, r0, r6
 8003aee:	d1e5      	bne.n	8003abc <__cvt+0x68>
 8003af0:	7803      	ldrb	r3, [r0, #0]
 8003af2:	2b30      	cmp	r3, #48	@ 0x30
 8003af4:	d10a      	bne.n	8003b0c <__cvt+0xb8>
 8003af6:	2200      	movs	r2, #0
 8003af8:	2300      	movs	r3, #0
 8003afa:	4620      	mov	r0, r4
 8003afc:	4629      	mov	r1, r5
 8003afe:	f7fc ff53 	bl	80009a8 <__aeabi_dcmpeq>
 8003b02:	b918      	cbnz	r0, 8003b0c <__cvt+0xb8>
 8003b04:	f1c6 0601 	rsb	r6, r6, #1
 8003b08:	f8ca 6000 	str.w	r6, [sl]
 8003b0c:	f8da 3000 	ldr.w	r3, [sl]
 8003b10:	4499      	add	r9, r3
 8003b12:	e7d3      	b.n	8003abc <__cvt+0x68>
 8003b14:	1c59      	adds	r1, r3, #1
 8003b16:	9107      	str	r1, [sp, #28]
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e7d9      	b.n	8003ad0 <__cvt+0x7c>

08003b1c <__exponent>:
 8003b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b1e:	2900      	cmp	r1, #0
 8003b20:	bfb6      	itet	lt
 8003b22:	232d      	movlt	r3, #45	@ 0x2d
 8003b24:	232b      	movge	r3, #43	@ 0x2b
 8003b26:	4249      	neglt	r1, r1
 8003b28:	2909      	cmp	r1, #9
 8003b2a:	7002      	strb	r2, [r0, #0]
 8003b2c:	7043      	strb	r3, [r0, #1]
 8003b2e:	dd29      	ble.n	8003b84 <__exponent+0x68>
 8003b30:	f10d 0307 	add.w	r3, sp, #7
 8003b34:	461d      	mov	r5, r3
 8003b36:	270a      	movs	r7, #10
 8003b38:	fbb1 f6f7 	udiv	r6, r1, r7
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	fb07 1416 	mls	r4, r7, r6, r1
 8003b42:	3430      	adds	r4, #48	@ 0x30
 8003b44:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003b48:	460c      	mov	r4, r1
 8003b4a:	2c63      	cmp	r4, #99	@ 0x63
 8003b4c:	4631      	mov	r1, r6
 8003b4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b52:	dcf1      	bgt.n	8003b38 <__exponent+0x1c>
 8003b54:	3130      	adds	r1, #48	@ 0x30
 8003b56:	1e94      	subs	r4, r2, #2
 8003b58:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003b5c:	4623      	mov	r3, r4
 8003b5e:	1c41      	adds	r1, r0, #1
 8003b60:	42ab      	cmp	r3, r5
 8003b62:	d30a      	bcc.n	8003b7a <__exponent+0x5e>
 8003b64:	f10d 0309 	add.w	r3, sp, #9
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	42ac      	cmp	r4, r5
 8003b6c:	bf88      	it	hi
 8003b6e:	2300      	movhi	r3, #0
 8003b70:	3302      	adds	r3, #2
 8003b72:	4403      	add	r3, r0
 8003b74:	1a18      	subs	r0, r3, r0
 8003b76:	b003      	add	sp, #12
 8003b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b7a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003b7e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003b82:	e7ed      	b.n	8003b60 <__exponent+0x44>
 8003b84:	2330      	movs	r3, #48	@ 0x30
 8003b86:	3130      	adds	r1, #48	@ 0x30
 8003b88:	7083      	strb	r3, [r0, #2]
 8003b8a:	70c1      	strb	r1, [r0, #3]
 8003b8c:	1d03      	adds	r3, r0, #4
 8003b8e:	e7f1      	b.n	8003b74 <__exponent+0x58>

08003b90 <_printf_float>:
 8003b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b94:	b091      	sub	sp, #68	@ 0x44
 8003b96:	460c      	mov	r4, r1
 8003b98:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003b9c:	4616      	mov	r6, r2
 8003b9e:	461f      	mov	r7, r3
 8003ba0:	4605      	mov	r5, r0
 8003ba2:	f000 fce1 	bl	8004568 <_localeconv_r>
 8003ba6:	6803      	ldr	r3, [r0, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	9308      	str	r3, [sp, #32]
 8003bac:	f7fc fad0 	bl	8000150 <strlen>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	930e      	str	r3, [sp, #56]	@ 0x38
 8003bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8003bb8:	9009      	str	r0, [sp, #36]	@ 0x24
 8003bba:	3307      	adds	r3, #7
 8003bbc:	f023 0307 	bic.w	r3, r3, #7
 8003bc0:	f103 0208 	add.w	r2, r3, #8
 8003bc4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003bc8:	f8d4 b000 	ldr.w	fp, [r4]
 8003bcc:	f8c8 2000 	str.w	r2, [r8]
 8003bd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003bd4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003bda:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003bde:	f04f 32ff 	mov.w	r2, #4294967295
 8003be2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003be6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003bea:	4b9c      	ldr	r3, [pc, #624]	@ (8003e5c <_printf_float+0x2cc>)
 8003bec:	f7fc ff0e 	bl	8000a0c <__aeabi_dcmpun>
 8003bf0:	bb70      	cbnz	r0, 8003c50 <_printf_float+0xc0>
 8003bf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfa:	4b98      	ldr	r3, [pc, #608]	@ (8003e5c <_printf_float+0x2cc>)
 8003bfc:	f7fc fee8 	bl	80009d0 <__aeabi_dcmple>
 8003c00:	bb30      	cbnz	r0, 8003c50 <_printf_float+0xc0>
 8003c02:	2200      	movs	r2, #0
 8003c04:	2300      	movs	r3, #0
 8003c06:	4640      	mov	r0, r8
 8003c08:	4649      	mov	r1, r9
 8003c0a:	f7fc fed7 	bl	80009bc <__aeabi_dcmplt>
 8003c0e:	b110      	cbz	r0, 8003c16 <_printf_float+0x86>
 8003c10:	232d      	movs	r3, #45	@ 0x2d
 8003c12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c16:	4a92      	ldr	r2, [pc, #584]	@ (8003e60 <_printf_float+0x2d0>)
 8003c18:	4b92      	ldr	r3, [pc, #584]	@ (8003e64 <_printf_float+0x2d4>)
 8003c1a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003c1e:	bf8c      	ite	hi
 8003c20:	4690      	movhi	r8, r2
 8003c22:	4698      	movls	r8, r3
 8003c24:	2303      	movs	r3, #3
 8003c26:	f04f 0900 	mov.w	r9, #0
 8003c2a:	6123      	str	r3, [r4, #16]
 8003c2c:	f02b 0304 	bic.w	r3, fp, #4
 8003c30:	6023      	str	r3, [r4, #0]
 8003c32:	4633      	mov	r3, r6
 8003c34:	4621      	mov	r1, r4
 8003c36:	4628      	mov	r0, r5
 8003c38:	9700      	str	r7, [sp, #0]
 8003c3a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003c3c:	f000 f9d4 	bl	8003fe8 <_printf_common>
 8003c40:	3001      	adds	r0, #1
 8003c42:	f040 8090 	bne.w	8003d66 <_printf_float+0x1d6>
 8003c46:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4a:	b011      	add	sp, #68	@ 0x44
 8003c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c50:	4642      	mov	r2, r8
 8003c52:	464b      	mov	r3, r9
 8003c54:	4640      	mov	r0, r8
 8003c56:	4649      	mov	r1, r9
 8003c58:	f7fc fed8 	bl	8000a0c <__aeabi_dcmpun>
 8003c5c:	b148      	cbz	r0, 8003c72 <_printf_float+0xe2>
 8003c5e:	464b      	mov	r3, r9
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bfb8      	it	lt
 8003c64:	232d      	movlt	r3, #45	@ 0x2d
 8003c66:	4a80      	ldr	r2, [pc, #512]	@ (8003e68 <_printf_float+0x2d8>)
 8003c68:	bfb8      	it	lt
 8003c6a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003c6e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e6c <_printf_float+0x2dc>)
 8003c70:	e7d3      	b.n	8003c1a <_printf_float+0x8a>
 8003c72:	6863      	ldr	r3, [r4, #4]
 8003c74:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	d13f      	bne.n	8003cfc <_printf_float+0x16c>
 8003c7c:	2306      	movs	r3, #6
 8003c7e:	6063      	str	r3, [r4, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003c86:	6023      	str	r3, [r4, #0]
 8003c88:	9206      	str	r2, [sp, #24]
 8003c8a:	aa0e      	add	r2, sp, #56	@ 0x38
 8003c8c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003c90:	aa0d      	add	r2, sp, #52	@ 0x34
 8003c92:	9203      	str	r2, [sp, #12]
 8003c94:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003c98:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003c9c:	6863      	ldr	r3, [r4, #4]
 8003c9e:	4642      	mov	r2, r8
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	464b      	mov	r3, r9
 8003ca6:	910a      	str	r1, [sp, #40]	@ 0x28
 8003ca8:	f7ff fed4 	bl	8003a54 <__cvt>
 8003cac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003cae:	4680      	mov	r8, r0
 8003cb0:	2947      	cmp	r1, #71	@ 0x47
 8003cb2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003cb4:	d128      	bne.n	8003d08 <_printf_float+0x178>
 8003cb6:	1cc8      	adds	r0, r1, #3
 8003cb8:	db02      	blt.n	8003cc0 <_printf_float+0x130>
 8003cba:	6863      	ldr	r3, [r4, #4]
 8003cbc:	4299      	cmp	r1, r3
 8003cbe:	dd40      	ble.n	8003d42 <_printf_float+0x1b2>
 8003cc0:	f1aa 0a02 	sub.w	sl, sl, #2
 8003cc4:	fa5f fa8a 	uxtb.w	sl, sl
 8003cc8:	4652      	mov	r2, sl
 8003cca:	3901      	subs	r1, #1
 8003ccc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003cd0:	910d      	str	r1, [sp, #52]	@ 0x34
 8003cd2:	f7ff ff23 	bl	8003b1c <__exponent>
 8003cd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003cd8:	4681      	mov	r9, r0
 8003cda:	1813      	adds	r3, r2, r0
 8003cdc:	2a01      	cmp	r2, #1
 8003cde:	6123      	str	r3, [r4, #16]
 8003ce0:	dc02      	bgt.n	8003ce8 <_printf_float+0x158>
 8003ce2:	6822      	ldr	r2, [r4, #0]
 8003ce4:	07d2      	lsls	r2, r2, #31
 8003ce6:	d501      	bpl.n	8003cec <_printf_float+0x15c>
 8003ce8:	3301      	adds	r3, #1
 8003cea:	6123      	str	r3, [r4, #16]
 8003cec:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d09e      	beq.n	8003c32 <_printf_float+0xa2>
 8003cf4:	232d      	movs	r3, #45	@ 0x2d
 8003cf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cfa:	e79a      	b.n	8003c32 <_printf_float+0xa2>
 8003cfc:	2947      	cmp	r1, #71	@ 0x47
 8003cfe:	d1bf      	bne.n	8003c80 <_printf_float+0xf0>
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1bd      	bne.n	8003c80 <_printf_float+0xf0>
 8003d04:	2301      	movs	r3, #1
 8003d06:	e7ba      	b.n	8003c7e <_printf_float+0xee>
 8003d08:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d0c:	d9dc      	bls.n	8003cc8 <_printf_float+0x138>
 8003d0e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003d12:	d118      	bne.n	8003d46 <_printf_float+0x1b6>
 8003d14:	2900      	cmp	r1, #0
 8003d16:	6863      	ldr	r3, [r4, #4]
 8003d18:	dd0b      	ble.n	8003d32 <_printf_float+0x1a2>
 8003d1a:	6121      	str	r1, [r4, #16]
 8003d1c:	b913      	cbnz	r3, 8003d24 <_printf_float+0x194>
 8003d1e:	6822      	ldr	r2, [r4, #0]
 8003d20:	07d0      	lsls	r0, r2, #31
 8003d22:	d502      	bpl.n	8003d2a <_printf_float+0x19a>
 8003d24:	3301      	adds	r3, #1
 8003d26:	440b      	add	r3, r1
 8003d28:	6123      	str	r3, [r4, #16]
 8003d2a:	f04f 0900 	mov.w	r9, #0
 8003d2e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003d30:	e7dc      	b.n	8003cec <_printf_float+0x15c>
 8003d32:	b913      	cbnz	r3, 8003d3a <_printf_float+0x1aa>
 8003d34:	6822      	ldr	r2, [r4, #0]
 8003d36:	07d2      	lsls	r2, r2, #31
 8003d38:	d501      	bpl.n	8003d3e <_printf_float+0x1ae>
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	e7f4      	b.n	8003d28 <_printf_float+0x198>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e7f2      	b.n	8003d28 <_printf_float+0x198>
 8003d42:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003d46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003d48:	4299      	cmp	r1, r3
 8003d4a:	db05      	blt.n	8003d58 <_printf_float+0x1c8>
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	6121      	str	r1, [r4, #16]
 8003d50:	07d8      	lsls	r0, r3, #31
 8003d52:	d5ea      	bpl.n	8003d2a <_printf_float+0x19a>
 8003d54:	1c4b      	adds	r3, r1, #1
 8003d56:	e7e7      	b.n	8003d28 <_printf_float+0x198>
 8003d58:	2900      	cmp	r1, #0
 8003d5a:	bfcc      	ite	gt
 8003d5c:	2201      	movgt	r2, #1
 8003d5e:	f1c1 0202 	rsble	r2, r1, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	e7e0      	b.n	8003d28 <_printf_float+0x198>
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	055a      	lsls	r2, r3, #21
 8003d6a:	d407      	bmi.n	8003d7c <_printf_float+0x1ec>
 8003d6c:	6923      	ldr	r3, [r4, #16]
 8003d6e:	4642      	mov	r2, r8
 8003d70:	4631      	mov	r1, r6
 8003d72:	4628      	mov	r0, r5
 8003d74:	47b8      	blx	r7
 8003d76:	3001      	adds	r0, #1
 8003d78:	d12b      	bne.n	8003dd2 <_printf_float+0x242>
 8003d7a:	e764      	b.n	8003c46 <_printf_float+0xb6>
 8003d7c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d80:	f240 80dc 	bls.w	8003f3c <_printf_float+0x3ac>
 8003d84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f7fc fe0c 	bl	80009a8 <__aeabi_dcmpeq>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d033      	beq.n	8003dfc <_printf_float+0x26c>
 8003d94:	2301      	movs	r3, #1
 8003d96:	4631      	mov	r1, r6
 8003d98:	4628      	mov	r0, r5
 8003d9a:	4a35      	ldr	r2, [pc, #212]	@ (8003e70 <_printf_float+0x2e0>)
 8003d9c:	47b8      	blx	r7
 8003d9e:	3001      	adds	r0, #1
 8003da0:	f43f af51 	beq.w	8003c46 <_printf_float+0xb6>
 8003da4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003da8:	4543      	cmp	r3, r8
 8003daa:	db02      	blt.n	8003db2 <_printf_float+0x222>
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	07d8      	lsls	r0, r3, #31
 8003db0:	d50f      	bpl.n	8003dd2 <_printf_float+0x242>
 8003db2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003db6:	4631      	mov	r1, r6
 8003db8:	4628      	mov	r0, r5
 8003dba:	47b8      	blx	r7
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	f43f af42 	beq.w	8003c46 <_printf_float+0xb6>
 8003dc2:	f04f 0900 	mov.w	r9, #0
 8003dc6:	f108 38ff 	add.w	r8, r8, #4294967295
 8003dca:	f104 0a1a 	add.w	sl, r4, #26
 8003dce:	45c8      	cmp	r8, r9
 8003dd0:	dc09      	bgt.n	8003de6 <_printf_float+0x256>
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	079b      	lsls	r3, r3, #30
 8003dd6:	f100 8102 	bmi.w	8003fde <_printf_float+0x44e>
 8003dda:	68e0      	ldr	r0, [r4, #12]
 8003ddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003dde:	4298      	cmp	r0, r3
 8003de0:	bfb8      	it	lt
 8003de2:	4618      	movlt	r0, r3
 8003de4:	e731      	b.n	8003c4a <_printf_float+0xba>
 8003de6:	2301      	movs	r3, #1
 8003de8:	4652      	mov	r2, sl
 8003dea:	4631      	mov	r1, r6
 8003dec:	4628      	mov	r0, r5
 8003dee:	47b8      	blx	r7
 8003df0:	3001      	adds	r0, #1
 8003df2:	f43f af28 	beq.w	8003c46 <_printf_float+0xb6>
 8003df6:	f109 0901 	add.w	r9, r9, #1
 8003dfa:	e7e8      	b.n	8003dce <_printf_float+0x23e>
 8003dfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	dc38      	bgt.n	8003e74 <_printf_float+0x2e4>
 8003e02:	2301      	movs	r3, #1
 8003e04:	4631      	mov	r1, r6
 8003e06:	4628      	mov	r0, r5
 8003e08:	4a19      	ldr	r2, [pc, #100]	@ (8003e70 <_printf_float+0x2e0>)
 8003e0a:	47b8      	blx	r7
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	f43f af1a 	beq.w	8003c46 <_printf_float+0xb6>
 8003e12:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003e16:	ea59 0303 	orrs.w	r3, r9, r3
 8003e1a:	d102      	bne.n	8003e22 <_printf_float+0x292>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	07d9      	lsls	r1, r3, #31
 8003e20:	d5d7      	bpl.n	8003dd2 <_printf_float+0x242>
 8003e22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e26:	4631      	mov	r1, r6
 8003e28:	4628      	mov	r0, r5
 8003e2a:	47b8      	blx	r7
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	f43f af0a 	beq.w	8003c46 <_printf_float+0xb6>
 8003e32:	f04f 0a00 	mov.w	sl, #0
 8003e36:	f104 0b1a 	add.w	fp, r4, #26
 8003e3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e3c:	425b      	negs	r3, r3
 8003e3e:	4553      	cmp	r3, sl
 8003e40:	dc01      	bgt.n	8003e46 <_printf_float+0x2b6>
 8003e42:	464b      	mov	r3, r9
 8003e44:	e793      	b.n	8003d6e <_printf_float+0x1de>
 8003e46:	2301      	movs	r3, #1
 8003e48:	465a      	mov	r2, fp
 8003e4a:	4631      	mov	r1, r6
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	47b8      	blx	r7
 8003e50:	3001      	adds	r0, #1
 8003e52:	f43f aef8 	beq.w	8003c46 <_printf_float+0xb6>
 8003e56:	f10a 0a01 	add.w	sl, sl, #1
 8003e5a:	e7ee      	b.n	8003e3a <_printf_float+0x2aa>
 8003e5c:	7fefffff 	.word	0x7fefffff
 8003e60:	0800675a 	.word	0x0800675a
 8003e64:	08006756 	.word	0x08006756
 8003e68:	08006762 	.word	0x08006762
 8003e6c:	0800675e 	.word	0x0800675e
 8003e70:	08006766 	.word	0x08006766
 8003e74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e76:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003e7a:	4553      	cmp	r3, sl
 8003e7c:	bfa8      	it	ge
 8003e7e:	4653      	movge	r3, sl
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	4699      	mov	r9, r3
 8003e84:	dc36      	bgt.n	8003ef4 <_printf_float+0x364>
 8003e86:	f04f 0b00 	mov.w	fp, #0
 8003e8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e8e:	f104 021a 	add.w	r2, r4, #26
 8003e92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e94:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e96:	eba3 0309 	sub.w	r3, r3, r9
 8003e9a:	455b      	cmp	r3, fp
 8003e9c:	dc31      	bgt.n	8003f02 <_printf_float+0x372>
 8003e9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ea0:	459a      	cmp	sl, r3
 8003ea2:	dc3a      	bgt.n	8003f1a <_printf_float+0x38a>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	07da      	lsls	r2, r3, #31
 8003ea8:	d437      	bmi.n	8003f1a <_printf_float+0x38a>
 8003eaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003eac:	ebaa 0903 	sub.w	r9, sl, r3
 8003eb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003eb2:	ebaa 0303 	sub.w	r3, sl, r3
 8003eb6:	4599      	cmp	r9, r3
 8003eb8:	bfa8      	it	ge
 8003eba:	4699      	movge	r9, r3
 8003ebc:	f1b9 0f00 	cmp.w	r9, #0
 8003ec0:	dc33      	bgt.n	8003f2a <_printf_float+0x39a>
 8003ec2:	f04f 0800 	mov.w	r8, #0
 8003ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003eca:	f104 0b1a 	add.w	fp, r4, #26
 8003ece:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ed0:	ebaa 0303 	sub.w	r3, sl, r3
 8003ed4:	eba3 0309 	sub.w	r3, r3, r9
 8003ed8:	4543      	cmp	r3, r8
 8003eda:	f77f af7a 	ble.w	8003dd2 <_printf_float+0x242>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	465a      	mov	r2, fp
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	47b8      	blx	r7
 8003ee8:	3001      	adds	r0, #1
 8003eea:	f43f aeac 	beq.w	8003c46 <_printf_float+0xb6>
 8003eee:	f108 0801 	add.w	r8, r8, #1
 8003ef2:	e7ec      	b.n	8003ece <_printf_float+0x33e>
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	4631      	mov	r1, r6
 8003ef8:	4628      	mov	r0, r5
 8003efa:	47b8      	blx	r7
 8003efc:	3001      	adds	r0, #1
 8003efe:	d1c2      	bne.n	8003e86 <_printf_float+0x2f6>
 8003f00:	e6a1      	b.n	8003c46 <_printf_float+0xb6>
 8003f02:	2301      	movs	r3, #1
 8003f04:	4631      	mov	r1, r6
 8003f06:	4628      	mov	r0, r5
 8003f08:	920a      	str	r2, [sp, #40]	@ 0x28
 8003f0a:	47b8      	blx	r7
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	f43f ae9a 	beq.w	8003c46 <_printf_float+0xb6>
 8003f12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f14:	f10b 0b01 	add.w	fp, fp, #1
 8003f18:	e7bb      	b.n	8003e92 <_printf_float+0x302>
 8003f1a:	4631      	mov	r1, r6
 8003f1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f20:	4628      	mov	r0, r5
 8003f22:	47b8      	blx	r7
 8003f24:	3001      	adds	r0, #1
 8003f26:	d1c0      	bne.n	8003eaa <_printf_float+0x31a>
 8003f28:	e68d      	b.n	8003c46 <_printf_float+0xb6>
 8003f2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f2c:	464b      	mov	r3, r9
 8003f2e:	4631      	mov	r1, r6
 8003f30:	4628      	mov	r0, r5
 8003f32:	4442      	add	r2, r8
 8003f34:	47b8      	blx	r7
 8003f36:	3001      	adds	r0, #1
 8003f38:	d1c3      	bne.n	8003ec2 <_printf_float+0x332>
 8003f3a:	e684      	b.n	8003c46 <_printf_float+0xb6>
 8003f3c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003f40:	f1ba 0f01 	cmp.w	sl, #1
 8003f44:	dc01      	bgt.n	8003f4a <_printf_float+0x3ba>
 8003f46:	07db      	lsls	r3, r3, #31
 8003f48:	d536      	bpl.n	8003fb8 <_printf_float+0x428>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	4631      	mov	r1, r6
 8003f50:	4628      	mov	r0, r5
 8003f52:	47b8      	blx	r7
 8003f54:	3001      	adds	r0, #1
 8003f56:	f43f ae76 	beq.w	8003c46 <_printf_float+0xb6>
 8003f5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f5e:	4631      	mov	r1, r6
 8003f60:	4628      	mov	r0, r5
 8003f62:	47b8      	blx	r7
 8003f64:	3001      	adds	r0, #1
 8003f66:	f43f ae6e 	beq.w	8003c46 <_printf_float+0xb6>
 8003f6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2300      	movs	r3, #0
 8003f72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f76:	f7fc fd17 	bl	80009a8 <__aeabi_dcmpeq>
 8003f7a:	b9c0      	cbnz	r0, 8003fae <_printf_float+0x41e>
 8003f7c:	4653      	mov	r3, sl
 8003f7e:	f108 0201 	add.w	r2, r8, #1
 8003f82:	4631      	mov	r1, r6
 8003f84:	4628      	mov	r0, r5
 8003f86:	47b8      	blx	r7
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d10c      	bne.n	8003fa6 <_printf_float+0x416>
 8003f8c:	e65b      	b.n	8003c46 <_printf_float+0xb6>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	465a      	mov	r2, fp
 8003f92:	4631      	mov	r1, r6
 8003f94:	4628      	mov	r0, r5
 8003f96:	47b8      	blx	r7
 8003f98:	3001      	adds	r0, #1
 8003f9a:	f43f ae54 	beq.w	8003c46 <_printf_float+0xb6>
 8003f9e:	f108 0801 	add.w	r8, r8, #1
 8003fa2:	45d0      	cmp	r8, sl
 8003fa4:	dbf3      	blt.n	8003f8e <_printf_float+0x3fe>
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003fac:	e6e0      	b.n	8003d70 <_printf_float+0x1e0>
 8003fae:	f04f 0800 	mov.w	r8, #0
 8003fb2:	f104 0b1a 	add.w	fp, r4, #26
 8003fb6:	e7f4      	b.n	8003fa2 <_printf_float+0x412>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	4642      	mov	r2, r8
 8003fbc:	e7e1      	b.n	8003f82 <_printf_float+0x3f2>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	464a      	mov	r2, r9
 8003fc2:	4631      	mov	r1, r6
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	47b8      	blx	r7
 8003fc8:	3001      	adds	r0, #1
 8003fca:	f43f ae3c 	beq.w	8003c46 <_printf_float+0xb6>
 8003fce:	f108 0801 	add.w	r8, r8, #1
 8003fd2:	68e3      	ldr	r3, [r4, #12]
 8003fd4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003fd6:	1a5b      	subs	r3, r3, r1
 8003fd8:	4543      	cmp	r3, r8
 8003fda:	dcf0      	bgt.n	8003fbe <_printf_float+0x42e>
 8003fdc:	e6fd      	b.n	8003dda <_printf_float+0x24a>
 8003fde:	f04f 0800 	mov.w	r8, #0
 8003fe2:	f104 0919 	add.w	r9, r4, #25
 8003fe6:	e7f4      	b.n	8003fd2 <_printf_float+0x442>

08003fe8 <_printf_common>:
 8003fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fec:	4616      	mov	r6, r2
 8003fee:	4698      	mov	r8, r3
 8003ff0:	688a      	ldr	r2, [r1, #8]
 8003ff2:	690b      	ldr	r3, [r1, #16]
 8003ff4:	4607      	mov	r7, r0
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	bfb8      	it	lt
 8003ffa:	4613      	movlt	r3, r2
 8003ffc:	6033      	str	r3, [r6, #0]
 8003ffe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004002:	460c      	mov	r4, r1
 8004004:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004008:	b10a      	cbz	r2, 800400e <_printf_common+0x26>
 800400a:	3301      	adds	r3, #1
 800400c:	6033      	str	r3, [r6, #0]
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	0699      	lsls	r1, r3, #26
 8004012:	bf42      	ittt	mi
 8004014:	6833      	ldrmi	r3, [r6, #0]
 8004016:	3302      	addmi	r3, #2
 8004018:	6033      	strmi	r3, [r6, #0]
 800401a:	6825      	ldr	r5, [r4, #0]
 800401c:	f015 0506 	ands.w	r5, r5, #6
 8004020:	d106      	bne.n	8004030 <_printf_common+0x48>
 8004022:	f104 0a19 	add.w	sl, r4, #25
 8004026:	68e3      	ldr	r3, [r4, #12]
 8004028:	6832      	ldr	r2, [r6, #0]
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	42ab      	cmp	r3, r5
 800402e:	dc2b      	bgt.n	8004088 <_printf_common+0xa0>
 8004030:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004034:	6822      	ldr	r2, [r4, #0]
 8004036:	3b00      	subs	r3, #0
 8004038:	bf18      	it	ne
 800403a:	2301      	movne	r3, #1
 800403c:	0692      	lsls	r2, r2, #26
 800403e:	d430      	bmi.n	80040a2 <_printf_common+0xba>
 8004040:	4641      	mov	r1, r8
 8004042:	4638      	mov	r0, r7
 8004044:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004048:	47c8      	blx	r9
 800404a:	3001      	adds	r0, #1
 800404c:	d023      	beq.n	8004096 <_printf_common+0xae>
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	6922      	ldr	r2, [r4, #16]
 8004052:	f003 0306 	and.w	r3, r3, #6
 8004056:	2b04      	cmp	r3, #4
 8004058:	bf14      	ite	ne
 800405a:	2500      	movne	r5, #0
 800405c:	6833      	ldreq	r3, [r6, #0]
 800405e:	f04f 0600 	mov.w	r6, #0
 8004062:	bf08      	it	eq
 8004064:	68e5      	ldreq	r5, [r4, #12]
 8004066:	f104 041a 	add.w	r4, r4, #26
 800406a:	bf08      	it	eq
 800406c:	1aed      	subeq	r5, r5, r3
 800406e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004072:	bf08      	it	eq
 8004074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004078:	4293      	cmp	r3, r2
 800407a:	bfc4      	itt	gt
 800407c:	1a9b      	subgt	r3, r3, r2
 800407e:	18ed      	addgt	r5, r5, r3
 8004080:	42b5      	cmp	r5, r6
 8004082:	d11a      	bne.n	80040ba <_printf_common+0xd2>
 8004084:	2000      	movs	r0, #0
 8004086:	e008      	b.n	800409a <_printf_common+0xb2>
 8004088:	2301      	movs	r3, #1
 800408a:	4652      	mov	r2, sl
 800408c:	4641      	mov	r1, r8
 800408e:	4638      	mov	r0, r7
 8004090:	47c8      	blx	r9
 8004092:	3001      	adds	r0, #1
 8004094:	d103      	bne.n	800409e <_printf_common+0xb6>
 8004096:	f04f 30ff 	mov.w	r0, #4294967295
 800409a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800409e:	3501      	adds	r5, #1
 80040a0:	e7c1      	b.n	8004026 <_printf_common+0x3e>
 80040a2:	2030      	movs	r0, #48	@ 0x30
 80040a4:	18e1      	adds	r1, r4, r3
 80040a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040b0:	4422      	add	r2, r4
 80040b2:	3302      	adds	r3, #2
 80040b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040b8:	e7c2      	b.n	8004040 <_printf_common+0x58>
 80040ba:	2301      	movs	r3, #1
 80040bc:	4622      	mov	r2, r4
 80040be:	4641      	mov	r1, r8
 80040c0:	4638      	mov	r0, r7
 80040c2:	47c8      	blx	r9
 80040c4:	3001      	adds	r0, #1
 80040c6:	d0e6      	beq.n	8004096 <_printf_common+0xae>
 80040c8:	3601      	adds	r6, #1
 80040ca:	e7d9      	b.n	8004080 <_printf_common+0x98>

080040cc <_printf_i>:
 80040cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040d0:	7e0f      	ldrb	r7, [r1, #24]
 80040d2:	4691      	mov	r9, r2
 80040d4:	2f78      	cmp	r7, #120	@ 0x78
 80040d6:	4680      	mov	r8, r0
 80040d8:	460c      	mov	r4, r1
 80040da:	469a      	mov	sl, r3
 80040dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80040e2:	d807      	bhi.n	80040f4 <_printf_i+0x28>
 80040e4:	2f62      	cmp	r7, #98	@ 0x62
 80040e6:	d80a      	bhi.n	80040fe <_printf_i+0x32>
 80040e8:	2f00      	cmp	r7, #0
 80040ea:	f000 80d1 	beq.w	8004290 <_printf_i+0x1c4>
 80040ee:	2f58      	cmp	r7, #88	@ 0x58
 80040f0:	f000 80b8 	beq.w	8004264 <_printf_i+0x198>
 80040f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040fc:	e03a      	b.n	8004174 <_printf_i+0xa8>
 80040fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004102:	2b15      	cmp	r3, #21
 8004104:	d8f6      	bhi.n	80040f4 <_printf_i+0x28>
 8004106:	a101      	add	r1, pc, #4	@ (adr r1, 800410c <_printf_i+0x40>)
 8004108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800410c:	08004165 	.word	0x08004165
 8004110:	08004179 	.word	0x08004179
 8004114:	080040f5 	.word	0x080040f5
 8004118:	080040f5 	.word	0x080040f5
 800411c:	080040f5 	.word	0x080040f5
 8004120:	080040f5 	.word	0x080040f5
 8004124:	08004179 	.word	0x08004179
 8004128:	080040f5 	.word	0x080040f5
 800412c:	080040f5 	.word	0x080040f5
 8004130:	080040f5 	.word	0x080040f5
 8004134:	080040f5 	.word	0x080040f5
 8004138:	08004277 	.word	0x08004277
 800413c:	080041a3 	.word	0x080041a3
 8004140:	08004231 	.word	0x08004231
 8004144:	080040f5 	.word	0x080040f5
 8004148:	080040f5 	.word	0x080040f5
 800414c:	08004299 	.word	0x08004299
 8004150:	080040f5 	.word	0x080040f5
 8004154:	080041a3 	.word	0x080041a3
 8004158:	080040f5 	.word	0x080040f5
 800415c:	080040f5 	.word	0x080040f5
 8004160:	08004239 	.word	0x08004239
 8004164:	6833      	ldr	r3, [r6, #0]
 8004166:	1d1a      	adds	r2, r3, #4
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6032      	str	r2, [r6, #0]
 800416c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004170:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004174:	2301      	movs	r3, #1
 8004176:	e09c      	b.n	80042b2 <_printf_i+0x1e6>
 8004178:	6833      	ldr	r3, [r6, #0]
 800417a:	6820      	ldr	r0, [r4, #0]
 800417c:	1d19      	adds	r1, r3, #4
 800417e:	6031      	str	r1, [r6, #0]
 8004180:	0606      	lsls	r6, r0, #24
 8004182:	d501      	bpl.n	8004188 <_printf_i+0xbc>
 8004184:	681d      	ldr	r5, [r3, #0]
 8004186:	e003      	b.n	8004190 <_printf_i+0xc4>
 8004188:	0645      	lsls	r5, r0, #25
 800418a:	d5fb      	bpl.n	8004184 <_printf_i+0xb8>
 800418c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004190:	2d00      	cmp	r5, #0
 8004192:	da03      	bge.n	800419c <_printf_i+0xd0>
 8004194:	232d      	movs	r3, #45	@ 0x2d
 8004196:	426d      	negs	r5, r5
 8004198:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800419c:	230a      	movs	r3, #10
 800419e:	4858      	ldr	r0, [pc, #352]	@ (8004300 <_printf_i+0x234>)
 80041a0:	e011      	b.n	80041c6 <_printf_i+0xfa>
 80041a2:	6821      	ldr	r1, [r4, #0]
 80041a4:	6833      	ldr	r3, [r6, #0]
 80041a6:	0608      	lsls	r0, r1, #24
 80041a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80041ac:	d402      	bmi.n	80041b4 <_printf_i+0xe8>
 80041ae:	0649      	lsls	r1, r1, #25
 80041b0:	bf48      	it	mi
 80041b2:	b2ad      	uxthmi	r5, r5
 80041b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80041b6:	6033      	str	r3, [r6, #0]
 80041b8:	bf14      	ite	ne
 80041ba:	230a      	movne	r3, #10
 80041bc:	2308      	moveq	r3, #8
 80041be:	4850      	ldr	r0, [pc, #320]	@ (8004300 <_printf_i+0x234>)
 80041c0:	2100      	movs	r1, #0
 80041c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80041c6:	6866      	ldr	r6, [r4, #4]
 80041c8:	2e00      	cmp	r6, #0
 80041ca:	60a6      	str	r6, [r4, #8]
 80041cc:	db05      	blt.n	80041da <_printf_i+0x10e>
 80041ce:	6821      	ldr	r1, [r4, #0]
 80041d0:	432e      	orrs	r6, r5
 80041d2:	f021 0104 	bic.w	r1, r1, #4
 80041d6:	6021      	str	r1, [r4, #0]
 80041d8:	d04b      	beq.n	8004272 <_printf_i+0x1a6>
 80041da:	4616      	mov	r6, r2
 80041dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80041e0:	fb03 5711 	mls	r7, r3, r1, r5
 80041e4:	5dc7      	ldrb	r7, [r0, r7]
 80041e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041ea:	462f      	mov	r7, r5
 80041ec:	42bb      	cmp	r3, r7
 80041ee:	460d      	mov	r5, r1
 80041f0:	d9f4      	bls.n	80041dc <_printf_i+0x110>
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d10b      	bne.n	800420e <_printf_i+0x142>
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	07df      	lsls	r7, r3, #31
 80041fa:	d508      	bpl.n	800420e <_printf_i+0x142>
 80041fc:	6923      	ldr	r3, [r4, #16]
 80041fe:	6861      	ldr	r1, [r4, #4]
 8004200:	4299      	cmp	r1, r3
 8004202:	bfde      	ittt	le
 8004204:	2330      	movle	r3, #48	@ 0x30
 8004206:	f806 3c01 	strble.w	r3, [r6, #-1]
 800420a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800420e:	1b92      	subs	r2, r2, r6
 8004210:	6122      	str	r2, [r4, #16]
 8004212:	464b      	mov	r3, r9
 8004214:	4621      	mov	r1, r4
 8004216:	4640      	mov	r0, r8
 8004218:	f8cd a000 	str.w	sl, [sp]
 800421c:	aa03      	add	r2, sp, #12
 800421e:	f7ff fee3 	bl	8003fe8 <_printf_common>
 8004222:	3001      	adds	r0, #1
 8004224:	d14a      	bne.n	80042bc <_printf_i+0x1f0>
 8004226:	f04f 30ff 	mov.w	r0, #4294967295
 800422a:	b004      	add	sp, #16
 800422c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	f043 0320 	orr.w	r3, r3, #32
 8004236:	6023      	str	r3, [r4, #0]
 8004238:	2778      	movs	r7, #120	@ 0x78
 800423a:	4832      	ldr	r0, [pc, #200]	@ (8004304 <_printf_i+0x238>)
 800423c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	6831      	ldr	r1, [r6, #0]
 8004244:	061f      	lsls	r7, r3, #24
 8004246:	f851 5b04 	ldr.w	r5, [r1], #4
 800424a:	d402      	bmi.n	8004252 <_printf_i+0x186>
 800424c:	065f      	lsls	r7, r3, #25
 800424e:	bf48      	it	mi
 8004250:	b2ad      	uxthmi	r5, r5
 8004252:	6031      	str	r1, [r6, #0]
 8004254:	07d9      	lsls	r1, r3, #31
 8004256:	bf44      	itt	mi
 8004258:	f043 0320 	orrmi.w	r3, r3, #32
 800425c:	6023      	strmi	r3, [r4, #0]
 800425e:	b11d      	cbz	r5, 8004268 <_printf_i+0x19c>
 8004260:	2310      	movs	r3, #16
 8004262:	e7ad      	b.n	80041c0 <_printf_i+0xf4>
 8004264:	4826      	ldr	r0, [pc, #152]	@ (8004300 <_printf_i+0x234>)
 8004266:	e7e9      	b.n	800423c <_printf_i+0x170>
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	f023 0320 	bic.w	r3, r3, #32
 800426e:	6023      	str	r3, [r4, #0]
 8004270:	e7f6      	b.n	8004260 <_printf_i+0x194>
 8004272:	4616      	mov	r6, r2
 8004274:	e7bd      	b.n	80041f2 <_printf_i+0x126>
 8004276:	6833      	ldr	r3, [r6, #0]
 8004278:	6825      	ldr	r5, [r4, #0]
 800427a:	1d18      	adds	r0, r3, #4
 800427c:	6961      	ldr	r1, [r4, #20]
 800427e:	6030      	str	r0, [r6, #0]
 8004280:	062e      	lsls	r6, r5, #24
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	d501      	bpl.n	800428a <_printf_i+0x1be>
 8004286:	6019      	str	r1, [r3, #0]
 8004288:	e002      	b.n	8004290 <_printf_i+0x1c4>
 800428a:	0668      	lsls	r0, r5, #25
 800428c:	d5fb      	bpl.n	8004286 <_printf_i+0x1ba>
 800428e:	8019      	strh	r1, [r3, #0]
 8004290:	2300      	movs	r3, #0
 8004292:	4616      	mov	r6, r2
 8004294:	6123      	str	r3, [r4, #16]
 8004296:	e7bc      	b.n	8004212 <_printf_i+0x146>
 8004298:	6833      	ldr	r3, [r6, #0]
 800429a:	2100      	movs	r1, #0
 800429c:	1d1a      	adds	r2, r3, #4
 800429e:	6032      	str	r2, [r6, #0]
 80042a0:	681e      	ldr	r6, [r3, #0]
 80042a2:	6862      	ldr	r2, [r4, #4]
 80042a4:	4630      	mov	r0, r6
 80042a6:	f000 f9d6 	bl	8004656 <memchr>
 80042aa:	b108      	cbz	r0, 80042b0 <_printf_i+0x1e4>
 80042ac:	1b80      	subs	r0, r0, r6
 80042ae:	6060      	str	r0, [r4, #4]
 80042b0:	6863      	ldr	r3, [r4, #4]
 80042b2:	6123      	str	r3, [r4, #16]
 80042b4:	2300      	movs	r3, #0
 80042b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042ba:	e7aa      	b.n	8004212 <_printf_i+0x146>
 80042bc:	4632      	mov	r2, r6
 80042be:	4649      	mov	r1, r9
 80042c0:	4640      	mov	r0, r8
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	47d0      	blx	sl
 80042c6:	3001      	adds	r0, #1
 80042c8:	d0ad      	beq.n	8004226 <_printf_i+0x15a>
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	079b      	lsls	r3, r3, #30
 80042ce:	d413      	bmi.n	80042f8 <_printf_i+0x22c>
 80042d0:	68e0      	ldr	r0, [r4, #12]
 80042d2:	9b03      	ldr	r3, [sp, #12]
 80042d4:	4298      	cmp	r0, r3
 80042d6:	bfb8      	it	lt
 80042d8:	4618      	movlt	r0, r3
 80042da:	e7a6      	b.n	800422a <_printf_i+0x15e>
 80042dc:	2301      	movs	r3, #1
 80042de:	4632      	mov	r2, r6
 80042e0:	4649      	mov	r1, r9
 80042e2:	4640      	mov	r0, r8
 80042e4:	47d0      	blx	sl
 80042e6:	3001      	adds	r0, #1
 80042e8:	d09d      	beq.n	8004226 <_printf_i+0x15a>
 80042ea:	3501      	adds	r5, #1
 80042ec:	68e3      	ldr	r3, [r4, #12]
 80042ee:	9903      	ldr	r1, [sp, #12]
 80042f0:	1a5b      	subs	r3, r3, r1
 80042f2:	42ab      	cmp	r3, r5
 80042f4:	dcf2      	bgt.n	80042dc <_printf_i+0x210>
 80042f6:	e7eb      	b.n	80042d0 <_printf_i+0x204>
 80042f8:	2500      	movs	r5, #0
 80042fa:	f104 0619 	add.w	r6, r4, #25
 80042fe:	e7f5      	b.n	80042ec <_printf_i+0x220>
 8004300:	08006768 	.word	0x08006768
 8004304:	08006779 	.word	0x08006779

08004308 <std>:
 8004308:	2300      	movs	r3, #0
 800430a:	b510      	push	{r4, lr}
 800430c:	4604      	mov	r4, r0
 800430e:	e9c0 3300 	strd	r3, r3, [r0]
 8004312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004316:	6083      	str	r3, [r0, #8]
 8004318:	8181      	strh	r1, [r0, #12]
 800431a:	6643      	str	r3, [r0, #100]	@ 0x64
 800431c:	81c2      	strh	r2, [r0, #14]
 800431e:	6183      	str	r3, [r0, #24]
 8004320:	4619      	mov	r1, r3
 8004322:	2208      	movs	r2, #8
 8004324:	305c      	adds	r0, #92	@ 0x5c
 8004326:	f000 f916 	bl	8004556 <memset>
 800432a:	4b0d      	ldr	r3, [pc, #52]	@ (8004360 <std+0x58>)
 800432c:	6224      	str	r4, [r4, #32]
 800432e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004330:	4b0c      	ldr	r3, [pc, #48]	@ (8004364 <std+0x5c>)
 8004332:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004334:	4b0c      	ldr	r3, [pc, #48]	@ (8004368 <std+0x60>)
 8004336:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004338:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <std+0x64>)
 800433a:	6323      	str	r3, [r4, #48]	@ 0x30
 800433c:	4b0c      	ldr	r3, [pc, #48]	@ (8004370 <std+0x68>)
 800433e:	429c      	cmp	r4, r3
 8004340:	d006      	beq.n	8004350 <std+0x48>
 8004342:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004346:	4294      	cmp	r4, r2
 8004348:	d002      	beq.n	8004350 <std+0x48>
 800434a:	33d0      	adds	r3, #208	@ 0xd0
 800434c:	429c      	cmp	r4, r3
 800434e:	d105      	bne.n	800435c <std+0x54>
 8004350:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004358:	f000 b97a 	b.w	8004650 <__retarget_lock_init_recursive>
 800435c:	bd10      	pop	{r4, pc}
 800435e:	bf00      	nop
 8004360:	080044d1 	.word	0x080044d1
 8004364:	080044f3 	.word	0x080044f3
 8004368:	0800452b 	.word	0x0800452b
 800436c:	0800454f 	.word	0x0800454f
 8004370:	20000310 	.word	0x20000310

08004374 <stdio_exit_handler>:
 8004374:	4a02      	ldr	r2, [pc, #8]	@ (8004380 <stdio_exit_handler+0xc>)
 8004376:	4903      	ldr	r1, [pc, #12]	@ (8004384 <stdio_exit_handler+0x10>)
 8004378:	4803      	ldr	r0, [pc, #12]	@ (8004388 <stdio_exit_handler+0x14>)
 800437a:	f000 b869 	b.w	8004450 <_fwalk_sglue>
 800437e:	bf00      	nop
 8004380:	2000003c 	.word	0x2000003c
 8004384:	08005fd1 	.word	0x08005fd1
 8004388:	2000004c 	.word	0x2000004c

0800438c <cleanup_stdio>:
 800438c:	6841      	ldr	r1, [r0, #4]
 800438e:	4b0c      	ldr	r3, [pc, #48]	@ (80043c0 <cleanup_stdio+0x34>)
 8004390:	b510      	push	{r4, lr}
 8004392:	4299      	cmp	r1, r3
 8004394:	4604      	mov	r4, r0
 8004396:	d001      	beq.n	800439c <cleanup_stdio+0x10>
 8004398:	f001 fe1a 	bl	8005fd0 <_fflush_r>
 800439c:	68a1      	ldr	r1, [r4, #8]
 800439e:	4b09      	ldr	r3, [pc, #36]	@ (80043c4 <cleanup_stdio+0x38>)
 80043a0:	4299      	cmp	r1, r3
 80043a2:	d002      	beq.n	80043aa <cleanup_stdio+0x1e>
 80043a4:	4620      	mov	r0, r4
 80043a6:	f001 fe13 	bl	8005fd0 <_fflush_r>
 80043aa:	68e1      	ldr	r1, [r4, #12]
 80043ac:	4b06      	ldr	r3, [pc, #24]	@ (80043c8 <cleanup_stdio+0x3c>)
 80043ae:	4299      	cmp	r1, r3
 80043b0:	d004      	beq.n	80043bc <cleanup_stdio+0x30>
 80043b2:	4620      	mov	r0, r4
 80043b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b8:	f001 be0a 	b.w	8005fd0 <_fflush_r>
 80043bc:	bd10      	pop	{r4, pc}
 80043be:	bf00      	nop
 80043c0:	20000310 	.word	0x20000310
 80043c4:	20000378 	.word	0x20000378
 80043c8:	200003e0 	.word	0x200003e0

080043cc <global_stdio_init.part.0>:
 80043cc:	b510      	push	{r4, lr}
 80043ce:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <global_stdio_init.part.0+0x30>)
 80043d0:	4c0b      	ldr	r4, [pc, #44]	@ (8004400 <global_stdio_init.part.0+0x34>)
 80043d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004404 <global_stdio_init.part.0+0x38>)
 80043d4:	4620      	mov	r0, r4
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	2104      	movs	r1, #4
 80043da:	2200      	movs	r2, #0
 80043dc:	f7ff ff94 	bl	8004308 <std>
 80043e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043e4:	2201      	movs	r2, #1
 80043e6:	2109      	movs	r1, #9
 80043e8:	f7ff ff8e 	bl	8004308 <std>
 80043ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043f0:	2202      	movs	r2, #2
 80043f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043f6:	2112      	movs	r1, #18
 80043f8:	f7ff bf86 	b.w	8004308 <std>
 80043fc:	20000448 	.word	0x20000448
 8004400:	20000310 	.word	0x20000310
 8004404:	08004375 	.word	0x08004375

08004408 <__sfp_lock_acquire>:
 8004408:	4801      	ldr	r0, [pc, #4]	@ (8004410 <__sfp_lock_acquire+0x8>)
 800440a:	f000 b922 	b.w	8004652 <__retarget_lock_acquire_recursive>
 800440e:	bf00      	nop
 8004410:	20000451 	.word	0x20000451

08004414 <__sfp_lock_release>:
 8004414:	4801      	ldr	r0, [pc, #4]	@ (800441c <__sfp_lock_release+0x8>)
 8004416:	f000 b91d 	b.w	8004654 <__retarget_lock_release_recursive>
 800441a:	bf00      	nop
 800441c:	20000451 	.word	0x20000451

08004420 <__sinit>:
 8004420:	b510      	push	{r4, lr}
 8004422:	4604      	mov	r4, r0
 8004424:	f7ff fff0 	bl	8004408 <__sfp_lock_acquire>
 8004428:	6a23      	ldr	r3, [r4, #32]
 800442a:	b11b      	cbz	r3, 8004434 <__sinit+0x14>
 800442c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004430:	f7ff bff0 	b.w	8004414 <__sfp_lock_release>
 8004434:	4b04      	ldr	r3, [pc, #16]	@ (8004448 <__sinit+0x28>)
 8004436:	6223      	str	r3, [r4, #32]
 8004438:	4b04      	ldr	r3, [pc, #16]	@ (800444c <__sinit+0x2c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1f5      	bne.n	800442c <__sinit+0xc>
 8004440:	f7ff ffc4 	bl	80043cc <global_stdio_init.part.0>
 8004444:	e7f2      	b.n	800442c <__sinit+0xc>
 8004446:	bf00      	nop
 8004448:	0800438d 	.word	0x0800438d
 800444c:	20000448 	.word	0x20000448

08004450 <_fwalk_sglue>:
 8004450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004454:	4607      	mov	r7, r0
 8004456:	4688      	mov	r8, r1
 8004458:	4614      	mov	r4, r2
 800445a:	2600      	movs	r6, #0
 800445c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004460:	f1b9 0901 	subs.w	r9, r9, #1
 8004464:	d505      	bpl.n	8004472 <_fwalk_sglue+0x22>
 8004466:	6824      	ldr	r4, [r4, #0]
 8004468:	2c00      	cmp	r4, #0
 800446a:	d1f7      	bne.n	800445c <_fwalk_sglue+0xc>
 800446c:	4630      	mov	r0, r6
 800446e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004472:	89ab      	ldrh	r3, [r5, #12]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d907      	bls.n	8004488 <_fwalk_sglue+0x38>
 8004478:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800447c:	3301      	adds	r3, #1
 800447e:	d003      	beq.n	8004488 <_fwalk_sglue+0x38>
 8004480:	4629      	mov	r1, r5
 8004482:	4638      	mov	r0, r7
 8004484:	47c0      	blx	r8
 8004486:	4306      	orrs	r6, r0
 8004488:	3568      	adds	r5, #104	@ 0x68
 800448a:	e7e9      	b.n	8004460 <_fwalk_sglue+0x10>

0800448c <siprintf>:
 800448c:	b40e      	push	{r1, r2, r3}
 800448e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004492:	b510      	push	{r4, lr}
 8004494:	2400      	movs	r4, #0
 8004496:	b09d      	sub	sp, #116	@ 0x74
 8004498:	ab1f      	add	r3, sp, #124	@ 0x7c
 800449a:	9002      	str	r0, [sp, #8]
 800449c:	9006      	str	r0, [sp, #24]
 800449e:	9107      	str	r1, [sp, #28]
 80044a0:	9104      	str	r1, [sp, #16]
 80044a2:	4809      	ldr	r0, [pc, #36]	@ (80044c8 <siprintf+0x3c>)
 80044a4:	4909      	ldr	r1, [pc, #36]	@ (80044cc <siprintf+0x40>)
 80044a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80044aa:	9105      	str	r1, [sp, #20]
 80044ac:	6800      	ldr	r0, [r0, #0]
 80044ae:	a902      	add	r1, sp, #8
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80044b4:	f001 fc10 	bl	8005cd8 <_svfiprintf_r>
 80044b8:	9b02      	ldr	r3, [sp, #8]
 80044ba:	701c      	strb	r4, [r3, #0]
 80044bc:	b01d      	add	sp, #116	@ 0x74
 80044be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c2:	b003      	add	sp, #12
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	20000048 	.word	0x20000048
 80044cc:	ffff0208 	.word	0xffff0208

080044d0 <__sread>:
 80044d0:	b510      	push	{r4, lr}
 80044d2:	460c      	mov	r4, r1
 80044d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d8:	f000 f86c 	bl	80045b4 <_read_r>
 80044dc:	2800      	cmp	r0, #0
 80044de:	bfab      	itete	ge
 80044e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80044e2:	89a3      	ldrhlt	r3, [r4, #12]
 80044e4:	181b      	addge	r3, r3, r0
 80044e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044ea:	bfac      	ite	ge
 80044ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044ee:	81a3      	strhlt	r3, [r4, #12]
 80044f0:	bd10      	pop	{r4, pc}

080044f2 <__swrite>:
 80044f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f6:	461f      	mov	r7, r3
 80044f8:	898b      	ldrh	r3, [r1, #12]
 80044fa:	4605      	mov	r5, r0
 80044fc:	05db      	lsls	r3, r3, #23
 80044fe:	460c      	mov	r4, r1
 8004500:	4616      	mov	r6, r2
 8004502:	d505      	bpl.n	8004510 <__swrite+0x1e>
 8004504:	2302      	movs	r3, #2
 8004506:	2200      	movs	r2, #0
 8004508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800450c:	f000 f840 	bl	8004590 <_lseek_r>
 8004510:	89a3      	ldrh	r3, [r4, #12]
 8004512:	4632      	mov	r2, r6
 8004514:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004518:	81a3      	strh	r3, [r4, #12]
 800451a:	4628      	mov	r0, r5
 800451c:	463b      	mov	r3, r7
 800451e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004526:	f000 b857 	b.w	80045d8 <_write_r>

0800452a <__sseek>:
 800452a:	b510      	push	{r4, lr}
 800452c:	460c      	mov	r4, r1
 800452e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004532:	f000 f82d 	bl	8004590 <_lseek_r>
 8004536:	1c43      	adds	r3, r0, #1
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	bf15      	itete	ne
 800453c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800453e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004542:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004546:	81a3      	strheq	r3, [r4, #12]
 8004548:	bf18      	it	ne
 800454a:	81a3      	strhne	r3, [r4, #12]
 800454c:	bd10      	pop	{r4, pc}

0800454e <__sclose>:
 800454e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004552:	f000 b80d 	b.w	8004570 <_close_r>

08004556 <memset>:
 8004556:	4603      	mov	r3, r0
 8004558:	4402      	add	r2, r0
 800455a:	4293      	cmp	r3, r2
 800455c:	d100      	bne.n	8004560 <memset+0xa>
 800455e:	4770      	bx	lr
 8004560:	f803 1b01 	strb.w	r1, [r3], #1
 8004564:	e7f9      	b.n	800455a <memset+0x4>
	...

08004568 <_localeconv_r>:
 8004568:	4800      	ldr	r0, [pc, #0]	@ (800456c <_localeconv_r+0x4>)
 800456a:	4770      	bx	lr
 800456c:	20000188 	.word	0x20000188

08004570 <_close_r>:
 8004570:	b538      	push	{r3, r4, r5, lr}
 8004572:	2300      	movs	r3, #0
 8004574:	4d05      	ldr	r5, [pc, #20]	@ (800458c <_close_r+0x1c>)
 8004576:	4604      	mov	r4, r0
 8004578:	4608      	mov	r0, r1
 800457a:	602b      	str	r3, [r5, #0]
 800457c:	f7fd fbd2 	bl	8001d24 <_close>
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	d102      	bne.n	800458a <_close_r+0x1a>
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	b103      	cbz	r3, 800458a <_close_r+0x1a>
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	2000044c 	.word	0x2000044c

08004590 <_lseek_r>:
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	4604      	mov	r4, r0
 8004594:	4608      	mov	r0, r1
 8004596:	4611      	mov	r1, r2
 8004598:	2200      	movs	r2, #0
 800459a:	4d05      	ldr	r5, [pc, #20]	@ (80045b0 <_lseek_r+0x20>)
 800459c:	602a      	str	r2, [r5, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	f7fd fbe4 	bl	8001d6c <_lseek>
 80045a4:	1c43      	adds	r3, r0, #1
 80045a6:	d102      	bne.n	80045ae <_lseek_r+0x1e>
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	b103      	cbz	r3, 80045ae <_lseek_r+0x1e>
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	bd38      	pop	{r3, r4, r5, pc}
 80045b0:	2000044c 	.word	0x2000044c

080045b4 <_read_r>:
 80045b4:	b538      	push	{r3, r4, r5, lr}
 80045b6:	4604      	mov	r4, r0
 80045b8:	4608      	mov	r0, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	2200      	movs	r2, #0
 80045be:	4d05      	ldr	r5, [pc, #20]	@ (80045d4 <_read_r+0x20>)
 80045c0:	602a      	str	r2, [r5, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	f7fd fb75 	bl	8001cb2 <_read>
 80045c8:	1c43      	adds	r3, r0, #1
 80045ca:	d102      	bne.n	80045d2 <_read_r+0x1e>
 80045cc:	682b      	ldr	r3, [r5, #0]
 80045ce:	b103      	cbz	r3, 80045d2 <_read_r+0x1e>
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	bd38      	pop	{r3, r4, r5, pc}
 80045d4:	2000044c 	.word	0x2000044c

080045d8 <_write_r>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	4604      	mov	r4, r0
 80045dc:	4608      	mov	r0, r1
 80045de:	4611      	mov	r1, r2
 80045e0:	2200      	movs	r2, #0
 80045e2:	4d05      	ldr	r5, [pc, #20]	@ (80045f8 <_write_r+0x20>)
 80045e4:	602a      	str	r2, [r5, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f7fd fb80 	bl	8001cec <_write>
 80045ec:	1c43      	adds	r3, r0, #1
 80045ee:	d102      	bne.n	80045f6 <_write_r+0x1e>
 80045f0:	682b      	ldr	r3, [r5, #0]
 80045f2:	b103      	cbz	r3, 80045f6 <_write_r+0x1e>
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	bd38      	pop	{r3, r4, r5, pc}
 80045f8:	2000044c 	.word	0x2000044c

080045fc <__errno>:
 80045fc:	4b01      	ldr	r3, [pc, #4]	@ (8004604 <__errno+0x8>)
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000048 	.word	0x20000048

08004608 <__libc_init_array>:
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	2600      	movs	r6, #0
 800460c:	4d0c      	ldr	r5, [pc, #48]	@ (8004640 <__libc_init_array+0x38>)
 800460e:	4c0d      	ldr	r4, [pc, #52]	@ (8004644 <__libc_init_array+0x3c>)
 8004610:	1b64      	subs	r4, r4, r5
 8004612:	10a4      	asrs	r4, r4, #2
 8004614:	42a6      	cmp	r6, r4
 8004616:	d109      	bne.n	800462c <__libc_init_array+0x24>
 8004618:	f002 f876 	bl	8006708 <_init>
 800461c:	2600      	movs	r6, #0
 800461e:	4d0a      	ldr	r5, [pc, #40]	@ (8004648 <__libc_init_array+0x40>)
 8004620:	4c0a      	ldr	r4, [pc, #40]	@ (800464c <__libc_init_array+0x44>)
 8004622:	1b64      	subs	r4, r4, r5
 8004624:	10a4      	asrs	r4, r4, #2
 8004626:	42a6      	cmp	r6, r4
 8004628:	d105      	bne.n	8004636 <__libc_init_array+0x2e>
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004630:	4798      	blx	r3
 8004632:	3601      	adds	r6, #1
 8004634:	e7ee      	b.n	8004614 <__libc_init_array+0xc>
 8004636:	f855 3b04 	ldr.w	r3, [r5], #4
 800463a:	4798      	blx	r3
 800463c:	3601      	adds	r6, #1
 800463e:	e7f2      	b.n	8004626 <__libc_init_array+0x1e>
 8004640:	08006ad4 	.word	0x08006ad4
 8004644:	08006ad4 	.word	0x08006ad4
 8004648:	08006ad4 	.word	0x08006ad4
 800464c:	08006ad8 	.word	0x08006ad8

08004650 <__retarget_lock_init_recursive>:
 8004650:	4770      	bx	lr

08004652 <__retarget_lock_acquire_recursive>:
 8004652:	4770      	bx	lr

08004654 <__retarget_lock_release_recursive>:
 8004654:	4770      	bx	lr

08004656 <memchr>:
 8004656:	4603      	mov	r3, r0
 8004658:	b510      	push	{r4, lr}
 800465a:	b2c9      	uxtb	r1, r1
 800465c:	4402      	add	r2, r0
 800465e:	4293      	cmp	r3, r2
 8004660:	4618      	mov	r0, r3
 8004662:	d101      	bne.n	8004668 <memchr+0x12>
 8004664:	2000      	movs	r0, #0
 8004666:	e003      	b.n	8004670 <memchr+0x1a>
 8004668:	7804      	ldrb	r4, [r0, #0]
 800466a:	3301      	adds	r3, #1
 800466c:	428c      	cmp	r4, r1
 800466e:	d1f6      	bne.n	800465e <memchr+0x8>
 8004670:	bd10      	pop	{r4, pc}

08004672 <quorem>:
 8004672:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004676:	6903      	ldr	r3, [r0, #16]
 8004678:	690c      	ldr	r4, [r1, #16]
 800467a:	4607      	mov	r7, r0
 800467c:	42a3      	cmp	r3, r4
 800467e:	db7e      	blt.n	800477e <quorem+0x10c>
 8004680:	3c01      	subs	r4, #1
 8004682:	00a3      	lsls	r3, r4, #2
 8004684:	f100 0514 	add.w	r5, r0, #20
 8004688:	f101 0814 	add.w	r8, r1, #20
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004698:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800469c:	3301      	adds	r3, #1
 800469e:	429a      	cmp	r2, r3
 80046a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80046a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80046a8:	d32e      	bcc.n	8004708 <quorem+0x96>
 80046aa:	f04f 0a00 	mov.w	sl, #0
 80046ae:	46c4      	mov	ip, r8
 80046b0:	46ae      	mov	lr, r5
 80046b2:	46d3      	mov	fp, sl
 80046b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80046b8:	b298      	uxth	r0, r3
 80046ba:	fb06 a000 	mla	r0, r6, r0, sl
 80046be:	0c1b      	lsrs	r3, r3, #16
 80046c0:	0c02      	lsrs	r2, r0, #16
 80046c2:	fb06 2303 	mla	r3, r6, r3, r2
 80046c6:	f8de 2000 	ldr.w	r2, [lr]
 80046ca:	b280      	uxth	r0, r0
 80046cc:	b292      	uxth	r2, r2
 80046ce:	1a12      	subs	r2, r2, r0
 80046d0:	445a      	add	r2, fp
 80046d2:	f8de 0000 	ldr.w	r0, [lr]
 80046d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80046da:	b29b      	uxth	r3, r3
 80046dc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80046e0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80046e4:	b292      	uxth	r2, r2
 80046e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80046ea:	45e1      	cmp	r9, ip
 80046ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80046f0:	f84e 2b04 	str.w	r2, [lr], #4
 80046f4:	d2de      	bcs.n	80046b4 <quorem+0x42>
 80046f6:	9b00      	ldr	r3, [sp, #0]
 80046f8:	58eb      	ldr	r3, [r5, r3]
 80046fa:	b92b      	cbnz	r3, 8004708 <quorem+0x96>
 80046fc:	9b01      	ldr	r3, [sp, #4]
 80046fe:	3b04      	subs	r3, #4
 8004700:	429d      	cmp	r5, r3
 8004702:	461a      	mov	r2, r3
 8004704:	d32f      	bcc.n	8004766 <quorem+0xf4>
 8004706:	613c      	str	r4, [r7, #16]
 8004708:	4638      	mov	r0, r7
 800470a:	f001 f981 	bl	8005a10 <__mcmp>
 800470e:	2800      	cmp	r0, #0
 8004710:	db25      	blt.n	800475e <quorem+0xec>
 8004712:	4629      	mov	r1, r5
 8004714:	2000      	movs	r0, #0
 8004716:	f858 2b04 	ldr.w	r2, [r8], #4
 800471a:	f8d1 c000 	ldr.w	ip, [r1]
 800471e:	fa1f fe82 	uxth.w	lr, r2
 8004722:	fa1f f38c 	uxth.w	r3, ip
 8004726:	eba3 030e 	sub.w	r3, r3, lr
 800472a:	4403      	add	r3, r0
 800472c:	0c12      	lsrs	r2, r2, #16
 800472e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004732:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004736:	b29b      	uxth	r3, r3
 8004738:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800473c:	45c1      	cmp	r9, r8
 800473e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004742:	f841 3b04 	str.w	r3, [r1], #4
 8004746:	d2e6      	bcs.n	8004716 <quorem+0xa4>
 8004748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800474c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004750:	b922      	cbnz	r2, 800475c <quorem+0xea>
 8004752:	3b04      	subs	r3, #4
 8004754:	429d      	cmp	r5, r3
 8004756:	461a      	mov	r2, r3
 8004758:	d30b      	bcc.n	8004772 <quorem+0x100>
 800475a:	613c      	str	r4, [r7, #16]
 800475c:	3601      	adds	r6, #1
 800475e:	4630      	mov	r0, r6
 8004760:	b003      	add	sp, #12
 8004762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	3b04      	subs	r3, #4
 800476a:	2a00      	cmp	r2, #0
 800476c:	d1cb      	bne.n	8004706 <quorem+0x94>
 800476e:	3c01      	subs	r4, #1
 8004770:	e7c6      	b.n	8004700 <quorem+0x8e>
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	3b04      	subs	r3, #4
 8004776:	2a00      	cmp	r2, #0
 8004778:	d1ef      	bne.n	800475a <quorem+0xe8>
 800477a:	3c01      	subs	r4, #1
 800477c:	e7ea      	b.n	8004754 <quorem+0xe2>
 800477e:	2000      	movs	r0, #0
 8004780:	e7ee      	b.n	8004760 <quorem+0xee>
 8004782:	0000      	movs	r0, r0
 8004784:	0000      	movs	r0, r0
	...

08004788 <_dtoa_r>:
 8004788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800478c:	4614      	mov	r4, r2
 800478e:	461d      	mov	r5, r3
 8004790:	69c7      	ldr	r7, [r0, #28]
 8004792:	b097      	sub	sp, #92	@ 0x5c
 8004794:	4681      	mov	r9, r0
 8004796:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800479a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800479c:	b97f      	cbnz	r7, 80047be <_dtoa_r+0x36>
 800479e:	2010      	movs	r0, #16
 80047a0:	f000 fe0e 	bl	80053c0 <malloc>
 80047a4:	4602      	mov	r2, r0
 80047a6:	f8c9 001c 	str.w	r0, [r9, #28]
 80047aa:	b920      	cbnz	r0, 80047b6 <_dtoa_r+0x2e>
 80047ac:	21ef      	movs	r1, #239	@ 0xef
 80047ae:	4bac      	ldr	r3, [pc, #688]	@ (8004a60 <_dtoa_r+0x2d8>)
 80047b0:	48ac      	ldr	r0, [pc, #688]	@ (8004a64 <_dtoa_r+0x2dc>)
 80047b2:	f001 fc6d 	bl	8006090 <__assert_func>
 80047b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80047ba:	6007      	str	r7, [r0, #0]
 80047bc:	60c7      	str	r7, [r0, #12]
 80047be:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80047c2:	6819      	ldr	r1, [r3, #0]
 80047c4:	b159      	cbz	r1, 80047de <_dtoa_r+0x56>
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	2301      	movs	r3, #1
 80047ca:	4093      	lsls	r3, r2
 80047cc:	604a      	str	r2, [r1, #4]
 80047ce:	608b      	str	r3, [r1, #8]
 80047d0:	4648      	mov	r0, r9
 80047d2:	f000 feeb 	bl	80055ac <_Bfree>
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	1e2b      	subs	r3, r5, #0
 80047e0:	bfaf      	iteee	ge
 80047e2:	2300      	movge	r3, #0
 80047e4:	2201      	movlt	r2, #1
 80047e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80047ea:	9307      	strlt	r3, [sp, #28]
 80047ec:	bfa8      	it	ge
 80047ee:	6033      	strge	r3, [r6, #0]
 80047f0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80047f4:	4b9c      	ldr	r3, [pc, #624]	@ (8004a68 <_dtoa_r+0x2e0>)
 80047f6:	bfb8      	it	lt
 80047f8:	6032      	strlt	r2, [r6, #0]
 80047fa:	ea33 0308 	bics.w	r3, r3, r8
 80047fe:	d112      	bne.n	8004826 <_dtoa_r+0x9e>
 8004800:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004804:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800480c:	4323      	orrs	r3, r4
 800480e:	f000 855e 	beq.w	80052ce <_dtoa_r+0xb46>
 8004812:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004814:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004a6c <_dtoa_r+0x2e4>
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8560 	beq.w	80052de <_dtoa_r+0xb56>
 800481e:	f10a 0303 	add.w	r3, sl, #3
 8004822:	f000 bd5a 	b.w	80052da <_dtoa_r+0xb52>
 8004826:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800482a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800482e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004832:	2200      	movs	r2, #0
 8004834:	2300      	movs	r3, #0
 8004836:	f7fc f8b7 	bl	80009a8 <__aeabi_dcmpeq>
 800483a:	4607      	mov	r7, r0
 800483c:	b158      	cbz	r0, 8004856 <_dtoa_r+0xce>
 800483e:	2301      	movs	r3, #1
 8004840:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004846:	b113      	cbz	r3, 800484e <_dtoa_r+0xc6>
 8004848:	4b89      	ldr	r3, [pc, #548]	@ (8004a70 <_dtoa_r+0x2e8>)
 800484a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8004a74 <_dtoa_r+0x2ec>
 8004852:	f000 bd44 	b.w	80052de <_dtoa_r+0xb56>
 8004856:	ab14      	add	r3, sp, #80	@ 0x50
 8004858:	9301      	str	r3, [sp, #4]
 800485a:	ab15      	add	r3, sp, #84	@ 0x54
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	4648      	mov	r0, r9
 8004860:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004864:	f001 f984 	bl	8005b70 <__d2b>
 8004868:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800486c:	9003      	str	r0, [sp, #12]
 800486e:	2e00      	cmp	r6, #0
 8004870:	d078      	beq.n	8004964 <_dtoa_r+0x1dc>
 8004872:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004878:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800487c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004880:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004884:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004888:	9712      	str	r7, [sp, #72]	@ 0x48
 800488a:	4619      	mov	r1, r3
 800488c:	2200      	movs	r2, #0
 800488e:	4b7a      	ldr	r3, [pc, #488]	@ (8004a78 <_dtoa_r+0x2f0>)
 8004890:	f7fb fc6a 	bl	8000168 <__aeabi_dsub>
 8004894:	a36c      	add	r3, pc, #432	@ (adr r3, 8004a48 <_dtoa_r+0x2c0>)
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	f7fb fe1d 	bl	80004d8 <__aeabi_dmul>
 800489e:	a36c      	add	r3, pc, #432	@ (adr r3, 8004a50 <_dtoa_r+0x2c8>)
 80048a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a4:	f7fb fc62 	bl	800016c <__adddf3>
 80048a8:	4604      	mov	r4, r0
 80048aa:	4630      	mov	r0, r6
 80048ac:	460d      	mov	r5, r1
 80048ae:	f7fb fda9 	bl	8000404 <__aeabi_i2d>
 80048b2:	a369      	add	r3, pc, #420	@ (adr r3, 8004a58 <_dtoa_r+0x2d0>)
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f7fb fe0e 	bl	80004d8 <__aeabi_dmul>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4620      	mov	r0, r4
 80048c2:	4629      	mov	r1, r5
 80048c4:	f7fb fc52 	bl	800016c <__adddf3>
 80048c8:	4604      	mov	r4, r0
 80048ca:	460d      	mov	r5, r1
 80048cc:	f7fc f8b4 	bl	8000a38 <__aeabi_d2iz>
 80048d0:	2200      	movs	r2, #0
 80048d2:	4607      	mov	r7, r0
 80048d4:	2300      	movs	r3, #0
 80048d6:	4620      	mov	r0, r4
 80048d8:	4629      	mov	r1, r5
 80048da:	f7fc f86f 	bl	80009bc <__aeabi_dcmplt>
 80048de:	b140      	cbz	r0, 80048f2 <_dtoa_r+0x16a>
 80048e0:	4638      	mov	r0, r7
 80048e2:	f7fb fd8f 	bl	8000404 <__aeabi_i2d>
 80048e6:	4622      	mov	r2, r4
 80048e8:	462b      	mov	r3, r5
 80048ea:	f7fc f85d 	bl	80009a8 <__aeabi_dcmpeq>
 80048ee:	b900      	cbnz	r0, 80048f2 <_dtoa_r+0x16a>
 80048f0:	3f01      	subs	r7, #1
 80048f2:	2f16      	cmp	r7, #22
 80048f4:	d854      	bhi.n	80049a0 <_dtoa_r+0x218>
 80048f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048fa:	4b60      	ldr	r3, [pc, #384]	@ (8004a7c <_dtoa_r+0x2f4>)
 80048fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f7fc f85a 	bl	80009bc <__aeabi_dcmplt>
 8004908:	2800      	cmp	r0, #0
 800490a:	d04b      	beq.n	80049a4 <_dtoa_r+0x21c>
 800490c:	2300      	movs	r3, #0
 800490e:	3f01      	subs	r7, #1
 8004910:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004912:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004914:	1b9b      	subs	r3, r3, r6
 8004916:	1e5a      	subs	r2, r3, #1
 8004918:	bf49      	itett	mi
 800491a:	f1c3 0301 	rsbmi	r3, r3, #1
 800491e:	2300      	movpl	r3, #0
 8004920:	9304      	strmi	r3, [sp, #16]
 8004922:	2300      	movmi	r3, #0
 8004924:	9209      	str	r2, [sp, #36]	@ 0x24
 8004926:	bf54      	ite	pl
 8004928:	9304      	strpl	r3, [sp, #16]
 800492a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800492c:	2f00      	cmp	r7, #0
 800492e:	db3b      	blt.n	80049a8 <_dtoa_r+0x220>
 8004930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004932:	970e      	str	r7, [sp, #56]	@ 0x38
 8004934:	443b      	add	r3, r7
 8004936:	9309      	str	r3, [sp, #36]	@ 0x24
 8004938:	2300      	movs	r3, #0
 800493a:	930a      	str	r3, [sp, #40]	@ 0x28
 800493c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800493e:	2b09      	cmp	r3, #9
 8004940:	d865      	bhi.n	8004a0e <_dtoa_r+0x286>
 8004942:	2b05      	cmp	r3, #5
 8004944:	bfc4      	itt	gt
 8004946:	3b04      	subgt	r3, #4
 8004948:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800494a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800494c:	bfc8      	it	gt
 800494e:	2400      	movgt	r4, #0
 8004950:	f1a3 0302 	sub.w	r3, r3, #2
 8004954:	bfd8      	it	le
 8004956:	2401      	movle	r4, #1
 8004958:	2b03      	cmp	r3, #3
 800495a:	d864      	bhi.n	8004a26 <_dtoa_r+0x29e>
 800495c:	e8df f003 	tbb	[pc, r3]
 8004960:	2c385553 	.word	0x2c385553
 8004964:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004968:	441e      	add	r6, r3
 800496a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800496e:	2b20      	cmp	r3, #32
 8004970:	bfc1      	itttt	gt
 8004972:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004976:	fa08 f803 	lslgt.w	r8, r8, r3
 800497a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800497e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004982:	bfd6      	itet	le
 8004984:	f1c3 0320 	rsble	r3, r3, #32
 8004988:	ea48 0003 	orrgt.w	r0, r8, r3
 800498c:	fa04 f003 	lslle.w	r0, r4, r3
 8004990:	f7fb fd28 	bl	80003e4 <__aeabi_ui2d>
 8004994:	2201      	movs	r2, #1
 8004996:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800499a:	3e01      	subs	r6, #1
 800499c:	9212      	str	r2, [sp, #72]	@ 0x48
 800499e:	e774      	b.n	800488a <_dtoa_r+0x102>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e7b5      	b.n	8004910 <_dtoa_r+0x188>
 80049a4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80049a6:	e7b4      	b.n	8004912 <_dtoa_r+0x18a>
 80049a8:	9b04      	ldr	r3, [sp, #16]
 80049aa:	1bdb      	subs	r3, r3, r7
 80049ac:	9304      	str	r3, [sp, #16]
 80049ae:	427b      	negs	r3, r7
 80049b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80049b2:	2300      	movs	r3, #0
 80049b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80049b6:	e7c1      	b.n	800493c <_dtoa_r+0x1b4>
 80049b8:	2301      	movs	r3, #1
 80049ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80049be:	eb07 0b03 	add.w	fp, r7, r3
 80049c2:	f10b 0301 	add.w	r3, fp, #1
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	9308      	str	r3, [sp, #32]
 80049ca:	bfb8      	it	lt
 80049cc:	2301      	movlt	r3, #1
 80049ce:	e006      	b.n	80049de <_dtoa_r+0x256>
 80049d0:	2301      	movs	r3, #1
 80049d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	dd28      	ble.n	8004a2c <_dtoa_r+0x2a4>
 80049da:	469b      	mov	fp, r3
 80049dc:	9308      	str	r3, [sp, #32]
 80049de:	2100      	movs	r1, #0
 80049e0:	2204      	movs	r2, #4
 80049e2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80049e6:	f102 0514 	add.w	r5, r2, #20
 80049ea:	429d      	cmp	r5, r3
 80049ec:	d926      	bls.n	8004a3c <_dtoa_r+0x2b4>
 80049ee:	6041      	str	r1, [r0, #4]
 80049f0:	4648      	mov	r0, r9
 80049f2:	f000 fd9b 	bl	800552c <_Balloc>
 80049f6:	4682      	mov	sl, r0
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d143      	bne.n	8004a84 <_dtoa_r+0x2fc>
 80049fc:	4602      	mov	r2, r0
 80049fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8004a02:	4b1f      	ldr	r3, [pc, #124]	@ (8004a80 <_dtoa_r+0x2f8>)
 8004a04:	e6d4      	b.n	80047b0 <_dtoa_r+0x28>
 8004a06:	2300      	movs	r3, #0
 8004a08:	e7e3      	b.n	80049d2 <_dtoa_r+0x24a>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e7d5      	b.n	80049ba <_dtoa_r+0x232>
 8004a0e:	2401      	movs	r4, #1
 8004a10:	2300      	movs	r3, #0
 8004a12:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004a14:	9320      	str	r3, [sp, #128]	@ 0x80
 8004a16:	f04f 3bff 	mov.w	fp, #4294967295
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2312      	movs	r3, #18
 8004a1e:	f8cd b020 	str.w	fp, [sp, #32]
 8004a22:	9221      	str	r2, [sp, #132]	@ 0x84
 8004a24:	e7db      	b.n	80049de <_dtoa_r+0x256>
 8004a26:	2301      	movs	r3, #1
 8004a28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a2a:	e7f4      	b.n	8004a16 <_dtoa_r+0x28e>
 8004a2c:	f04f 0b01 	mov.w	fp, #1
 8004a30:	465b      	mov	r3, fp
 8004a32:	f8cd b020 	str.w	fp, [sp, #32]
 8004a36:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004a3a:	e7d0      	b.n	80049de <_dtoa_r+0x256>
 8004a3c:	3101      	adds	r1, #1
 8004a3e:	0052      	lsls	r2, r2, #1
 8004a40:	e7d1      	b.n	80049e6 <_dtoa_r+0x25e>
 8004a42:	bf00      	nop
 8004a44:	f3af 8000 	nop.w
 8004a48:	636f4361 	.word	0x636f4361
 8004a4c:	3fd287a7 	.word	0x3fd287a7
 8004a50:	8b60c8b3 	.word	0x8b60c8b3
 8004a54:	3fc68a28 	.word	0x3fc68a28
 8004a58:	509f79fb 	.word	0x509f79fb
 8004a5c:	3fd34413 	.word	0x3fd34413
 8004a60:	08006797 	.word	0x08006797
 8004a64:	080067ae 	.word	0x080067ae
 8004a68:	7ff00000 	.word	0x7ff00000
 8004a6c:	08006793 	.word	0x08006793
 8004a70:	08006767 	.word	0x08006767
 8004a74:	08006766 	.word	0x08006766
 8004a78:	3ff80000 	.word	0x3ff80000
 8004a7c:	08006900 	.word	0x08006900
 8004a80:	08006806 	.word	0x08006806
 8004a84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004a88:	6018      	str	r0, [r3, #0]
 8004a8a:	9b08      	ldr	r3, [sp, #32]
 8004a8c:	2b0e      	cmp	r3, #14
 8004a8e:	f200 80a1 	bhi.w	8004bd4 <_dtoa_r+0x44c>
 8004a92:	2c00      	cmp	r4, #0
 8004a94:	f000 809e 	beq.w	8004bd4 <_dtoa_r+0x44c>
 8004a98:	2f00      	cmp	r7, #0
 8004a9a:	dd33      	ble.n	8004b04 <_dtoa_r+0x37c>
 8004a9c:	4b9c      	ldr	r3, [pc, #624]	@ (8004d10 <_dtoa_r+0x588>)
 8004a9e:	f007 020f 	and.w	r2, r7, #15
 8004aa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004aa6:	05f8      	lsls	r0, r7, #23
 8004aa8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004aac:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004ab0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004ab4:	d516      	bpl.n	8004ae4 <_dtoa_r+0x35c>
 8004ab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004aba:	4b96      	ldr	r3, [pc, #600]	@ (8004d14 <_dtoa_r+0x58c>)
 8004abc:	2603      	movs	r6, #3
 8004abe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ac2:	f7fb fe33 	bl	800072c <__aeabi_ddiv>
 8004ac6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004aca:	f004 040f 	and.w	r4, r4, #15
 8004ace:	4d91      	ldr	r5, [pc, #580]	@ (8004d14 <_dtoa_r+0x58c>)
 8004ad0:	b954      	cbnz	r4, 8004ae8 <_dtoa_r+0x360>
 8004ad2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ad6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ada:	f7fb fe27 	bl	800072c <__aeabi_ddiv>
 8004ade:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ae2:	e028      	b.n	8004b36 <_dtoa_r+0x3ae>
 8004ae4:	2602      	movs	r6, #2
 8004ae6:	e7f2      	b.n	8004ace <_dtoa_r+0x346>
 8004ae8:	07e1      	lsls	r1, r4, #31
 8004aea:	d508      	bpl.n	8004afe <_dtoa_r+0x376>
 8004aec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004af0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004af4:	f7fb fcf0 	bl	80004d8 <__aeabi_dmul>
 8004af8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004afc:	3601      	adds	r6, #1
 8004afe:	1064      	asrs	r4, r4, #1
 8004b00:	3508      	adds	r5, #8
 8004b02:	e7e5      	b.n	8004ad0 <_dtoa_r+0x348>
 8004b04:	f000 80af 	beq.w	8004c66 <_dtoa_r+0x4de>
 8004b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b0c:	427c      	negs	r4, r7
 8004b0e:	4b80      	ldr	r3, [pc, #512]	@ (8004d10 <_dtoa_r+0x588>)
 8004b10:	f004 020f 	and.w	r2, r4, #15
 8004b14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f7fb fcdc 	bl	80004d8 <__aeabi_dmul>
 8004b20:	2602      	movs	r6, #2
 8004b22:	2300      	movs	r3, #0
 8004b24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b28:	4d7a      	ldr	r5, [pc, #488]	@ (8004d14 <_dtoa_r+0x58c>)
 8004b2a:	1124      	asrs	r4, r4, #4
 8004b2c:	2c00      	cmp	r4, #0
 8004b2e:	f040 808f 	bne.w	8004c50 <_dtoa_r+0x4c8>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1d3      	bne.n	8004ade <_dtoa_r+0x356>
 8004b36:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004b3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 8094 	beq.w	8004c6a <_dtoa_r+0x4e2>
 8004b42:	2200      	movs	r2, #0
 8004b44:	4620      	mov	r0, r4
 8004b46:	4629      	mov	r1, r5
 8004b48:	4b73      	ldr	r3, [pc, #460]	@ (8004d18 <_dtoa_r+0x590>)
 8004b4a:	f7fb ff37 	bl	80009bc <__aeabi_dcmplt>
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	f000 808b 	beq.w	8004c6a <_dtoa_r+0x4e2>
 8004b54:	9b08      	ldr	r3, [sp, #32]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 8087 	beq.w	8004c6a <_dtoa_r+0x4e2>
 8004b5c:	f1bb 0f00 	cmp.w	fp, #0
 8004b60:	dd34      	ble.n	8004bcc <_dtoa_r+0x444>
 8004b62:	4620      	mov	r0, r4
 8004b64:	2200      	movs	r2, #0
 8004b66:	4629      	mov	r1, r5
 8004b68:	4b6c      	ldr	r3, [pc, #432]	@ (8004d1c <_dtoa_r+0x594>)
 8004b6a:	f7fb fcb5 	bl	80004d8 <__aeabi_dmul>
 8004b6e:	465c      	mov	r4, fp
 8004b70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b74:	f107 38ff 	add.w	r8, r7, #4294967295
 8004b78:	3601      	adds	r6, #1
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	f7fb fc42 	bl	8000404 <__aeabi_i2d>
 8004b80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b84:	f7fb fca8 	bl	80004d8 <__aeabi_dmul>
 8004b88:	2200      	movs	r2, #0
 8004b8a:	4b65      	ldr	r3, [pc, #404]	@ (8004d20 <_dtoa_r+0x598>)
 8004b8c:	f7fb faee 	bl	800016c <__adddf3>
 8004b90:	4605      	mov	r5, r0
 8004b92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004b96:	2c00      	cmp	r4, #0
 8004b98:	d16a      	bne.n	8004c70 <_dtoa_r+0x4e8>
 8004b9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	4b60      	ldr	r3, [pc, #384]	@ (8004d24 <_dtoa_r+0x59c>)
 8004ba2:	f7fb fae1 	bl	8000168 <__aeabi_dsub>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004bae:	462a      	mov	r2, r5
 8004bb0:	4633      	mov	r3, r6
 8004bb2:	f7fb ff21 	bl	80009f8 <__aeabi_dcmpgt>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	f040 8298 	bne.w	80050ec <_dtoa_r+0x964>
 8004bbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bc0:	462a      	mov	r2, r5
 8004bc2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004bc6:	f7fb fef9 	bl	80009bc <__aeabi_dcmplt>
 8004bca:	bb38      	cbnz	r0, 8004c1c <_dtoa_r+0x494>
 8004bcc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004bd0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004bd4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f2c0 8157 	blt.w	8004e8a <_dtoa_r+0x702>
 8004bdc:	2f0e      	cmp	r7, #14
 8004bde:	f300 8154 	bgt.w	8004e8a <_dtoa_r+0x702>
 8004be2:	4b4b      	ldr	r3, [pc, #300]	@ (8004d10 <_dtoa_r+0x588>)
 8004be4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004be8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004bec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004bf0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f280 80e5 	bge.w	8004dc2 <_dtoa_r+0x63a>
 8004bf8:	9b08      	ldr	r3, [sp, #32]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f300 80e1 	bgt.w	8004dc2 <_dtoa_r+0x63a>
 8004c00:	d10c      	bne.n	8004c1c <_dtoa_r+0x494>
 8004c02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c06:	2200      	movs	r2, #0
 8004c08:	4b46      	ldr	r3, [pc, #280]	@ (8004d24 <_dtoa_r+0x59c>)
 8004c0a:	f7fb fc65 	bl	80004d8 <__aeabi_dmul>
 8004c0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c12:	f7fb fee7 	bl	80009e4 <__aeabi_dcmpge>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	f000 8266 	beq.w	80050e8 <_dtoa_r+0x960>
 8004c1c:	2400      	movs	r4, #0
 8004c1e:	4625      	mov	r5, r4
 8004c20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c22:	4656      	mov	r6, sl
 8004c24:	ea6f 0803 	mvn.w	r8, r3
 8004c28:	2700      	movs	r7, #0
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	4648      	mov	r0, r9
 8004c2e:	f000 fcbd 	bl	80055ac <_Bfree>
 8004c32:	2d00      	cmp	r5, #0
 8004c34:	f000 80bd 	beq.w	8004db2 <_dtoa_r+0x62a>
 8004c38:	b12f      	cbz	r7, 8004c46 <_dtoa_r+0x4be>
 8004c3a:	42af      	cmp	r7, r5
 8004c3c:	d003      	beq.n	8004c46 <_dtoa_r+0x4be>
 8004c3e:	4639      	mov	r1, r7
 8004c40:	4648      	mov	r0, r9
 8004c42:	f000 fcb3 	bl	80055ac <_Bfree>
 8004c46:	4629      	mov	r1, r5
 8004c48:	4648      	mov	r0, r9
 8004c4a:	f000 fcaf 	bl	80055ac <_Bfree>
 8004c4e:	e0b0      	b.n	8004db2 <_dtoa_r+0x62a>
 8004c50:	07e2      	lsls	r2, r4, #31
 8004c52:	d505      	bpl.n	8004c60 <_dtoa_r+0x4d8>
 8004c54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c58:	f7fb fc3e 	bl	80004d8 <__aeabi_dmul>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	3601      	adds	r6, #1
 8004c60:	1064      	asrs	r4, r4, #1
 8004c62:	3508      	adds	r5, #8
 8004c64:	e762      	b.n	8004b2c <_dtoa_r+0x3a4>
 8004c66:	2602      	movs	r6, #2
 8004c68:	e765      	b.n	8004b36 <_dtoa_r+0x3ae>
 8004c6a:	46b8      	mov	r8, r7
 8004c6c:	9c08      	ldr	r4, [sp, #32]
 8004c6e:	e784      	b.n	8004b7a <_dtoa_r+0x3f2>
 8004c70:	4b27      	ldr	r3, [pc, #156]	@ (8004d10 <_dtoa_r+0x588>)
 8004c72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004c74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c7c:	4454      	add	r4, sl
 8004c7e:	2900      	cmp	r1, #0
 8004c80:	d054      	beq.n	8004d2c <_dtoa_r+0x5a4>
 8004c82:	2000      	movs	r0, #0
 8004c84:	4928      	ldr	r1, [pc, #160]	@ (8004d28 <_dtoa_r+0x5a0>)
 8004c86:	f7fb fd51 	bl	800072c <__aeabi_ddiv>
 8004c8a:	4633      	mov	r3, r6
 8004c8c:	462a      	mov	r2, r5
 8004c8e:	f7fb fa6b 	bl	8000168 <__aeabi_dsub>
 8004c92:	4656      	mov	r6, sl
 8004c94:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004c98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c9c:	f7fb fecc 	bl	8000a38 <__aeabi_d2iz>
 8004ca0:	4605      	mov	r5, r0
 8004ca2:	f7fb fbaf 	bl	8000404 <__aeabi_i2d>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cae:	f7fb fa5b 	bl	8000168 <__aeabi_dsub>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	3530      	adds	r5, #48	@ 0x30
 8004cb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004cbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004cc0:	f806 5b01 	strb.w	r5, [r6], #1
 8004cc4:	f7fb fe7a 	bl	80009bc <__aeabi_dcmplt>
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	d172      	bne.n	8004db2 <_dtoa_r+0x62a>
 8004ccc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	4911      	ldr	r1, [pc, #68]	@ (8004d18 <_dtoa_r+0x590>)
 8004cd4:	f7fb fa48 	bl	8000168 <__aeabi_dsub>
 8004cd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004cdc:	f7fb fe6e 	bl	80009bc <__aeabi_dcmplt>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	f040 80b4 	bne.w	8004e4e <_dtoa_r+0x6c6>
 8004ce6:	42a6      	cmp	r6, r4
 8004ce8:	f43f af70 	beq.w	8004bcc <_dtoa_r+0x444>
 8004cec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004d1c <_dtoa_r+0x594>)
 8004cf4:	f7fb fbf0 	bl	80004d8 <__aeabi_dmul>
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004cfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d02:	4b06      	ldr	r3, [pc, #24]	@ (8004d1c <_dtoa_r+0x594>)
 8004d04:	f7fb fbe8 	bl	80004d8 <__aeabi_dmul>
 8004d08:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004d0c:	e7c4      	b.n	8004c98 <_dtoa_r+0x510>
 8004d0e:	bf00      	nop
 8004d10:	08006900 	.word	0x08006900
 8004d14:	080068d8 	.word	0x080068d8
 8004d18:	3ff00000 	.word	0x3ff00000
 8004d1c:	40240000 	.word	0x40240000
 8004d20:	401c0000 	.word	0x401c0000
 8004d24:	40140000 	.word	0x40140000
 8004d28:	3fe00000 	.word	0x3fe00000
 8004d2c:	4631      	mov	r1, r6
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f7fb fbd2 	bl	80004d8 <__aeabi_dmul>
 8004d34:	4656      	mov	r6, sl
 8004d36:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d3a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004d3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d40:	f7fb fe7a 	bl	8000a38 <__aeabi_d2iz>
 8004d44:	4605      	mov	r5, r0
 8004d46:	f7fb fb5d 	bl	8000404 <__aeabi_i2d>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d52:	f7fb fa09 	bl	8000168 <__aeabi_dsub>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	3530      	adds	r5, #48	@ 0x30
 8004d5c:	f806 5b01 	strb.w	r5, [r6], #1
 8004d60:	42a6      	cmp	r6, r4
 8004d62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	d124      	bne.n	8004db6 <_dtoa_r+0x62e>
 8004d6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004d70:	4bae      	ldr	r3, [pc, #696]	@ (800502c <_dtoa_r+0x8a4>)
 8004d72:	f7fb f9fb 	bl	800016c <__adddf3>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d7e:	f7fb fe3b 	bl	80009f8 <__aeabi_dcmpgt>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d163      	bne.n	8004e4e <_dtoa_r+0x6c6>
 8004d86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	49a7      	ldr	r1, [pc, #668]	@ (800502c <_dtoa_r+0x8a4>)
 8004d8e:	f7fb f9eb 	bl	8000168 <__aeabi_dsub>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d9a:	f7fb fe0f 	bl	80009bc <__aeabi_dcmplt>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	f43f af14 	beq.w	8004bcc <_dtoa_r+0x444>
 8004da4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004da6:	1e73      	subs	r3, r6, #1
 8004da8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004daa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004dae:	2b30      	cmp	r3, #48	@ 0x30
 8004db0:	d0f8      	beq.n	8004da4 <_dtoa_r+0x61c>
 8004db2:	4647      	mov	r7, r8
 8004db4:	e03b      	b.n	8004e2e <_dtoa_r+0x6a6>
 8004db6:	4b9e      	ldr	r3, [pc, #632]	@ (8005030 <_dtoa_r+0x8a8>)
 8004db8:	f7fb fb8e 	bl	80004d8 <__aeabi_dmul>
 8004dbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004dc0:	e7bc      	b.n	8004d3c <_dtoa_r+0x5b4>
 8004dc2:	4656      	mov	r6, sl
 8004dc4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004dc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dcc:	4620      	mov	r0, r4
 8004dce:	4629      	mov	r1, r5
 8004dd0:	f7fb fcac 	bl	800072c <__aeabi_ddiv>
 8004dd4:	f7fb fe30 	bl	8000a38 <__aeabi_d2iz>
 8004dd8:	4680      	mov	r8, r0
 8004dda:	f7fb fb13 	bl	8000404 <__aeabi_i2d>
 8004dde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004de2:	f7fb fb79 	bl	80004d8 <__aeabi_dmul>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4620      	mov	r0, r4
 8004dec:	4629      	mov	r1, r5
 8004dee:	f7fb f9bb 	bl	8000168 <__aeabi_dsub>
 8004df2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004df6:	9d08      	ldr	r5, [sp, #32]
 8004df8:	f806 4b01 	strb.w	r4, [r6], #1
 8004dfc:	eba6 040a 	sub.w	r4, r6, sl
 8004e00:	42a5      	cmp	r5, r4
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	d133      	bne.n	8004e70 <_dtoa_r+0x6e8>
 8004e08:	f7fb f9b0 	bl	800016c <__adddf3>
 8004e0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e10:	4604      	mov	r4, r0
 8004e12:	460d      	mov	r5, r1
 8004e14:	f7fb fdf0 	bl	80009f8 <__aeabi_dcmpgt>
 8004e18:	b9c0      	cbnz	r0, 8004e4c <_dtoa_r+0x6c4>
 8004e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e1e:	4620      	mov	r0, r4
 8004e20:	4629      	mov	r1, r5
 8004e22:	f7fb fdc1 	bl	80009a8 <__aeabi_dcmpeq>
 8004e26:	b110      	cbz	r0, 8004e2e <_dtoa_r+0x6a6>
 8004e28:	f018 0f01 	tst.w	r8, #1
 8004e2c:	d10e      	bne.n	8004e4c <_dtoa_r+0x6c4>
 8004e2e:	4648      	mov	r0, r9
 8004e30:	9903      	ldr	r1, [sp, #12]
 8004e32:	f000 fbbb 	bl	80055ac <_Bfree>
 8004e36:	2300      	movs	r3, #0
 8004e38:	7033      	strb	r3, [r6, #0]
 8004e3a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004e3c:	3701      	adds	r7, #1
 8004e3e:	601f      	str	r7, [r3, #0]
 8004e40:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 824b 	beq.w	80052de <_dtoa_r+0xb56>
 8004e48:	601e      	str	r6, [r3, #0]
 8004e4a:	e248      	b.n	80052de <_dtoa_r+0xb56>
 8004e4c:	46b8      	mov	r8, r7
 8004e4e:	4633      	mov	r3, r6
 8004e50:	461e      	mov	r6, r3
 8004e52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e56:	2a39      	cmp	r2, #57	@ 0x39
 8004e58:	d106      	bne.n	8004e68 <_dtoa_r+0x6e0>
 8004e5a:	459a      	cmp	sl, r3
 8004e5c:	d1f8      	bne.n	8004e50 <_dtoa_r+0x6c8>
 8004e5e:	2230      	movs	r2, #48	@ 0x30
 8004e60:	f108 0801 	add.w	r8, r8, #1
 8004e64:	f88a 2000 	strb.w	r2, [sl]
 8004e68:	781a      	ldrb	r2, [r3, #0]
 8004e6a:	3201      	adds	r2, #1
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	e7a0      	b.n	8004db2 <_dtoa_r+0x62a>
 8004e70:	2200      	movs	r2, #0
 8004e72:	4b6f      	ldr	r3, [pc, #444]	@ (8005030 <_dtoa_r+0x8a8>)
 8004e74:	f7fb fb30 	bl	80004d8 <__aeabi_dmul>
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	460d      	mov	r5, r1
 8004e80:	f7fb fd92 	bl	80009a8 <__aeabi_dcmpeq>
 8004e84:	2800      	cmp	r0, #0
 8004e86:	d09f      	beq.n	8004dc8 <_dtoa_r+0x640>
 8004e88:	e7d1      	b.n	8004e2e <_dtoa_r+0x6a6>
 8004e8a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004e8c:	2a00      	cmp	r2, #0
 8004e8e:	f000 80ea 	beq.w	8005066 <_dtoa_r+0x8de>
 8004e92:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004e94:	2a01      	cmp	r2, #1
 8004e96:	f300 80cd 	bgt.w	8005034 <_dtoa_r+0x8ac>
 8004e9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004e9c:	2a00      	cmp	r2, #0
 8004e9e:	f000 80c1 	beq.w	8005024 <_dtoa_r+0x89c>
 8004ea2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004ea6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ea8:	9e04      	ldr	r6, [sp, #16]
 8004eaa:	9a04      	ldr	r2, [sp, #16]
 8004eac:	2101      	movs	r1, #1
 8004eae:	441a      	add	r2, r3
 8004eb0:	9204      	str	r2, [sp, #16]
 8004eb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004eb4:	4648      	mov	r0, r9
 8004eb6:	441a      	add	r2, r3
 8004eb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004eba:	f000 fc2b 	bl	8005714 <__i2b>
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	b166      	cbz	r6, 8004edc <_dtoa_r+0x754>
 8004ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	dd09      	ble.n	8004edc <_dtoa_r+0x754>
 8004ec8:	42b3      	cmp	r3, r6
 8004eca:	bfa8      	it	ge
 8004ecc:	4633      	movge	r3, r6
 8004ece:	9a04      	ldr	r2, [sp, #16]
 8004ed0:	1af6      	subs	r6, r6, r3
 8004ed2:	1ad2      	subs	r2, r2, r3
 8004ed4:	9204      	str	r2, [sp, #16]
 8004ed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8004edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ede:	b30b      	cbz	r3, 8004f24 <_dtoa_r+0x79c>
 8004ee0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 80c6 	beq.w	8005074 <_dtoa_r+0x8ec>
 8004ee8:	2c00      	cmp	r4, #0
 8004eea:	f000 80c0 	beq.w	800506e <_dtoa_r+0x8e6>
 8004eee:	4629      	mov	r1, r5
 8004ef0:	4622      	mov	r2, r4
 8004ef2:	4648      	mov	r0, r9
 8004ef4:	f000 fcc6 	bl	8005884 <__pow5mult>
 8004ef8:	9a03      	ldr	r2, [sp, #12]
 8004efa:	4601      	mov	r1, r0
 8004efc:	4605      	mov	r5, r0
 8004efe:	4648      	mov	r0, r9
 8004f00:	f000 fc1e 	bl	8005740 <__multiply>
 8004f04:	9903      	ldr	r1, [sp, #12]
 8004f06:	4680      	mov	r8, r0
 8004f08:	4648      	mov	r0, r9
 8004f0a:	f000 fb4f 	bl	80055ac <_Bfree>
 8004f0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f10:	1b1b      	subs	r3, r3, r4
 8004f12:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f14:	f000 80b1 	beq.w	800507a <_dtoa_r+0x8f2>
 8004f18:	4641      	mov	r1, r8
 8004f1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f1c:	4648      	mov	r0, r9
 8004f1e:	f000 fcb1 	bl	8005884 <__pow5mult>
 8004f22:	9003      	str	r0, [sp, #12]
 8004f24:	2101      	movs	r1, #1
 8004f26:	4648      	mov	r0, r9
 8004f28:	f000 fbf4 	bl	8005714 <__i2b>
 8004f2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f2e:	4604      	mov	r4, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 81d8 	beq.w	80052e6 <_dtoa_r+0xb5e>
 8004f36:	461a      	mov	r2, r3
 8004f38:	4601      	mov	r1, r0
 8004f3a:	4648      	mov	r0, r9
 8004f3c:	f000 fca2 	bl	8005884 <__pow5mult>
 8004f40:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f42:	4604      	mov	r4, r0
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	f300 809f 	bgt.w	8005088 <_dtoa_r+0x900>
 8004f4a:	9b06      	ldr	r3, [sp, #24]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f040 8097 	bne.w	8005080 <_dtoa_r+0x8f8>
 8004f52:	9b07      	ldr	r3, [sp, #28]
 8004f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f040 8093 	bne.w	8005084 <_dtoa_r+0x8fc>
 8004f5e:	9b07      	ldr	r3, [sp, #28]
 8004f60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f64:	0d1b      	lsrs	r3, r3, #20
 8004f66:	051b      	lsls	r3, r3, #20
 8004f68:	b133      	cbz	r3, 8004f78 <_dtoa_r+0x7f0>
 8004f6a:	9b04      	ldr	r3, [sp, #16]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	9304      	str	r3, [sp, #16]
 8004f70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f72:	3301      	adds	r3, #1
 8004f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f76:	2301      	movs	r3, #1
 8004f78:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 81b8 	beq.w	80052f2 <_dtoa_r+0xb6a>
 8004f82:	6923      	ldr	r3, [r4, #16]
 8004f84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f88:	6918      	ldr	r0, [r3, #16]
 8004f8a:	f000 fb77 	bl	800567c <__hi0bits>
 8004f8e:	f1c0 0020 	rsb	r0, r0, #32
 8004f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f94:	4418      	add	r0, r3
 8004f96:	f010 001f 	ands.w	r0, r0, #31
 8004f9a:	f000 8082 	beq.w	80050a2 <_dtoa_r+0x91a>
 8004f9e:	f1c0 0320 	rsb	r3, r0, #32
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	dd73      	ble.n	800508e <_dtoa_r+0x906>
 8004fa6:	9b04      	ldr	r3, [sp, #16]
 8004fa8:	f1c0 001c 	rsb	r0, r0, #28
 8004fac:	4403      	add	r3, r0
 8004fae:	9304      	str	r3, [sp, #16]
 8004fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fb2:	4406      	add	r6, r0
 8004fb4:	4403      	add	r3, r0
 8004fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fb8:	9b04      	ldr	r3, [sp, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	dd05      	ble.n	8004fca <_dtoa_r+0x842>
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	4648      	mov	r0, r9
 8004fc2:	9903      	ldr	r1, [sp, #12]
 8004fc4:	f000 fcb8 	bl	8005938 <__lshift>
 8004fc8:	9003      	str	r0, [sp, #12]
 8004fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dd05      	ble.n	8004fdc <_dtoa_r+0x854>
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	4648      	mov	r0, r9
 8004fd6:	f000 fcaf 	bl	8005938 <__lshift>
 8004fda:	4604      	mov	r4, r0
 8004fdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d061      	beq.n	80050a6 <_dtoa_r+0x91e>
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	9803      	ldr	r0, [sp, #12]
 8004fe6:	f000 fd13 	bl	8005a10 <__mcmp>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	da5b      	bge.n	80050a6 <_dtoa_r+0x91e>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	220a      	movs	r2, #10
 8004ff2:	4648      	mov	r0, r9
 8004ff4:	9903      	ldr	r1, [sp, #12]
 8004ff6:	f000 fafb 	bl	80055f0 <__multadd>
 8004ffa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ffc:	f107 38ff 	add.w	r8, r7, #4294967295
 8005000:	9003      	str	r0, [sp, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8177 	beq.w	80052f6 <_dtoa_r+0xb6e>
 8005008:	4629      	mov	r1, r5
 800500a:	2300      	movs	r3, #0
 800500c:	220a      	movs	r2, #10
 800500e:	4648      	mov	r0, r9
 8005010:	f000 faee 	bl	80055f0 <__multadd>
 8005014:	f1bb 0f00 	cmp.w	fp, #0
 8005018:	4605      	mov	r5, r0
 800501a:	dc6f      	bgt.n	80050fc <_dtoa_r+0x974>
 800501c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800501e:	2b02      	cmp	r3, #2
 8005020:	dc49      	bgt.n	80050b6 <_dtoa_r+0x92e>
 8005022:	e06b      	b.n	80050fc <_dtoa_r+0x974>
 8005024:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005026:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800502a:	e73c      	b.n	8004ea6 <_dtoa_r+0x71e>
 800502c:	3fe00000 	.word	0x3fe00000
 8005030:	40240000 	.word	0x40240000
 8005034:	9b08      	ldr	r3, [sp, #32]
 8005036:	1e5c      	subs	r4, r3, #1
 8005038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800503a:	42a3      	cmp	r3, r4
 800503c:	db09      	blt.n	8005052 <_dtoa_r+0x8ca>
 800503e:	1b1c      	subs	r4, r3, r4
 8005040:	9b08      	ldr	r3, [sp, #32]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f6bf af30 	bge.w	8004ea8 <_dtoa_r+0x720>
 8005048:	9b04      	ldr	r3, [sp, #16]
 800504a:	9a08      	ldr	r2, [sp, #32]
 800504c:	1a9e      	subs	r6, r3, r2
 800504e:	2300      	movs	r3, #0
 8005050:	e72b      	b.n	8004eaa <_dtoa_r+0x722>
 8005052:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005054:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005056:	1ae3      	subs	r3, r4, r3
 8005058:	441a      	add	r2, r3
 800505a:	940a      	str	r4, [sp, #40]	@ 0x28
 800505c:	9e04      	ldr	r6, [sp, #16]
 800505e:	2400      	movs	r4, #0
 8005060:	9b08      	ldr	r3, [sp, #32]
 8005062:	920e      	str	r2, [sp, #56]	@ 0x38
 8005064:	e721      	b.n	8004eaa <_dtoa_r+0x722>
 8005066:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005068:	9e04      	ldr	r6, [sp, #16]
 800506a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800506c:	e728      	b.n	8004ec0 <_dtoa_r+0x738>
 800506e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005072:	e751      	b.n	8004f18 <_dtoa_r+0x790>
 8005074:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005076:	9903      	ldr	r1, [sp, #12]
 8005078:	e750      	b.n	8004f1c <_dtoa_r+0x794>
 800507a:	f8cd 800c 	str.w	r8, [sp, #12]
 800507e:	e751      	b.n	8004f24 <_dtoa_r+0x79c>
 8005080:	2300      	movs	r3, #0
 8005082:	e779      	b.n	8004f78 <_dtoa_r+0x7f0>
 8005084:	9b06      	ldr	r3, [sp, #24]
 8005086:	e777      	b.n	8004f78 <_dtoa_r+0x7f0>
 8005088:	2300      	movs	r3, #0
 800508a:	930a      	str	r3, [sp, #40]	@ 0x28
 800508c:	e779      	b.n	8004f82 <_dtoa_r+0x7fa>
 800508e:	d093      	beq.n	8004fb8 <_dtoa_r+0x830>
 8005090:	9a04      	ldr	r2, [sp, #16]
 8005092:	331c      	adds	r3, #28
 8005094:	441a      	add	r2, r3
 8005096:	9204      	str	r2, [sp, #16]
 8005098:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800509a:	441e      	add	r6, r3
 800509c:	441a      	add	r2, r3
 800509e:	9209      	str	r2, [sp, #36]	@ 0x24
 80050a0:	e78a      	b.n	8004fb8 <_dtoa_r+0x830>
 80050a2:	4603      	mov	r3, r0
 80050a4:	e7f4      	b.n	8005090 <_dtoa_r+0x908>
 80050a6:	9b08      	ldr	r3, [sp, #32]
 80050a8:	46b8      	mov	r8, r7
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	dc20      	bgt.n	80050f0 <_dtoa_r+0x968>
 80050ae:	469b      	mov	fp, r3
 80050b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	dd1e      	ble.n	80050f4 <_dtoa_r+0x96c>
 80050b6:	f1bb 0f00 	cmp.w	fp, #0
 80050ba:	f47f adb1 	bne.w	8004c20 <_dtoa_r+0x498>
 80050be:	4621      	mov	r1, r4
 80050c0:	465b      	mov	r3, fp
 80050c2:	2205      	movs	r2, #5
 80050c4:	4648      	mov	r0, r9
 80050c6:	f000 fa93 	bl	80055f0 <__multadd>
 80050ca:	4601      	mov	r1, r0
 80050cc:	4604      	mov	r4, r0
 80050ce:	9803      	ldr	r0, [sp, #12]
 80050d0:	f000 fc9e 	bl	8005a10 <__mcmp>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	f77f ada3 	ble.w	8004c20 <_dtoa_r+0x498>
 80050da:	4656      	mov	r6, sl
 80050dc:	2331      	movs	r3, #49	@ 0x31
 80050de:	f108 0801 	add.w	r8, r8, #1
 80050e2:	f806 3b01 	strb.w	r3, [r6], #1
 80050e6:	e59f      	b.n	8004c28 <_dtoa_r+0x4a0>
 80050e8:	46b8      	mov	r8, r7
 80050ea:	9c08      	ldr	r4, [sp, #32]
 80050ec:	4625      	mov	r5, r4
 80050ee:	e7f4      	b.n	80050da <_dtoa_r+0x952>
 80050f0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80050f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 8101 	beq.w	80052fe <_dtoa_r+0xb76>
 80050fc:	2e00      	cmp	r6, #0
 80050fe:	dd05      	ble.n	800510c <_dtoa_r+0x984>
 8005100:	4629      	mov	r1, r5
 8005102:	4632      	mov	r2, r6
 8005104:	4648      	mov	r0, r9
 8005106:	f000 fc17 	bl	8005938 <__lshift>
 800510a:	4605      	mov	r5, r0
 800510c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800510e:	2b00      	cmp	r3, #0
 8005110:	d05c      	beq.n	80051cc <_dtoa_r+0xa44>
 8005112:	4648      	mov	r0, r9
 8005114:	6869      	ldr	r1, [r5, #4]
 8005116:	f000 fa09 	bl	800552c <_Balloc>
 800511a:	4606      	mov	r6, r0
 800511c:	b928      	cbnz	r0, 800512a <_dtoa_r+0x9a2>
 800511e:	4602      	mov	r2, r0
 8005120:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005124:	4b80      	ldr	r3, [pc, #512]	@ (8005328 <_dtoa_r+0xba0>)
 8005126:	f7ff bb43 	b.w	80047b0 <_dtoa_r+0x28>
 800512a:	692a      	ldr	r2, [r5, #16]
 800512c:	f105 010c 	add.w	r1, r5, #12
 8005130:	3202      	adds	r2, #2
 8005132:	0092      	lsls	r2, r2, #2
 8005134:	300c      	adds	r0, #12
 8005136:	f000 ff9d 	bl	8006074 <memcpy>
 800513a:	2201      	movs	r2, #1
 800513c:	4631      	mov	r1, r6
 800513e:	4648      	mov	r0, r9
 8005140:	f000 fbfa 	bl	8005938 <__lshift>
 8005144:	462f      	mov	r7, r5
 8005146:	4605      	mov	r5, r0
 8005148:	f10a 0301 	add.w	r3, sl, #1
 800514c:	9304      	str	r3, [sp, #16]
 800514e:	eb0a 030b 	add.w	r3, sl, fp
 8005152:	930a      	str	r3, [sp, #40]	@ 0x28
 8005154:	9b06      	ldr	r3, [sp, #24]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	9309      	str	r3, [sp, #36]	@ 0x24
 800515c:	9b04      	ldr	r3, [sp, #16]
 800515e:	4621      	mov	r1, r4
 8005160:	9803      	ldr	r0, [sp, #12]
 8005162:	f103 3bff 	add.w	fp, r3, #4294967295
 8005166:	f7ff fa84 	bl	8004672 <quorem>
 800516a:	4603      	mov	r3, r0
 800516c:	4639      	mov	r1, r7
 800516e:	3330      	adds	r3, #48	@ 0x30
 8005170:	9006      	str	r0, [sp, #24]
 8005172:	9803      	ldr	r0, [sp, #12]
 8005174:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005176:	f000 fc4b 	bl	8005a10 <__mcmp>
 800517a:	462a      	mov	r2, r5
 800517c:	9008      	str	r0, [sp, #32]
 800517e:	4621      	mov	r1, r4
 8005180:	4648      	mov	r0, r9
 8005182:	f000 fc61 	bl	8005a48 <__mdiff>
 8005186:	68c2      	ldr	r2, [r0, #12]
 8005188:	4606      	mov	r6, r0
 800518a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800518c:	bb02      	cbnz	r2, 80051d0 <_dtoa_r+0xa48>
 800518e:	4601      	mov	r1, r0
 8005190:	9803      	ldr	r0, [sp, #12]
 8005192:	f000 fc3d 	bl	8005a10 <__mcmp>
 8005196:	4602      	mov	r2, r0
 8005198:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800519a:	4631      	mov	r1, r6
 800519c:	4648      	mov	r0, r9
 800519e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80051a2:	f000 fa03 	bl	80055ac <_Bfree>
 80051a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80051aa:	9e04      	ldr	r6, [sp, #16]
 80051ac:	ea42 0103 	orr.w	r1, r2, r3
 80051b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051b2:	4319      	orrs	r1, r3
 80051b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051b6:	d10d      	bne.n	80051d4 <_dtoa_r+0xa4c>
 80051b8:	2b39      	cmp	r3, #57	@ 0x39
 80051ba:	d027      	beq.n	800520c <_dtoa_r+0xa84>
 80051bc:	9a08      	ldr	r2, [sp, #32]
 80051be:	2a00      	cmp	r2, #0
 80051c0:	dd01      	ble.n	80051c6 <_dtoa_r+0xa3e>
 80051c2:	9b06      	ldr	r3, [sp, #24]
 80051c4:	3331      	adds	r3, #49	@ 0x31
 80051c6:	f88b 3000 	strb.w	r3, [fp]
 80051ca:	e52e      	b.n	8004c2a <_dtoa_r+0x4a2>
 80051cc:	4628      	mov	r0, r5
 80051ce:	e7b9      	b.n	8005144 <_dtoa_r+0x9bc>
 80051d0:	2201      	movs	r2, #1
 80051d2:	e7e2      	b.n	800519a <_dtoa_r+0xa12>
 80051d4:	9908      	ldr	r1, [sp, #32]
 80051d6:	2900      	cmp	r1, #0
 80051d8:	db04      	blt.n	80051e4 <_dtoa_r+0xa5c>
 80051da:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80051dc:	4301      	orrs	r1, r0
 80051de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051e0:	4301      	orrs	r1, r0
 80051e2:	d120      	bne.n	8005226 <_dtoa_r+0xa9e>
 80051e4:	2a00      	cmp	r2, #0
 80051e6:	ddee      	ble.n	80051c6 <_dtoa_r+0xa3e>
 80051e8:	2201      	movs	r2, #1
 80051ea:	9903      	ldr	r1, [sp, #12]
 80051ec:	4648      	mov	r0, r9
 80051ee:	9304      	str	r3, [sp, #16]
 80051f0:	f000 fba2 	bl	8005938 <__lshift>
 80051f4:	4621      	mov	r1, r4
 80051f6:	9003      	str	r0, [sp, #12]
 80051f8:	f000 fc0a 	bl	8005a10 <__mcmp>
 80051fc:	2800      	cmp	r0, #0
 80051fe:	9b04      	ldr	r3, [sp, #16]
 8005200:	dc02      	bgt.n	8005208 <_dtoa_r+0xa80>
 8005202:	d1e0      	bne.n	80051c6 <_dtoa_r+0xa3e>
 8005204:	07da      	lsls	r2, r3, #31
 8005206:	d5de      	bpl.n	80051c6 <_dtoa_r+0xa3e>
 8005208:	2b39      	cmp	r3, #57	@ 0x39
 800520a:	d1da      	bne.n	80051c2 <_dtoa_r+0xa3a>
 800520c:	2339      	movs	r3, #57	@ 0x39
 800520e:	f88b 3000 	strb.w	r3, [fp]
 8005212:	4633      	mov	r3, r6
 8005214:	461e      	mov	r6, r3
 8005216:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800521a:	3b01      	subs	r3, #1
 800521c:	2a39      	cmp	r2, #57	@ 0x39
 800521e:	d04e      	beq.n	80052be <_dtoa_r+0xb36>
 8005220:	3201      	adds	r2, #1
 8005222:	701a      	strb	r2, [r3, #0]
 8005224:	e501      	b.n	8004c2a <_dtoa_r+0x4a2>
 8005226:	2a00      	cmp	r2, #0
 8005228:	dd03      	ble.n	8005232 <_dtoa_r+0xaaa>
 800522a:	2b39      	cmp	r3, #57	@ 0x39
 800522c:	d0ee      	beq.n	800520c <_dtoa_r+0xa84>
 800522e:	3301      	adds	r3, #1
 8005230:	e7c9      	b.n	80051c6 <_dtoa_r+0xa3e>
 8005232:	9a04      	ldr	r2, [sp, #16]
 8005234:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005236:	f802 3c01 	strb.w	r3, [r2, #-1]
 800523a:	428a      	cmp	r2, r1
 800523c:	d028      	beq.n	8005290 <_dtoa_r+0xb08>
 800523e:	2300      	movs	r3, #0
 8005240:	220a      	movs	r2, #10
 8005242:	9903      	ldr	r1, [sp, #12]
 8005244:	4648      	mov	r0, r9
 8005246:	f000 f9d3 	bl	80055f0 <__multadd>
 800524a:	42af      	cmp	r7, r5
 800524c:	9003      	str	r0, [sp, #12]
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	f04f 020a 	mov.w	r2, #10
 8005256:	4639      	mov	r1, r7
 8005258:	4648      	mov	r0, r9
 800525a:	d107      	bne.n	800526c <_dtoa_r+0xae4>
 800525c:	f000 f9c8 	bl	80055f0 <__multadd>
 8005260:	4607      	mov	r7, r0
 8005262:	4605      	mov	r5, r0
 8005264:	9b04      	ldr	r3, [sp, #16]
 8005266:	3301      	adds	r3, #1
 8005268:	9304      	str	r3, [sp, #16]
 800526a:	e777      	b.n	800515c <_dtoa_r+0x9d4>
 800526c:	f000 f9c0 	bl	80055f0 <__multadd>
 8005270:	4629      	mov	r1, r5
 8005272:	4607      	mov	r7, r0
 8005274:	2300      	movs	r3, #0
 8005276:	220a      	movs	r2, #10
 8005278:	4648      	mov	r0, r9
 800527a:	f000 f9b9 	bl	80055f0 <__multadd>
 800527e:	4605      	mov	r5, r0
 8005280:	e7f0      	b.n	8005264 <_dtoa_r+0xadc>
 8005282:	f1bb 0f00 	cmp.w	fp, #0
 8005286:	bfcc      	ite	gt
 8005288:	465e      	movgt	r6, fp
 800528a:	2601      	movle	r6, #1
 800528c:	2700      	movs	r7, #0
 800528e:	4456      	add	r6, sl
 8005290:	2201      	movs	r2, #1
 8005292:	9903      	ldr	r1, [sp, #12]
 8005294:	4648      	mov	r0, r9
 8005296:	9304      	str	r3, [sp, #16]
 8005298:	f000 fb4e 	bl	8005938 <__lshift>
 800529c:	4621      	mov	r1, r4
 800529e:	9003      	str	r0, [sp, #12]
 80052a0:	f000 fbb6 	bl	8005a10 <__mcmp>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	dcb4      	bgt.n	8005212 <_dtoa_r+0xa8a>
 80052a8:	d102      	bne.n	80052b0 <_dtoa_r+0xb28>
 80052aa:	9b04      	ldr	r3, [sp, #16]
 80052ac:	07db      	lsls	r3, r3, #31
 80052ae:	d4b0      	bmi.n	8005212 <_dtoa_r+0xa8a>
 80052b0:	4633      	mov	r3, r6
 80052b2:	461e      	mov	r6, r3
 80052b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052b8:	2a30      	cmp	r2, #48	@ 0x30
 80052ba:	d0fa      	beq.n	80052b2 <_dtoa_r+0xb2a>
 80052bc:	e4b5      	b.n	8004c2a <_dtoa_r+0x4a2>
 80052be:	459a      	cmp	sl, r3
 80052c0:	d1a8      	bne.n	8005214 <_dtoa_r+0xa8c>
 80052c2:	2331      	movs	r3, #49	@ 0x31
 80052c4:	f108 0801 	add.w	r8, r8, #1
 80052c8:	f88a 3000 	strb.w	r3, [sl]
 80052cc:	e4ad      	b.n	8004c2a <_dtoa_r+0x4a2>
 80052ce:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80052d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800532c <_dtoa_r+0xba4>
 80052d4:	b11b      	cbz	r3, 80052de <_dtoa_r+0xb56>
 80052d6:	f10a 0308 	add.w	r3, sl, #8
 80052da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	4650      	mov	r0, sl
 80052e0:	b017      	add	sp, #92	@ 0x5c
 80052e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	f77f ae2e 	ble.w	8004f4a <_dtoa_r+0x7c2>
 80052ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80052f2:	2001      	movs	r0, #1
 80052f4:	e64d      	b.n	8004f92 <_dtoa_r+0x80a>
 80052f6:	f1bb 0f00 	cmp.w	fp, #0
 80052fa:	f77f aed9 	ble.w	80050b0 <_dtoa_r+0x928>
 80052fe:	4656      	mov	r6, sl
 8005300:	4621      	mov	r1, r4
 8005302:	9803      	ldr	r0, [sp, #12]
 8005304:	f7ff f9b5 	bl	8004672 <quorem>
 8005308:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800530c:	f806 3b01 	strb.w	r3, [r6], #1
 8005310:	eba6 020a 	sub.w	r2, r6, sl
 8005314:	4593      	cmp	fp, r2
 8005316:	ddb4      	ble.n	8005282 <_dtoa_r+0xafa>
 8005318:	2300      	movs	r3, #0
 800531a:	220a      	movs	r2, #10
 800531c:	4648      	mov	r0, r9
 800531e:	9903      	ldr	r1, [sp, #12]
 8005320:	f000 f966 	bl	80055f0 <__multadd>
 8005324:	9003      	str	r0, [sp, #12]
 8005326:	e7eb      	b.n	8005300 <_dtoa_r+0xb78>
 8005328:	08006806 	.word	0x08006806
 800532c:	0800678a 	.word	0x0800678a

08005330 <_free_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4605      	mov	r5, r0
 8005334:	2900      	cmp	r1, #0
 8005336:	d040      	beq.n	80053ba <_free_r+0x8a>
 8005338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800533c:	1f0c      	subs	r4, r1, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	bfb8      	it	lt
 8005342:	18e4      	addlt	r4, r4, r3
 8005344:	f000 f8e6 	bl	8005514 <__malloc_lock>
 8005348:	4a1c      	ldr	r2, [pc, #112]	@ (80053bc <_free_r+0x8c>)
 800534a:	6813      	ldr	r3, [r2, #0]
 800534c:	b933      	cbnz	r3, 800535c <_free_r+0x2c>
 800534e:	6063      	str	r3, [r4, #4]
 8005350:	6014      	str	r4, [r2, #0]
 8005352:	4628      	mov	r0, r5
 8005354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005358:	f000 b8e2 	b.w	8005520 <__malloc_unlock>
 800535c:	42a3      	cmp	r3, r4
 800535e:	d908      	bls.n	8005372 <_free_r+0x42>
 8005360:	6820      	ldr	r0, [r4, #0]
 8005362:	1821      	adds	r1, r4, r0
 8005364:	428b      	cmp	r3, r1
 8005366:	bf01      	itttt	eq
 8005368:	6819      	ldreq	r1, [r3, #0]
 800536a:	685b      	ldreq	r3, [r3, #4]
 800536c:	1809      	addeq	r1, r1, r0
 800536e:	6021      	streq	r1, [r4, #0]
 8005370:	e7ed      	b.n	800534e <_free_r+0x1e>
 8005372:	461a      	mov	r2, r3
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	b10b      	cbz	r3, 800537c <_free_r+0x4c>
 8005378:	42a3      	cmp	r3, r4
 800537a:	d9fa      	bls.n	8005372 <_free_r+0x42>
 800537c:	6811      	ldr	r1, [r2, #0]
 800537e:	1850      	adds	r0, r2, r1
 8005380:	42a0      	cmp	r0, r4
 8005382:	d10b      	bne.n	800539c <_free_r+0x6c>
 8005384:	6820      	ldr	r0, [r4, #0]
 8005386:	4401      	add	r1, r0
 8005388:	1850      	adds	r0, r2, r1
 800538a:	4283      	cmp	r3, r0
 800538c:	6011      	str	r1, [r2, #0]
 800538e:	d1e0      	bne.n	8005352 <_free_r+0x22>
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	4408      	add	r0, r1
 8005396:	6010      	str	r0, [r2, #0]
 8005398:	6053      	str	r3, [r2, #4]
 800539a:	e7da      	b.n	8005352 <_free_r+0x22>
 800539c:	d902      	bls.n	80053a4 <_free_r+0x74>
 800539e:	230c      	movs	r3, #12
 80053a0:	602b      	str	r3, [r5, #0]
 80053a2:	e7d6      	b.n	8005352 <_free_r+0x22>
 80053a4:	6820      	ldr	r0, [r4, #0]
 80053a6:	1821      	adds	r1, r4, r0
 80053a8:	428b      	cmp	r3, r1
 80053aa:	bf01      	itttt	eq
 80053ac:	6819      	ldreq	r1, [r3, #0]
 80053ae:	685b      	ldreq	r3, [r3, #4]
 80053b0:	1809      	addeq	r1, r1, r0
 80053b2:	6021      	streq	r1, [r4, #0]
 80053b4:	6063      	str	r3, [r4, #4]
 80053b6:	6054      	str	r4, [r2, #4]
 80053b8:	e7cb      	b.n	8005352 <_free_r+0x22>
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
 80053bc:	20000458 	.word	0x20000458

080053c0 <malloc>:
 80053c0:	4b02      	ldr	r3, [pc, #8]	@ (80053cc <malloc+0xc>)
 80053c2:	4601      	mov	r1, r0
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	f000 b825 	b.w	8005414 <_malloc_r>
 80053ca:	bf00      	nop
 80053cc:	20000048 	.word	0x20000048

080053d0 <sbrk_aligned>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	4e0f      	ldr	r6, [pc, #60]	@ (8005410 <sbrk_aligned+0x40>)
 80053d4:	460c      	mov	r4, r1
 80053d6:	6831      	ldr	r1, [r6, #0]
 80053d8:	4605      	mov	r5, r0
 80053da:	b911      	cbnz	r1, 80053e2 <sbrk_aligned+0x12>
 80053dc:	f000 fe3a 	bl	8006054 <_sbrk_r>
 80053e0:	6030      	str	r0, [r6, #0]
 80053e2:	4621      	mov	r1, r4
 80053e4:	4628      	mov	r0, r5
 80053e6:	f000 fe35 	bl	8006054 <_sbrk_r>
 80053ea:	1c43      	adds	r3, r0, #1
 80053ec:	d103      	bne.n	80053f6 <sbrk_aligned+0x26>
 80053ee:	f04f 34ff 	mov.w	r4, #4294967295
 80053f2:	4620      	mov	r0, r4
 80053f4:	bd70      	pop	{r4, r5, r6, pc}
 80053f6:	1cc4      	adds	r4, r0, #3
 80053f8:	f024 0403 	bic.w	r4, r4, #3
 80053fc:	42a0      	cmp	r0, r4
 80053fe:	d0f8      	beq.n	80053f2 <sbrk_aligned+0x22>
 8005400:	1a21      	subs	r1, r4, r0
 8005402:	4628      	mov	r0, r5
 8005404:	f000 fe26 	bl	8006054 <_sbrk_r>
 8005408:	3001      	adds	r0, #1
 800540a:	d1f2      	bne.n	80053f2 <sbrk_aligned+0x22>
 800540c:	e7ef      	b.n	80053ee <sbrk_aligned+0x1e>
 800540e:	bf00      	nop
 8005410:	20000454 	.word	0x20000454

08005414 <_malloc_r>:
 8005414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005418:	1ccd      	adds	r5, r1, #3
 800541a:	f025 0503 	bic.w	r5, r5, #3
 800541e:	3508      	adds	r5, #8
 8005420:	2d0c      	cmp	r5, #12
 8005422:	bf38      	it	cc
 8005424:	250c      	movcc	r5, #12
 8005426:	2d00      	cmp	r5, #0
 8005428:	4606      	mov	r6, r0
 800542a:	db01      	blt.n	8005430 <_malloc_r+0x1c>
 800542c:	42a9      	cmp	r1, r5
 800542e:	d904      	bls.n	800543a <_malloc_r+0x26>
 8005430:	230c      	movs	r3, #12
 8005432:	6033      	str	r3, [r6, #0]
 8005434:	2000      	movs	r0, #0
 8005436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800543a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005510 <_malloc_r+0xfc>
 800543e:	f000 f869 	bl	8005514 <__malloc_lock>
 8005442:	f8d8 3000 	ldr.w	r3, [r8]
 8005446:	461c      	mov	r4, r3
 8005448:	bb44      	cbnz	r4, 800549c <_malloc_r+0x88>
 800544a:	4629      	mov	r1, r5
 800544c:	4630      	mov	r0, r6
 800544e:	f7ff ffbf 	bl	80053d0 <sbrk_aligned>
 8005452:	1c43      	adds	r3, r0, #1
 8005454:	4604      	mov	r4, r0
 8005456:	d158      	bne.n	800550a <_malloc_r+0xf6>
 8005458:	f8d8 4000 	ldr.w	r4, [r8]
 800545c:	4627      	mov	r7, r4
 800545e:	2f00      	cmp	r7, #0
 8005460:	d143      	bne.n	80054ea <_malloc_r+0xd6>
 8005462:	2c00      	cmp	r4, #0
 8005464:	d04b      	beq.n	80054fe <_malloc_r+0xea>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	4639      	mov	r1, r7
 800546a:	4630      	mov	r0, r6
 800546c:	eb04 0903 	add.w	r9, r4, r3
 8005470:	f000 fdf0 	bl	8006054 <_sbrk_r>
 8005474:	4581      	cmp	r9, r0
 8005476:	d142      	bne.n	80054fe <_malloc_r+0xea>
 8005478:	6821      	ldr	r1, [r4, #0]
 800547a:	4630      	mov	r0, r6
 800547c:	1a6d      	subs	r5, r5, r1
 800547e:	4629      	mov	r1, r5
 8005480:	f7ff ffa6 	bl	80053d0 <sbrk_aligned>
 8005484:	3001      	adds	r0, #1
 8005486:	d03a      	beq.n	80054fe <_malloc_r+0xea>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	442b      	add	r3, r5
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	f8d8 3000 	ldr.w	r3, [r8]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	bb62      	cbnz	r2, 80054f0 <_malloc_r+0xdc>
 8005496:	f8c8 7000 	str.w	r7, [r8]
 800549a:	e00f      	b.n	80054bc <_malloc_r+0xa8>
 800549c:	6822      	ldr	r2, [r4, #0]
 800549e:	1b52      	subs	r2, r2, r5
 80054a0:	d420      	bmi.n	80054e4 <_malloc_r+0xd0>
 80054a2:	2a0b      	cmp	r2, #11
 80054a4:	d917      	bls.n	80054d6 <_malloc_r+0xc2>
 80054a6:	1961      	adds	r1, r4, r5
 80054a8:	42a3      	cmp	r3, r4
 80054aa:	6025      	str	r5, [r4, #0]
 80054ac:	bf18      	it	ne
 80054ae:	6059      	strne	r1, [r3, #4]
 80054b0:	6863      	ldr	r3, [r4, #4]
 80054b2:	bf08      	it	eq
 80054b4:	f8c8 1000 	streq.w	r1, [r8]
 80054b8:	5162      	str	r2, [r4, r5]
 80054ba:	604b      	str	r3, [r1, #4]
 80054bc:	4630      	mov	r0, r6
 80054be:	f000 f82f 	bl	8005520 <__malloc_unlock>
 80054c2:	f104 000b 	add.w	r0, r4, #11
 80054c6:	1d23      	adds	r3, r4, #4
 80054c8:	f020 0007 	bic.w	r0, r0, #7
 80054cc:	1ac2      	subs	r2, r0, r3
 80054ce:	bf1c      	itt	ne
 80054d0:	1a1b      	subne	r3, r3, r0
 80054d2:	50a3      	strne	r3, [r4, r2]
 80054d4:	e7af      	b.n	8005436 <_malloc_r+0x22>
 80054d6:	6862      	ldr	r2, [r4, #4]
 80054d8:	42a3      	cmp	r3, r4
 80054da:	bf0c      	ite	eq
 80054dc:	f8c8 2000 	streq.w	r2, [r8]
 80054e0:	605a      	strne	r2, [r3, #4]
 80054e2:	e7eb      	b.n	80054bc <_malloc_r+0xa8>
 80054e4:	4623      	mov	r3, r4
 80054e6:	6864      	ldr	r4, [r4, #4]
 80054e8:	e7ae      	b.n	8005448 <_malloc_r+0x34>
 80054ea:	463c      	mov	r4, r7
 80054ec:	687f      	ldr	r7, [r7, #4]
 80054ee:	e7b6      	b.n	800545e <_malloc_r+0x4a>
 80054f0:	461a      	mov	r2, r3
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	42a3      	cmp	r3, r4
 80054f6:	d1fb      	bne.n	80054f0 <_malloc_r+0xdc>
 80054f8:	2300      	movs	r3, #0
 80054fa:	6053      	str	r3, [r2, #4]
 80054fc:	e7de      	b.n	80054bc <_malloc_r+0xa8>
 80054fe:	230c      	movs	r3, #12
 8005500:	4630      	mov	r0, r6
 8005502:	6033      	str	r3, [r6, #0]
 8005504:	f000 f80c 	bl	8005520 <__malloc_unlock>
 8005508:	e794      	b.n	8005434 <_malloc_r+0x20>
 800550a:	6005      	str	r5, [r0, #0]
 800550c:	e7d6      	b.n	80054bc <_malloc_r+0xa8>
 800550e:	bf00      	nop
 8005510:	20000458 	.word	0x20000458

08005514 <__malloc_lock>:
 8005514:	4801      	ldr	r0, [pc, #4]	@ (800551c <__malloc_lock+0x8>)
 8005516:	f7ff b89c 	b.w	8004652 <__retarget_lock_acquire_recursive>
 800551a:	bf00      	nop
 800551c:	20000450 	.word	0x20000450

08005520 <__malloc_unlock>:
 8005520:	4801      	ldr	r0, [pc, #4]	@ (8005528 <__malloc_unlock+0x8>)
 8005522:	f7ff b897 	b.w	8004654 <__retarget_lock_release_recursive>
 8005526:	bf00      	nop
 8005528:	20000450 	.word	0x20000450

0800552c <_Balloc>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	69c6      	ldr	r6, [r0, #28]
 8005530:	4604      	mov	r4, r0
 8005532:	460d      	mov	r5, r1
 8005534:	b976      	cbnz	r6, 8005554 <_Balloc+0x28>
 8005536:	2010      	movs	r0, #16
 8005538:	f7ff ff42 	bl	80053c0 <malloc>
 800553c:	4602      	mov	r2, r0
 800553e:	61e0      	str	r0, [r4, #28]
 8005540:	b920      	cbnz	r0, 800554c <_Balloc+0x20>
 8005542:	216b      	movs	r1, #107	@ 0x6b
 8005544:	4b17      	ldr	r3, [pc, #92]	@ (80055a4 <_Balloc+0x78>)
 8005546:	4818      	ldr	r0, [pc, #96]	@ (80055a8 <_Balloc+0x7c>)
 8005548:	f000 fda2 	bl	8006090 <__assert_func>
 800554c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005550:	6006      	str	r6, [r0, #0]
 8005552:	60c6      	str	r6, [r0, #12]
 8005554:	69e6      	ldr	r6, [r4, #28]
 8005556:	68f3      	ldr	r3, [r6, #12]
 8005558:	b183      	cbz	r3, 800557c <_Balloc+0x50>
 800555a:	69e3      	ldr	r3, [r4, #28]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005562:	b9b8      	cbnz	r0, 8005594 <_Balloc+0x68>
 8005564:	2101      	movs	r1, #1
 8005566:	fa01 f605 	lsl.w	r6, r1, r5
 800556a:	1d72      	adds	r2, r6, #5
 800556c:	4620      	mov	r0, r4
 800556e:	0092      	lsls	r2, r2, #2
 8005570:	f000 fdac 	bl	80060cc <_calloc_r>
 8005574:	b160      	cbz	r0, 8005590 <_Balloc+0x64>
 8005576:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800557a:	e00e      	b.n	800559a <_Balloc+0x6e>
 800557c:	2221      	movs	r2, #33	@ 0x21
 800557e:	2104      	movs	r1, #4
 8005580:	4620      	mov	r0, r4
 8005582:	f000 fda3 	bl	80060cc <_calloc_r>
 8005586:	69e3      	ldr	r3, [r4, #28]
 8005588:	60f0      	str	r0, [r6, #12]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e4      	bne.n	800555a <_Balloc+0x2e>
 8005590:	2000      	movs	r0, #0
 8005592:	bd70      	pop	{r4, r5, r6, pc}
 8005594:	6802      	ldr	r2, [r0, #0]
 8005596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800559a:	2300      	movs	r3, #0
 800559c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80055a0:	e7f7      	b.n	8005592 <_Balloc+0x66>
 80055a2:	bf00      	nop
 80055a4:	08006797 	.word	0x08006797
 80055a8:	08006817 	.word	0x08006817

080055ac <_Bfree>:
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	69c6      	ldr	r6, [r0, #28]
 80055b0:	4605      	mov	r5, r0
 80055b2:	460c      	mov	r4, r1
 80055b4:	b976      	cbnz	r6, 80055d4 <_Bfree+0x28>
 80055b6:	2010      	movs	r0, #16
 80055b8:	f7ff ff02 	bl	80053c0 <malloc>
 80055bc:	4602      	mov	r2, r0
 80055be:	61e8      	str	r0, [r5, #28]
 80055c0:	b920      	cbnz	r0, 80055cc <_Bfree+0x20>
 80055c2:	218f      	movs	r1, #143	@ 0x8f
 80055c4:	4b08      	ldr	r3, [pc, #32]	@ (80055e8 <_Bfree+0x3c>)
 80055c6:	4809      	ldr	r0, [pc, #36]	@ (80055ec <_Bfree+0x40>)
 80055c8:	f000 fd62 	bl	8006090 <__assert_func>
 80055cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055d0:	6006      	str	r6, [r0, #0]
 80055d2:	60c6      	str	r6, [r0, #12]
 80055d4:	b13c      	cbz	r4, 80055e6 <_Bfree+0x3a>
 80055d6:	69eb      	ldr	r3, [r5, #28]
 80055d8:	6862      	ldr	r2, [r4, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055e0:	6021      	str	r1, [r4, #0]
 80055e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
 80055e8:	08006797 	.word	0x08006797
 80055ec:	08006817 	.word	0x08006817

080055f0 <__multadd>:
 80055f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f4:	4607      	mov	r7, r0
 80055f6:	460c      	mov	r4, r1
 80055f8:	461e      	mov	r6, r3
 80055fa:	2000      	movs	r0, #0
 80055fc:	690d      	ldr	r5, [r1, #16]
 80055fe:	f101 0c14 	add.w	ip, r1, #20
 8005602:	f8dc 3000 	ldr.w	r3, [ip]
 8005606:	3001      	adds	r0, #1
 8005608:	b299      	uxth	r1, r3
 800560a:	fb02 6101 	mla	r1, r2, r1, r6
 800560e:	0c1e      	lsrs	r6, r3, #16
 8005610:	0c0b      	lsrs	r3, r1, #16
 8005612:	fb02 3306 	mla	r3, r2, r6, r3
 8005616:	b289      	uxth	r1, r1
 8005618:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800561c:	4285      	cmp	r5, r0
 800561e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005622:	f84c 1b04 	str.w	r1, [ip], #4
 8005626:	dcec      	bgt.n	8005602 <__multadd+0x12>
 8005628:	b30e      	cbz	r6, 800566e <__multadd+0x7e>
 800562a:	68a3      	ldr	r3, [r4, #8]
 800562c:	42ab      	cmp	r3, r5
 800562e:	dc19      	bgt.n	8005664 <__multadd+0x74>
 8005630:	6861      	ldr	r1, [r4, #4]
 8005632:	4638      	mov	r0, r7
 8005634:	3101      	adds	r1, #1
 8005636:	f7ff ff79 	bl	800552c <_Balloc>
 800563a:	4680      	mov	r8, r0
 800563c:	b928      	cbnz	r0, 800564a <__multadd+0x5a>
 800563e:	4602      	mov	r2, r0
 8005640:	21ba      	movs	r1, #186	@ 0xba
 8005642:	4b0c      	ldr	r3, [pc, #48]	@ (8005674 <__multadd+0x84>)
 8005644:	480c      	ldr	r0, [pc, #48]	@ (8005678 <__multadd+0x88>)
 8005646:	f000 fd23 	bl	8006090 <__assert_func>
 800564a:	6922      	ldr	r2, [r4, #16]
 800564c:	f104 010c 	add.w	r1, r4, #12
 8005650:	3202      	adds	r2, #2
 8005652:	0092      	lsls	r2, r2, #2
 8005654:	300c      	adds	r0, #12
 8005656:	f000 fd0d 	bl	8006074 <memcpy>
 800565a:	4621      	mov	r1, r4
 800565c:	4638      	mov	r0, r7
 800565e:	f7ff ffa5 	bl	80055ac <_Bfree>
 8005662:	4644      	mov	r4, r8
 8005664:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005668:	3501      	adds	r5, #1
 800566a:	615e      	str	r6, [r3, #20]
 800566c:	6125      	str	r5, [r4, #16]
 800566e:	4620      	mov	r0, r4
 8005670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005674:	08006806 	.word	0x08006806
 8005678:	08006817 	.word	0x08006817

0800567c <__hi0bits>:
 800567c:	4603      	mov	r3, r0
 800567e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005682:	bf3a      	itte	cc
 8005684:	0403      	lslcc	r3, r0, #16
 8005686:	2010      	movcc	r0, #16
 8005688:	2000      	movcs	r0, #0
 800568a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800568e:	bf3c      	itt	cc
 8005690:	021b      	lslcc	r3, r3, #8
 8005692:	3008      	addcc	r0, #8
 8005694:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005698:	bf3c      	itt	cc
 800569a:	011b      	lslcc	r3, r3, #4
 800569c:	3004      	addcc	r0, #4
 800569e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056a2:	bf3c      	itt	cc
 80056a4:	009b      	lslcc	r3, r3, #2
 80056a6:	3002      	addcc	r0, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	db05      	blt.n	80056b8 <__hi0bits+0x3c>
 80056ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80056b0:	f100 0001 	add.w	r0, r0, #1
 80056b4:	bf08      	it	eq
 80056b6:	2020      	moveq	r0, #32
 80056b8:	4770      	bx	lr

080056ba <__lo0bits>:
 80056ba:	6803      	ldr	r3, [r0, #0]
 80056bc:	4602      	mov	r2, r0
 80056be:	f013 0007 	ands.w	r0, r3, #7
 80056c2:	d00b      	beq.n	80056dc <__lo0bits+0x22>
 80056c4:	07d9      	lsls	r1, r3, #31
 80056c6:	d421      	bmi.n	800570c <__lo0bits+0x52>
 80056c8:	0798      	lsls	r0, r3, #30
 80056ca:	bf49      	itett	mi
 80056cc:	085b      	lsrmi	r3, r3, #1
 80056ce:	089b      	lsrpl	r3, r3, #2
 80056d0:	2001      	movmi	r0, #1
 80056d2:	6013      	strmi	r3, [r2, #0]
 80056d4:	bf5c      	itt	pl
 80056d6:	2002      	movpl	r0, #2
 80056d8:	6013      	strpl	r3, [r2, #0]
 80056da:	4770      	bx	lr
 80056dc:	b299      	uxth	r1, r3
 80056de:	b909      	cbnz	r1, 80056e4 <__lo0bits+0x2a>
 80056e0:	2010      	movs	r0, #16
 80056e2:	0c1b      	lsrs	r3, r3, #16
 80056e4:	b2d9      	uxtb	r1, r3
 80056e6:	b909      	cbnz	r1, 80056ec <__lo0bits+0x32>
 80056e8:	3008      	adds	r0, #8
 80056ea:	0a1b      	lsrs	r3, r3, #8
 80056ec:	0719      	lsls	r1, r3, #28
 80056ee:	bf04      	itt	eq
 80056f0:	091b      	lsreq	r3, r3, #4
 80056f2:	3004      	addeq	r0, #4
 80056f4:	0799      	lsls	r1, r3, #30
 80056f6:	bf04      	itt	eq
 80056f8:	089b      	lsreq	r3, r3, #2
 80056fa:	3002      	addeq	r0, #2
 80056fc:	07d9      	lsls	r1, r3, #31
 80056fe:	d403      	bmi.n	8005708 <__lo0bits+0x4e>
 8005700:	085b      	lsrs	r3, r3, #1
 8005702:	f100 0001 	add.w	r0, r0, #1
 8005706:	d003      	beq.n	8005710 <__lo0bits+0x56>
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	4770      	bx	lr
 800570c:	2000      	movs	r0, #0
 800570e:	4770      	bx	lr
 8005710:	2020      	movs	r0, #32
 8005712:	4770      	bx	lr

08005714 <__i2b>:
 8005714:	b510      	push	{r4, lr}
 8005716:	460c      	mov	r4, r1
 8005718:	2101      	movs	r1, #1
 800571a:	f7ff ff07 	bl	800552c <_Balloc>
 800571e:	4602      	mov	r2, r0
 8005720:	b928      	cbnz	r0, 800572e <__i2b+0x1a>
 8005722:	f240 1145 	movw	r1, #325	@ 0x145
 8005726:	4b04      	ldr	r3, [pc, #16]	@ (8005738 <__i2b+0x24>)
 8005728:	4804      	ldr	r0, [pc, #16]	@ (800573c <__i2b+0x28>)
 800572a:	f000 fcb1 	bl	8006090 <__assert_func>
 800572e:	2301      	movs	r3, #1
 8005730:	6144      	str	r4, [r0, #20]
 8005732:	6103      	str	r3, [r0, #16]
 8005734:	bd10      	pop	{r4, pc}
 8005736:	bf00      	nop
 8005738:	08006806 	.word	0x08006806
 800573c:	08006817 	.word	0x08006817

08005740 <__multiply>:
 8005740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005744:	4617      	mov	r7, r2
 8005746:	690a      	ldr	r2, [r1, #16]
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4689      	mov	r9, r1
 800574c:	429a      	cmp	r2, r3
 800574e:	bfa2      	ittt	ge
 8005750:	463b      	movge	r3, r7
 8005752:	460f      	movge	r7, r1
 8005754:	4699      	movge	r9, r3
 8005756:	693d      	ldr	r5, [r7, #16]
 8005758:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	eb05 060a 	add.w	r6, r5, sl
 8005764:	42b3      	cmp	r3, r6
 8005766:	b085      	sub	sp, #20
 8005768:	bfb8      	it	lt
 800576a:	3101      	addlt	r1, #1
 800576c:	f7ff fede 	bl	800552c <_Balloc>
 8005770:	b930      	cbnz	r0, 8005780 <__multiply+0x40>
 8005772:	4602      	mov	r2, r0
 8005774:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005778:	4b40      	ldr	r3, [pc, #256]	@ (800587c <__multiply+0x13c>)
 800577a:	4841      	ldr	r0, [pc, #260]	@ (8005880 <__multiply+0x140>)
 800577c:	f000 fc88 	bl	8006090 <__assert_func>
 8005780:	f100 0414 	add.w	r4, r0, #20
 8005784:	4623      	mov	r3, r4
 8005786:	2200      	movs	r2, #0
 8005788:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800578c:	4573      	cmp	r3, lr
 800578e:	d320      	bcc.n	80057d2 <__multiply+0x92>
 8005790:	f107 0814 	add.w	r8, r7, #20
 8005794:	f109 0114 	add.w	r1, r9, #20
 8005798:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800579c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80057a0:	9302      	str	r3, [sp, #8]
 80057a2:	1beb      	subs	r3, r5, r7
 80057a4:	3b15      	subs	r3, #21
 80057a6:	f023 0303 	bic.w	r3, r3, #3
 80057aa:	3304      	adds	r3, #4
 80057ac:	3715      	adds	r7, #21
 80057ae:	42bd      	cmp	r5, r7
 80057b0:	bf38      	it	cc
 80057b2:	2304      	movcc	r3, #4
 80057b4:	9301      	str	r3, [sp, #4]
 80057b6:	9b02      	ldr	r3, [sp, #8]
 80057b8:	9103      	str	r1, [sp, #12]
 80057ba:	428b      	cmp	r3, r1
 80057bc:	d80c      	bhi.n	80057d8 <__multiply+0x98>
 80057be:	2e00      	cmp	r6, #0
 80057c0:	dd03      	ble.n	80057ca <__multiply+0x8a>
 80057c2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d055      	beq.n	8005876 <__multiply+0x136>
 80057ca:	6106      	str	r6, [r0, #16]
 80057cc:	b005      	add	sp, #20
 80057ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d2:	f843 2b04 	str.w	r2, [r3], #4
 80057d6:	e7d9      	b.n	800578c <__multiply+0x4c>
 80057d8:	f8b1 a000 	ldrh.w	sl, [r1]
 80057dc:	f1ba 0f00 	cmp.w	sl, #0
 80057e0:	d01f      	beq.n	8005822 <__multiply+0xe2>
 80057e2:	46c4      	mov	ip, r8
 80057e4:	46a1      	mov	r9, r4
 80057e6:	2700      	movs	r7, #0
 80057e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80057ec:	f8d9 3000 	ldr.w	r3, [r9]
 80057f0:	fa1f fb82 	uxth.w	fp, r2
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	fb0a 330b 	mla	r3, sl, fp, r3
 80057fa:	443b      	add	r3, r7
 80057fc:	f8d9 7000 	ldr.w	r7, [r9]
 8005800:	0c12      	lsrs	r2, r2, #16
 8005802:	0c3f      	lsrs	r7, r7, #16
 8005804:	fb0a 7202 	mla	r2, sl, r2, r7
 8005808:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800580c:	b29b      	uxth	r3, r3
 800580e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005812:	4565      	cmp	r5, ip
 8005814:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005818:	f849 3b04 	str.w	r3, [r9], #4
 800581c:	d8e4      	bhi.n	80057e8 <__multiply+0xa8>
 800581e:	9b01      	ldr	r3, [sp, #4]
 8005820:	50e7      	str	r7, [r4, r3]
 8005822:	9b03      	ldr	r3, [sp, #12]
 8005824:	3104      	adds	r1, #4
 8005826:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800582a:	f1b9 0f00 	cmp.w	r9, #0
 800582e:	d020      	beq.n	8005872 <__multiply+0x132>
 8005830:	4647      	mov	r7, r8
 8005832:	46a4      	mov	ip, r4
 8005834:	f04f 0a00 	mov.w	sl, #0
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	f8b7 b000 	ldrh.w	fp, [r7]
 800583e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005842:	b29b      	uxth	r3, r3
 8005844:	fb09 220b 	mla	r2, r9, fp, r2
 8005848:	4452      	add	r2, sl
 800584a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800584e:	f84c 3b04 	str.w	r3, [ip], #4
 8005852:	f857 3b04 	ldr.w	r3, [r7], #4
 8005856:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800585a:	f8bc 3000 	ldrh.w	r3, [ip]
 800585e:	42bd      	cmp	r5, r7
 8005860:	fb09 330a 	mla	r3, r9, sl, r3
 8005864:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005868:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800586c:	d8e5      	bhi.n	800583a <__multiply+0xfa>
 800586e:	9a01      	ldr	r2, [sp, #4]
 8005870:	50a3      	str	r3, [r4, r2]
 8005872:	3404      	adds	r4, #4
 8005874:	e79f      	b.n	80057b6 <__multiply+0x76>
 8005876:	3e01      	subs	r6, #1
 8005878:	e7a1      	b.n	80057be <__multiply+0x7e>
 800587a:	bf00      	nop
 800587c:	08006806 	.word	0x08006806
 8005880:	08006817 	.word	0x08006817

08005884 <__pow5mult>:
 8005884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005888:	4615      	mov	r5, r2
 800588a:	f012 0203 	ands.w	r2, r2, #3
 800588e:	4607      	mov	r7, r0
 8005890:	460e      	mov	r6, r1
 8005892:	d007      	beq.n	80058a4 <__pow5mult+0x20>
 8005894:	4c25      	ldr	r4, [pc, #148]	@ (800592c <__pow5mult+0xa8>)
 8005896:	3a01      	subs	r2, #1
 8005898:	2300      	movs	r3, #0
 800589a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800589e:	f7ff fea7 	bl	80055f0 <__multadd>
 80058a2:	4606      	mov	r6, r0
 80058a4:	10ad      	asrs	r5, r5, #2
 80058a6:	d03d      	beq.n	8005924 <__pow5mult+0xa0>
 80058a8:	69fc      	ldr	r4, [r7, #28]
 80058aa:	b97c      	cbnz	r4, 80058cc <__pow5mult+0x48>
 80058ac:	2010      	movs	r0, #16
 80058ae:	f7ff fd87 	bl	80053c0 <malloc>
 80058b2:	4602      	mov	r2, r0
 80058b4:	61f8      	str	r0, [r7, #28]
 80058b6:	b928      	cbnz	r0, 80058c4 <__pow5mult+0x40>
 80058b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80058bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005930 <__pow5mult+0xac>)
 80058be:	481d      	ldr	r0, [pc, #116]	@ (8005934 <__pow5mult+0xb0>)
 80058c0:	f000 fbe6 	bl	8006090 <__assert_func>
 80058c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80058c8:	6004      	str	r4, [r0, #0]
 80058ca:	60c4      	str	r4, [r0, #12]
 80058cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80058d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80058d4:	b94c      	cbnz	r4, 80058ea <__pow5mult+0x66>
 80058d6:	f240 2171 	movw	r1, #625	@ 0x271
 80058da:	4638      	mov	r0, r7
 80058dc:	f7ff ff1a 	bl	8005714 <__i2b>
 80058e0:	2300      	movs	r3, #0
 80058e2:	4604      	mov	r4, r0
 80058e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80058e8:	6003      	str	r3, [r0, #0]
 80058ea:	f04f 0900 	mov.w	r9, #0
 80058ee:	07eb      	lsls	r3, r5, #31
 80058f0:	d50a      	bpl.n	8005908 <__pow5mult+0x84>
 80058f2:	4631      	mov	r1, r6
 80058f4:	4622      	mov	r2, r4
 80058f6:	4638      	mov	r0, r7
 80058f8:	f7ff ff22 	bl	8005740 <__multiply>
 80058fc:	4680      	mov	r8, r0
 80058fe:	4631      	mov	r1, r6
 8005900:	4638      	mov	r0, r7
 8005902:	f7ff fe53 	bl	80055ac <_Bfree>
 8005906:	4646      	mov	r6, r8
 8005908:	106d      	asrs	r5, r5, #1
 800590a:	d00b      	beq.n	8005924 <__pow5mult+0xa0>
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	b938      	cbnz	r0, 8005920 <__pow5mult+0x9c>
 8005910:	4622      	mov	r2, r4
 8005912:	4621      	mov	r1, r4
 8005914:	4638      	mov	r0, r7
 8005916:	f7ff ff13 	bl	8005740 <__multiply>
 800591a:	6020      	str	r0, [r4, #0]
 800591c:	f8c0 9000 	str.w	r9, [r0]
 8005920:	4604      	mov	r4, r0
 8005922:	e7e4      	b.n	80058ee <__pow5mult+0x6a>
 8005924:	4630      	mov	r0, r6
 8005926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800592a:	bf00      	nop
 800592c:	080068c8 	.word	0x080068c8
 8005930:	08006797 	.word	0x08006797
 8005934:	08006817 	.word	0x08006817

08005938 <__lshift>:
 8005938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800593c:	460c      	mov	r4, r1
 800593e:	4607      	mov	r7, r0
 8005940:	4691      	mov	r9, r2
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	6849      	ldr	r1, [r1, #4]
 8005946:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800594a:	68a3      	ldr	r3, [r4, #8]
 800594c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005950:	f108 0601 	add.w	r6, r8, #1
 8005954:	42b3      	cmp	r3, r6
 8005956:	db0b      	blt.n	8005970 <__lshift+0x38>
 8005958:	4638      	mov	r0, r7
 800595a:	f7ff fde7 	bl	800552c <_Balloc>
 800595e:	4605      	mov	r5, r0
 8005960:	b948      	cbnz	r0, 8005976 <__lshift+0x3e>
 8005962:	4602      	mov	r2, r0
 8005964:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005968:	4b27      	ldr	r3, [pc, #156]	@ (8005a08 <__lshift+0xd0>)
 800596a:	4828      	ldr	r0, [pc, #160]	@ (8005a0c <__lshift+0xd4>)
 800596c:	f000 fb90 	bl	8006090 <__assert_func>
 8005970:	3101      	adds	r1, #1
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	e7ee      	b.n	8005954 <__lshift+0x1c>
 8005976:	2300      	movs	r3, #0
 8005978:	f100 0114 	add.w	r1, r0, #20
 800597c:	f100 0210 	add.w	r2, r0, #16
 8005980:	4618      	mov	r0, r3
 8005982:	4553      	cmp	r3, sl
 8005984:	db33      	blt.n	80059ee <__lshift+0xb6>
 8005986:	6920      	ldr	r0, [r4, #16]
 8005988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800598c:	f104 0314 	add.w	r3, r4, #20
 8005990:	f019 091f 	ands.w	r9, r9, #31
 8005994:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005998:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800599c:	d02b      	beq.n	80059f6 <__lshift+0xbe>
 800599e:	468a      	mov	sl, r1
 80059a0:	2200      	movs	r2, #0
 80059a2:	f1c9 0e20 	rsb	lr, r9, #32
 80059a6:	6818      	ldr	r0, [r3, #0]
 80059a8:	fa00 f009 	lsl.w	r0, r0, r9
 80059ac:	4310      	orrs	r0, r2
 80059ae:	f84a 0b04 	str.w	r0, [sl], #4
 80059b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80059b6:	459c      	cmp	ip, r3
 80059b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80059bc:	d8f3      	bhi.n	80059a6 <__lshift+0x6e>
 80059be:	ebac 0304 	sub.w	r3, ip, r4
 80059c2:	3b15      	subs	r3, #21
 80059c4:	f023 0303 	bic.w	r3, r3, #3
 80059c8:	3304      	adds	r3, #4
 80059ca:	f104 0015 	add.w	r0, r4, #21
 80059ce:	4560      	cmp	r0, ip
 80059d0:	bf88      	it	hi
 80059d2:	2304      	movhi	r3, #4
 80059d4:	50ca      	str	r2, [r1, r3]
 80059d6:	b10a      	cbz	r2, 80059dc <__lshift+0xa4>
 80059d8:	f108 0602 	add.w	r6, r8, #2
 80059dc:	3e01      	subs	r6, #1
 80059de:	4638      	mov	r0, r7
 80059e0:	4621      	mov	r1, r4
 80059e2:	612e      	str	r6, [r5, #16]
 80059e4:	f7ff fde2 	bl	80055ac <_Bfree>
 80059e8:	4628      	mov	r0, r5
 80059ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80059f2:	3301      	adds	r3, #1
 80059f4:	e7c5      	b.n	8005982 <__lshift+0x4a>
 80059f6:	3904      	subs	r1, #4
 80059f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80059fc:	459c      	cmp	ip, r3
 80059fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a02:	d8f9      	bhi.n	80059f8 <__lshift+0xc0>
 8005a04:	e7ea      	b.n	80059dc <__lshift+0xa4>
 8005a06:	bf00      	nop
 8005a08:	08006806 	.word	0x08006806
 8005a0c:	08006817 	.word	0x08006817

08005a10 <__mcmp>:
 8005a10:	4603      	mov	r3, r0
 8005a12:	690a      	ldr	r2, [r1, #16]
 8005a14:	6900      	ldr	r0, [r0, #16]
 8005a16:	b530      	push	{r4, r5, lr}
 8005a18:	1a80      	subs	r0, r0, r2
 8005a1a:	d10e      	bne.n	8005a3a <__mcmp+0x2a>
 8005a1c:	3314      	adds	r3, #20
 8005a1e:	3114      	adds	r1, #20
 8005a20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005a24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005a28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a30:	4295      	cmp	r5, r2
 8005a32:	d003      	beq.n	8005a3c <__mcmp+0x2c>
 8005a34:	d205      	bcs.n	8005a42 <__mcmp+0x32>
 8005a36:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3a:	bd30      	pop	{r4, r5, pc}
 8005a3c:	42a3      	cmp	r3, r4
 8005a3e:	d3f3      	bcc.n	8005a28 <__mcmp+0x18>
 8005a40:	e7fb      	b.n	8005a3a <__mcmp+0x2a>
 8005a42:	2001      	movs	r0, #1
 8005a44:	e7f9      	b.n	8005a3a <__mcmp+0x2a>
	...

08005a48 <__mdiff>:
 8005a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	4689      	mov	r9, r1
 8005a4e:	4606      	mov	r6, r0
 8005a50:	4611      	mov	r1, r2
 8005a52:	4648      	mov	r0, r9
 8005a54:	4614      	mov	r4, r2
 8005a56:	f7ff ffdb 	bl	8005a10 <__mcmp>
 8005a5a:	1e05      	subs	r5, r0, #0
 8005a5c:	d112      	bne.n	8005a84 <__mdiff+0x3c>
 8005a5e:	4629      	mov	r1, r5
 8005a60:	4630      	mov	r0, r6
 8005a62:	f7ff fd63 	bl	800552c <_Balloc>
 8005a66:	4602      	mov	r2, r0
 8005a68:	b928      	cbnz	r0, 8005a76 <__mdiff+0x2e>
 8005a6a:	f240 2137 	movw	r1, #567	@ 0x237
 8005a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b68 <__mdiff+0x120>)
 8005a70:	483e      	ldr	r0, [pc, #248]	@ (8005b6c <__mdiff+0x124>)
 8005a72:	f000 fb0d 	bl	8006090 <__assert_func>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	b003      	add	sp, #12
 8005a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a84:	bfbc      	itt	lt
 8005a86:	464b      	movlt	r3, r9
 8005a88:	46a1      	movlt	r9, r4
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005a90:	bfba      	itte	lt
 8005a92:	461c      	movlt	r4, r3
 8005a94:	2501      	movlt	r5, #1
 8005a96:	2500      	movge	r5, #0
 8005a98:	f7ff fd48 	bl	800552c <_Balloc>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	b918      	cbnz	r0, 8005aa8 <__mdiff+0x60>
 8005aa0:	f240 2145 	movw	r1, #581	@ 0x245
 8005aa4:	4b30      	ldr	r3, [pc, #192]	@ (8005b68 <__mdiff+0x120>)
 8005aa6:	e7e3      	b.n	8005a70 <__mdiff+0x28>
 8005aa8:	f100 0b14 	add.w	fp, r0, #20
 8005aac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005ab0:	f109 0310 	add.w	r3, r9, #16
 8005ab4:	60c5      	str	r5, [r0, #12]
 8005ab6:	f04f 0c00 	mov.w	ip, #0
 8005aba:	f109 0514 	add.w	r5, r9, #20
 8005abe:	46d9      	mov	r9, fp
 8005ac0:	6926      	ldr	r6, [r4, #16]
 8005ac2:	f104 0e14 	add.w	lr, r4, #20
 8005ac6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005aca:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005ace:	9301      	str	r3, [sp, #4]
 8005ad0:	9b01      	ldr	r3, [sp, #4]
 8005ad2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005ad6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005ada:	b281      	uxth	r1, r0
 8005adc:	9301      	str	r3, [sp, #4]
 8005ade:	fa1f f38a 	uxth.w	r3, sl
 8005ae2:	1a5b      	subs	r3, r3, r1
 8005ae4:	0c00      	lsrs	r0, r0, #16
 8005ae6:	4463      	add	r3, ip
 8005ae8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005aec:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005af6:	4576      	cmp	r6, lr
 8005af8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005afc:	f849 3b04 	str.w	r3, [r9], #4
 8005b00:	d8e6      	bhi.n	8005ad0 <__mdiff+0x88>
 8005b02:	1b33      	subs	r3, r6, r4
 8005b04:	3b15      	subs	r3, #21
 8005b06:	f023 0303 	bic.w	r3, r3, #3
 8005b0a:	3415      	adds	r4, #21
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	42a6      	cmp	r6, r4
 8005b10:	bf38      	it	cc
 8005b12:	2304      	movcc	r3, #4
 8005b14:	441d      	add	r5, r3
 8005b16:	445b      	add	r3, fp
 8005b18:	461e      	mov	r6, r3
 8005b1a:	462c      	mov	r4, r5
 8005b1c:	4544      	cmp	r4, r8
 8005b1e:	d30e      	bcc.n	8005b3e <__mdiff+0xf6>
 8005b20:	f108 0103 	add.w	r1, r8, #3
 8005b24:	1b49      	subs	r1, r1, r5
 8005b26:	f021 0103 	bic.w	r1, r1, #3
 8005b2a:	3d03      	subs	r5, #3
 8005b2c:	45a8      	cmp	r8, r5
 8005b2e:	bf38      	it	cc
 8005b30:	2100      	movcc	r1, #0
 8005b32:	440b      	add	r3, r1
 8005b34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b38:	b199      	cbz	r1, 8005b62 <__mdiff+0x11a>
 8005b3a:	6117      	str	r7, [r2, #16]
 8005b3c:	e79e      	b.n	8005a7c <__mdiff+0x34>
 8005b3e:	46e6      	mov	lr, ip
 8005b40:	f854 1b04 	ldr.w	r1, [r4], #4
 8005b44:	fa1f fc81 	uxth.w	ip, r1
 8005b48:	44f4      	add	ip, lr
 8005b4a:	0c08      	lsrs	r0, r1, #16
 8005b4c:	4471      	add	r1, lr
 8005b4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005b52:	b289      	uxth	r1, r1
 8005b54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005b58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b5c:	f846 1b04 	str.w	r1, [r6], #4
 8005b60:	e7dc      	b.n	8005b1c <__mdiff+0xd4>
 8005b62:	3f01      	subs	r7, #1
 8005b64:	e7e6      	b.n	8005b34 <__mdiff+0xec>
 8005b66:	bf00      	nop
 8005b68:	08006806 	.word	0x08006806
 8005b6c:	08006817 	.word	0x08006817

08005b70 <__d2b>:
 8005b70:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005b74:	2101      	movs	r1, #1
 8005b76:	4690      	mov	r8, r2
 8005b78:	4699      	mov	r9, r3
 8005b7a:	9e08      	ldr	r6, [sp, #32]
 8005b7c:	f7ff fcd6 	bl	800552c <_Balloc>
 8005b80:	4604      	mov	r4, r0
 8005b82:	b930      	cbnz	r0, 8005b92 <__d2b+0x22>
 8005b84:	4602      	mov	r2, r0
 8005b86:	f240 310f 	movw	r1, #783	@ 0x30f
 8005b8a:	4b23      	ldr	r3, [pc, #140]	@ (8005c18 <__d2b+0xa8>)
 8005b8c:	4823      	ldr	r0, [pc, #140]	@ (8005c1c <__d2b+0xac>)
 8005b8e:	f000 fa7f 	bl	8006090 <__assert_func>
 8005b92:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b9a:	b10d      	cbz	r5, 8005ba0 <__d2b+0x30>
 8005b9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ba0:	9301      	str	r3, [sp, #4]
 8005ba2:	f1b8 0300 	subs.w	r3, r8, #0
 8005ba6:	d024      	beq.n	8005bf2 <__d2b+0x82>
 8005ba8:	4668      	mov	r0, sp
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	f7ff fd85 	bl	80056ba <__lo0bits>
 8005bb0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005bb4:	b1d8      	cbz	r0, 8005bee <__d2b+0x7e>
 8005bb6:	f1c0 0320 	rsb	r3, r0, #32
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	40c2      	lsrs	r2, r0
 8005bc2:	6163      	str	r3, [r4, #20]
 8005bc4:	9201      	str	r2, [sp, #4]
 8005bc6:	9b01      	ldr	r3, [sp, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	bf0c      	ite	eq
 8005bcc:	2201      	moveq	r2, #1
 8005bce:	2202      	movne	r2, #2
 8005bd0:	61a3      	str	r3, [r4, #24]
 8005bd2:	6122      	str	r2, [r4, #16]
 8005bd4:	b1ad      	cbz	r5, 8005c02 <__d2b+0x92>
 8005bd6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005bda:	4405      	add	r5, r0
 8005bdc:	6035      	str	r5, [r6, #0]
 8005bde:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005be4:	6018      	str	r0, [r3, #0]
 8005be6:	4620      	mov	r0, r4
 8005be8:	b002      	add	sp, #8
 8005bea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005bee:	6161      	str	r1, [r4, #20]
 8005bf0:	e7e9      	b.n	8005bc6 <__d2b+0x56>
 8005bf2:	a801      	add	r0, sp, #4
 8005bf4:	f7ff fd61 	bl	80056ba <__lo0bits>
 8005bf8:	9b01      	ldr	r3, [sp, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	6163      	str	r3, [r4, #20]
 8005bfe:	3020      	adds	r0, #32
 8005c00:	e7e7      	b.n	8005bd2 <__d2b+0x62>
 8005c02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005c06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005c0a:	6030      	str	r0, [r6, #0]
 8005c0c:	6918      	ldr	r0, [r3, #16]
 8005c0e:	f7ff fd35 	bl	800567c <__hi0bits>
 8005c12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005c16:	e7e4      	b.n	8005be2 <__d2b+0x72>
 8005c18:	08006806 	.word	0x08006806
 8005c1c:	08006817 	.word	0x08006817

08005c20 <__ssputs_r>:
 8005c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c24:	461f      	mov	r7, r3
 8005c26:	688e      	ldr	r6, [r1, #8]
 8005c28:	4682      	mov	sl, r0
 8005c2a:	42be      	cmp	r6, r7
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	4690      	mov	r8, r2
 8005c30:	680b      	ldr	r3, [r1, #0]
 8005c32:	d82d      	bhi.n	8005c90 <__ssputs_r+0x70>
 8005c34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c3c:	d026      	beq.n	8005c8c <__ssputs_r+0x6c>
 8005c3e:	6965      	ldr	r5, [r4, #20]
 8005c40:	6909      	ldr	r1, [r1, #16]
 8005c42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c46:	eba3 0901 	sub.w	r9, r3, r1
 8005c4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c4e:	1c7b      	adds	r3, r7, #1
 8005c50:	444b      	add	r3, r9
 8005c52:	106d      	asrs	r5, r5, #1
 8005c54:	429d      	cmp	r5, r3
 8005c56:	bf38      	it	cc
 8005c58:	461d      	movcc	r5, r3
 8005c5a:	0553      	lsls	r3, r2, #21
 8005c5c:	d527      	bpl.n	8005cae <__ssputs_r+0x8e>
 8005c5e:	4629      	mov	r1, r5
 8005c60:	f7ff fbd8 	bl	8005414 <_malloc_r>
 8005c64:	4606      	mov	r6, r0
 8005c66:	b360      	cbz	r0, 8005cc2 <__ssputs_r+0xa2>
 8005c68:	464a      	mov	r2, r9
 8005c6a:	6921      	ldr	r1, [r4, #16]
 8005c6c:	f000 fa02 	bl	8006074 <memcpy>
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c7a:	81a3      	strh	r3, [r4, #12]
 8005c7c:	6126      	str	r6, [r4, #16]
 8005c7e:	444e      	add	r6, r9
 8005c80:	6026      	str	r6, [r4, #0]
 8005c82:	463e      	mov	r6, r7
 8005c84:	6165      	str	r5, [r4, #20]
 8005c86:	eba5 0509 	sub.w	r5, r5, r9
 8005c8a:	60a5      	str	r5, [r4, #8]
 8005c8c:	42be      	cmp	r6, r7
 8005c8e:	d900      	bls.n	8005c92 <__ssputs_r+0x72>
 8005c90:	463e      	mov	r6, r7
 8005c92:	4632      	mov	r2, r6
 8005c94:	4641      	mov	r1, r8
 8005c96:	6820      	ldr	r0, [r4, #0]
 8005c98:	f000 f9c2 	bl	8006020 <memmove>
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	68a3      	ldr	r3, [r4, #8]
 8005ca0:	1b9b      	subs	r3, r3, r6
 8005ca2:	60a3      	str	r3, [r4, #8]
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	4433      	add	r3, r6
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cae:	462a      	mov	r2, r5
 8005cb0:	f000 fa32 	bl	8006118 <_realloc_r>
 8005cb4:	4606      	mov	r6, r0
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d1e0      	bne.n	8005c7c <__ssputs_r+0x5c>
 8005cba:	4650      	mov	r0, sl
 8005cbc:	6921      	ldr	r1, [r4, #16]
 8005cbe:	f7ff fb37 	bl	8005330 <_free_r>
 8005cc2:	230c      	movs	r3, #12
 8005cc4:	f8ca 3000 	str.w	r3, [sl]
 8005cc8:	89a3      	ldrh	r3, [r4, #12]
 8005cca:	f04f 30ff 	mov.w	r0, #4294967295
 8005cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cd2:	81a3      	strh	r3, [r4, #12]
 8005cd4:	e7e9      	b.n	8005caa <__ssputs_r+0x8a>
	...

08005cd8 <_svfiprintf_r>:
 8005cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cdc:	4698      	mov	r8, r3
 8005cde:	898b      	ldrh	r3, [r1, #12]
 8005ce0:	4607      	mov	r7, r0
 8005ce2:	061b      	lsls	r3, r3, #24
 8005ce4:	460d      	mov	r5, r1
 8005ce6:	4614      	mov	r4, r2
 8005ce8:	b09d      	sub	sp, #116	@ 0x74
 8005cea:	d510      	bpl.n	8005d0e <_svfiprintf_r+0x36>
 8005cec:	690b      	ldr	r3, [r1, #16]
 8005cee:	b973      	cbnz	r3, 8005d0e <_svfiprintf_r+0x36>
 8005cf0:	2140      	movs	r1, #64	@ 0x40
 8005cf2:	f7ff fb8f 	bl	8005414 <_malloc_r>
 8005cf6:	6028      	str	r0, [r5, #0]
 8005cf8:	6128      	str	r0, [r5, #16]
 8005cfa:	b930      	cbnz	r0, 8005d0a <_svfiprintf_r+0x32>
 8005cfc:	230c      	movs	r3, #12
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295
 8005d04:	b01d      	add	sp, #116	@ 0x74
 8005d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0a:	2340      	movs	r3, #64	@ 0x40
 8005d0c:	616b      	str	r3, [r5, #20]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d12:	2320      	movs	r3, #32
 8005d14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d18:	2330      	movs	r3, #48	@ 0x30
 8005d1a:	f04f 0901 	mov.w	r9, #1
 8005d1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d22:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005ebc <_svfiprintf_r+0x1e4>
 8005d26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d2a:	4623      	mov	r3, r4
 8005d2c:	469a      	mov	sl, r3
 8005d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d32:	b10a      	cbz	r2, 8005d38 <_svfiprintf_r+0x60>
 8005d34:	2a25      	cmp	r2, #37	@ 0x25
 8005d36:	d1f9      	bne.n	8005d2c <_svfiprintf_r+0x54>
 8005d38:	ebba 0b04 	subs.w	fp, sl, r4
 8005d3c:	d00b      	beq.n	8005d56 <_svfiprintf_r+0x7e>
 8005d3e:	465b      	mov	r3, fp
 8005d40:	4622      	mov	r2, r4
 8005d42:	4629      	mov	r1, r5
 8005d44:	4638      	mov	r0, r7
 8005d46:	f7ff ff6b 	bl	8005c20 <__ssputs_r>
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	f000 80a7 	beq.w	8005e9e <_svfiprintf_r+0x1c6>
 8005d50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d52:	445a      	add	r2, fp
 8005d54:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d56:	f89a 3000 	ldrb.w	r3, [sl]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 809f 	beq.w	8005e9e <_svfiprintf_r+0x1c6>
 8005d60:	2300      	movs	r3, #0
 8005d62:	f04f 32ff 	mov.w	r2, #4294967295
 8005d66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d6a:	f10a 0a01 	add.w	sl, sl, #1
 8005d6e:	9304      	str	r3, [sp, #16]
 8005d70:	9307      	str	r3, [sp, #28]
 8005d72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d76:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d78:	4654      	mov	r4, sl
 8005d7a:	2205      	movs	r2, #5
 8005d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d80:	484e      	ldr	r0, [pc, #312]	@ (8005ebc <_svfiprintf_r+0x1e4>)
 8005d82:	f7fe fc68 	bl	8004656 <memchr>
 8005d86:	9a04      	ldr	r2, [sp, #16]
 8005d88:	b9d8      	cbnz	r0, 8005dc2 <_svfiprintf_r+0xea>
 8005d8a:	06d0      	lsls	r0, r2, #27
 8005d8c:	bf44      	itt	mi
 8005d8e:	2320      	movmi	r3, #32
 8005d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d94:	0711      	lsls	r1, r2, #28
 8005d96:	bf44      	itt	mi
 8005d98:	232b      	movmi	r3, #43	@ 0x2b
 8005d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8005da2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005da4:	d015      	beq.n	8005dd2 <_svfiprintf_r+0xfa>
 8005da6:	4654      	mov	r4, sl
 8005da8:	2000      	movs	r0, #0
 8005daa:	f04f 0c0a 	mov.w	ip, #10
 8005dae:	9a07      	ldr	r2, [sp, #28]
 8005db0:	4621      	mov	r1, r4
 8005db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005db6:	3b30      	subs	r3, #48	@ 0x30
 8005db8:	2b09      	cmp	r3, #9
 8005dba:	d94b      	bls.n	8005e54 <_svfiprintf_r+0x17c>
 8005dbc:	b1b0      	cbz	r0, 8005dec <_svfiprintf_r+0x114>
 8005dbe:	9207      	str	r2, [sp, #28]
 8005dc0:	e014      	b.n	8005dec <_svfiprintf_r+0x114>
 8005dc2:	eba0 0308 	sub.w	r3, r0, r8
 8005dc6:	fa09 f303 	lsl.w	r3, r9, r3
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	46a2      	mov	sl, r4
 8005dce:	9304      	str	r3, [sp, #16]
 8005dd0:	e7d2      	b.n	8005d78 <_svfiprintf_r+0xa0>
 8005dd2:	9b03      	ldr	r3, [sp, #12]
 8005dd4:	1d19      	adds	r1, r3, #4
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	9103      	str	r1, [sp, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	bfbb      	ittet	lt
 8005dde:	425b      	neglt	r3, r3
 8005de0:	f042 0202 	orrlt.w	r2, r2, #2
 8005de4:	9307      	strge	r3, [sp, #28]
 8005de6:	9307      	strlt	r3, [sp, #28]
 8005de8:	bfb8      	it	lt
 8005dea:	9204      	strlt	r2, [sp, #16]
 8005dec:	7823      	ldrb	r3, [r4, #0]
 8005dee:	2b2e      	cmp	r3, #46	@ 0x2e
 8005df0:	d10a      	bne.n	8005e08 <_svfiprintf_r+0x130>
 8005df2:	7863      	ldrb	r3, [r4, #1]
 8005df4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005df6:	d132      	bne.n	8005e5e <_svfiprintf_r+0x186>
 8005df8:	9b03      	ldr	r3, [sp, #12]
 8005dfa:	3402      	adds	r4, #2
 8005dfc:	1d1a      	adds	r2, r3, #4
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	9203      	str	r2, [sp, #12]
 8005e02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e06:	9305      	str	r3, [sp, #20]
 8005e08:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005ec0 <_svfiprintf_r+0x1e8>
 8005e0c:	2203      	movs	r2, #3
 8005e0e:	4650      	mov	r0, sl
 8005e10:	7821      	ldrb	r1, [r4, #0]
 8005e12:	f7fe fc20 	bl	8004656 <memchr>
 8005e16:	b138      	cbz	r0, 8005e28 <_svfiprintf_r+0x150>
 8005e18:	2240      	movs	r2, #64	@ 0x40
 8005e1a:	9b04      	ldr	r3, [sp, #16]
 8005e1c:	eba0 000a 	sub.w	r0, r0, sl
 8005e20:	4082      	lsls	r2, r0
 8005e22:	4313      	orrs	r3, r2
 8005e24:	3401      	adds	r4, #1
 8005e26:	9304      	str	r3, [sp, #16]
 8005e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e2c:	2206      	movs	r2, #6
 8005e2e:	4825      	ldr	r0, [pc, #148]	@ (8005ec4 <_svfiprintf_r+0x1ec>)
 8005e30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e34:	f7fe fc0f 	bl	8004656 <memchr>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d036      	beq.n	8005eaa <_svfiprintf_r+0x1d2>
 8005e3c:	4b22      	ldr	r3, [pc, #136]	@ (8005ec8 <_svfiprintf_r+0x1f0>)
 8005e3e:	bb1b      	cbnz	r3, 8005e88 <_svfiprintf_r+0x1b0>
 8005e40:	9b03      	ldr	r3, [sp, #12]
 8005e42:	3307      	adds	r3, #7
 8005e44:	f023 0307 	bic.w	r3, r3, #7
 8005e48:	3308      	adds	r3, #8
 8005e4a:	9303      	str	r3, [sp, #12]
 8005e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e4e:	4433      	add	r3, r6
 8005e50:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e52:	e76a      	b.n	8005d2a <_svfiprintf_r+0x52>
 8005e54:	460c      	mov	r4, r1
 8005e56:	2001      	movs	r0, #1
 8005e58:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e5c:	e7a8      	b.n	8005db0 <_svfiprintf_r+0xd8>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f04f 0c0a 	mov.w	ip, #10
 8005e64:	4619      	mov	r1, r3
 8005e66:	3401      	adds	r4, #1
 8005e68:	9305      	str	r3, [sp, #20]
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e70:	3a30      	subs	r2, #48	@ 0x30
 8005e72:	2a09      	cmp	r2, #9
 8005e74:	d903      	bls.n	8005e7e <_svfiprintf_r+0x1a6>
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d0c6      	beq.n	8005e08 <_svfiprintf_r+0x130>
 8005e7a:	9105      	str	r1, [sp, #20]
 8005e7c:	e7c4      	b.n	8005e08 <_svfiprintf_r+0x130>
 8005e7e:	4604      	mov	r4, r0
 8005e80:	2301      	movs	r3, #1
 8005e82:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e86:	e7f0      	b.n	8005e6a <_svfiprintf_r+0x192>
 8005e88:	ab03      	add	r3, sp, #12
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	462a      	mov	r2, r5
 8005e8e:	4638      	mov	r0, r7
 8005e90:	4b0e      	ldr	r3, [pc, #56]	@ (8005ecc <_svfiprintf_r+0x1f4>)
 8005e92:	a904      	add	r1, sp, #16
 8005e94:	f7fd fe7c 	bl	8003b90 <_printf_float>
 8005e98:	1c42      	adds	r2, r0, #1
 8005e9a:	4606      	mov	r6, r0
 8005e9c:	d1d6      	bne.n	8005e4c <_svfiprintf_r+0x174>
 8005e9e:	89ab      	ldrh	r3, [r5, #12]
 8005ea0:	065b      	lsls	r3, r3, #25
 8005ea2:	f53f af2d 	bmi.w	8005d00 <_svfiprintf_r+0x28>
 8005ea6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ea8:	e72c      	b.n	8005d04 <_svfiprintf_r+0x2c>
 8005eaa:	ab03      	add	r3, sp, #12
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	462a      	mov	r2, r5
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	4b06      	ldr	r3, [pc, #24]	@ (8005ecc <_svfiprintf_r+0x1f4>)
 8005eb4:	a904      	add	r1, sp, #16
 8005eb6:	f7fe f909 	bl	80040cc <_printf_i>
 8005eba:	e7ed      	b.n	8005e98 <_svfiprintf_r+0x1c0>
 8005ebc:	08006870 	.word	0x08006870
 8005ec0:	08006876 	.word	0x08006876
 8005ec4:	0800687a 	.word	0x0800687a
 8005ec8:	08003b91 	.word	0x08003b91
 8005ecc:	08005c21 	.word	0x08005c21

08005ed0 <__sflush_r>:
 8005ed0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed6:	0716      	lsls	r6, r2, #28
 8005ed8:	4605      	mov	r5, r0
 8005eda:	460c      	mov	r4, r1
 8005edc:	d454      	bmi.n	8005f88 <__sflush_r+0xb8>
 8005ede:	684b      	ldr	r3, [r1, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	dc02      	bgt.n	8005eea <__sflush_r+0x1a>
 8005ee4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	dd48      	ble.n	8005f7c <__sflush_r+0xac>
 8005eea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005eec:	2e00      	cmp	r6, #0
 8005eee:	d045      	beq.n	8005f7c <__sflush_r+0xac>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ef6:	682f      	ldr	r7, [r5, #0]
 8005ef8:	6a21      	ldr	r1, [r4, #32]
 8005efa:	602b      	str	r3, [r5, #0]
 8005efc:	d030      	beq.n	8005f60 <__sflush_r+0x90>
 8005efe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	0759      	lsls	r1, r3, #29
 8005f04:	d505      	bpl.n	8005f12 <__sflush_r+0x42>
 8005f06:	6863      	ldr	r3, [r4, #4]
 8005f08:	1ad2      	subs	r2, r2, r3
 8005f0a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f0c:	b10b      	cbz	r3, 8005f12 <__sflush_r+0x42>
 8005f0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f10:	1ad2      	subs	r2, r2, r3
 8005f12:	2300      	movs	r3, #0
 8005f14:	4628      	mov	r0, r5
 8005f16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f18:	6a21      	ldr	r1, [r4, #32]
 8005f1a:	47b0      	blx	r6
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	89a3      	ldrh	r3, [r4, #12]
 8005f20:	d106      	bne.n	8005f30 <__sflush_r+0x60>
 8005f22:	6829      	ldr	r1, [r5, #0]
 8005f24:	291d      	cmp	r1, #29
 8005f26:	d82b      	bhi.n	8005f80 <__sflush_r+0xb0>
 8005f28:	4a28      	ldr	r2, [pc, #160]	@ (8005fcc <__sflush_r+0xfc>)
 8005f2a:	40ca      	lsrs	r2, r1
 8005f2c:	07d6      	lsls	r6, r2, #31
 8005f2e:	d527      	bpl.n	8005f80 <__sflush_r+0xb0>
 8005f30:	2200      	movs	r2, #0
 8005f32:	6062      	str	r2, [r4, #4]
 8005f34:	6922      	ldr	r2, [r4, #16]
 8005f36:	04d9      	lsls	r1, r3, #19
 8005f38:	6022      	str	r2, [r4, #0]
 8005f3a:	d504      	bpl.n	8005f46 <__sflush_r+0x76>
 8005f3c:	1c42      	adds	r2, r0, #1
 8005f3e:	d101      	bne.n	8005f44 <__sflush_r+0x74>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	b903      	cbnz	r3, 8005f46 <__sflush_r+0x76>
 8005f44:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f48:	602f      	str	r7, [r5, #0]
 8005f4a:	b1b9      	cbz	r1, 8005f7c <__sflush_r+0xac>
 8005f4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f50:	4299      	cmp	r1, r3
 8005f52:	d002      	beq.n	8005f5a <__sflush_r+0x8a>
 8005f54:	4628      	mov	r0, r5
 8005f56:	f7ff f9eb 	bl	8005330 <_free_r>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f5e:	e00d      	b.n	8005f7c <__sflush_r+0xac>
 8005f60:	2301      	movs	r3, #1
 8005f62:	4628      	mov	r0, r5
 8005f64:	47b0      	blx	r6
 8005f66:	4602      	mov	r2, r0
 8005f68:	1c50      	adds	r0, r2, #1
 8005f6a:	d1c9      	bne.n	8005f00 <__sflush_r+0x30>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0c6      	beq.n	8005f00 <__sflush_r+0x30>
 8005f72:	2b1d      	cmp	r3, #29
 8005f74:	d001      	beq.n	8005f7a <__sflush_r+0xaa>
 8005f76:	2b16      	cmp	r3, #22
 8005f78:	d11d      	bne.n	8005fb6 <__sflush_r+0xe6>
 8005f7a:	602f      	str	r7, [r5, #0]
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	e021      	b.n	8005fc4 <__sflush_r+0xf4>
 8005f80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f84:	b21b      	sxth	r3, r3
 8005f86:	e01a      	b.n	8005fbe <__sflush_r+0xee>
 8005f88:	690f      	ldr	r7, [r1, #16]
 8005f8a:	2f00      	cmp	r7, #0
 8005f8c:	d0f6      	beq.n	8005f7c <__sflush_r+0xac>
 8005f8e:	0793      	lsls	r3, r2, #30
 8005f90:	bf18      	it	ne
 8005f92:	2300      	movne	r3, #0
 8005f94:	680e      	ldr	r6, [r1, #0]
 8005f96:	bf08      	it	eq
 8005f98:	694b      	ldreq	r3, [r1, #20]
 8005f9a:	1bf6      	subs	r6, r6, r7
 8005f9c:	600f      	str	r7, [r1, #0]
 8005f9e:	608b      	str	r3, [r1, #8]
 8005fa0:	2e00      	cmp	r6, #0
 8005fa2:	ddeb      	ble.n	8005f7c <__sflush_r+0xac>
 8005fa4:	4633      	mov	r3, r6
 8005fa6:	463a      	mov	r2, r7
 8005fa8:	4628      	mov	r0, r5
 8005faa:	6a21      	ldr	r1, [r4, #32]
 8005fac:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005fb0:	47e0      	blx	ip
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	dc07      	bgt.n	8005fc6 <__sflush_r+0xf6>
 8005fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc2:	81a3      	strh	r3, [r4, #12]
 8005fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fc6:	4407      	add	r7, r0
 8005fc8:	1a36      	subs	r6, r6, r0
 8005fca:	e7e9      	b.n	8005fa0 <__sflush_r+0xd0>
 8005fcc:	20400001 	.word	0x20400001

08005fd0 <_fflush_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	690b      	ldr	r3, [r1, #16]
 8005fd4:	4605      	mov	r5, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	b913      	cbnz	r3, 8005fe0 <_fflush_r+0x10>
 8005fda:	2500      	movs	r5, #0
 8005fdc:	4628      	mov	r0, r5
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	b118      	cbz	r0, 8005fea <_fflush_r+0x1a>
 8005fe2:	6a03      	ldr	r3, [r0, #32]
 8005fe4:	b90b      	cbnz	r3, 8005fea <_fflush_r+0x1a>
 8005fe6:	f7fe fa1b 	bl	8004420 <__sinit>
 8005fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0f3      	beq.n	8005fda <_fflush_r+0xa>
 8005ff2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ff4:	07d0      	lsls	r0, r2, #31
 8005ff6:	d404      	bmi.n	8006002 <_fflush_r+0x32>
 8005ff8:	0599      	lsls	r1, r3, #22
 8005ffa:	d402      	bmi.n	8006002 <_fflush_r+0x32>
 8005ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ffe:	f7fe fb28 	bl	8004652 <__retarget_lock_acquire_recursive>
 8006002:	4628      	mov	r0, r5
 8006004:	4621      	mov	r1, r4
 8006006:	f7ff ff63 	bl	8005ed0 <__sflush_r>
 800600a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800600c:	4605      	mov	r5, r0
 800600e:	07da      	lsls	r2, r3, #31
 8006010:	d4e4      	bmi.n	8005fdc <_fflush_r+0xc>
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	059b      	lsls	r3, r3, #22
 8006016:	d4e1      	bmi.n	8005fdc <_fflush_r+0xc>
 8006018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800601a:	f7fe fb1b 	bl	8004654 <__retarget_lock_release_recursive>
 800601e:	e7dd      	b.n	8005fdc <_fflush_r+0xc>

08006020 <memmove>:
 8006020:	4288      	cmp	r0, r1
 8006022:	b510      	push	{r4, lr}
 8006024:	eb01 0402 	add.w	r4, r1, r2
 8006028:	d902      	bls.n	8006030 <memmove+0x10>
 800602a:	4284      	cmp	r4, r0
 800602c:	4623      	mov	r3, r4
 800602e:	d807      	bhi.n	8006040 <memmove+0x20>
 8006030:	1e43      	subs	r3, r0, #1
 8006032:	42a1      	cmp	r1, r4
 8006034:	d008      	beq.n	8006048 <memmove+0x28>
 8006036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800603a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800603e:	e7f8      	b.n	8006032 <memmove+0x12>
 8006040:	4601      	mov	r1, r0
 8006042:	4402      	add	r2, r0
 8006044:	428a      	cmp	r2, r1
 8006046:	d100      	bne.n	800604a <memmove+0x2a>
 8006048:	bd10      	pop	{r4, pc}
 800604a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800604e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006052:	e7f7      	b.n	8006044 <memmove+0x24>

08006054 <_sbrk_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	2300      	movs	r3, #0
 8006058:	4d05      	ldr	r5, [pc, #20]	@ (8006070 <_sbrk_r+0x1c>)
 800605a:	4604      	mov	r4, r0
 800605c:	4608      	mov	r0, r1
 800605e:	602b      	str	r3, [r5, #0]
 8006060:	f7fb fe90 	bl	8001d84 <_sbrk>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d102      	bne.n	800606e <_sbrk_r+0x1a>
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	b103      	cbz	r3, 800606e <_sbrk_r+0x1a>
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	2000044c 	.word	0x2000044c

08006074 <memcpy>:
 8006074:	440a      	add	r2, r1
 8006076:	4291      	cmp	r1, r2
 8006078:	f100 33ff 	add.w	r3, r0, #4294967295
 800607c:	d100      	bne.n	8006080 <memcpy+0xc>
 800607e:	4770      	bx	lr
 8006080:	b510      	push	{r4, lr}
 8006082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006086:	4291      	cmp	r1, r2
 8006088:	f803 4f01 	strb.w	r4, [r3, #1]!
 800608c:	d1f9      	bne.n	8006082 <memcpy+0xe>
 800608e:	bd10      	pop	{r4, pc}

08006090 <__assert_func>:
 8006090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006092:	4614      	mov	r4, r2
 8006094:	461a      	mov	r2, r3
 8006096:	4b09      	ldr	r3, [pc, #36]	@ (80060bc <__assert_func+0x2c>)
 8006098:	4605      	mov	r5, r0
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68d8      	ldr	r0, [r3, #12]
 800609e:	b14c      	cbz	r4, 80060b4 <__assert_func+0x24>
 80060a0:	4b07      	ldr	r3, [pc, #28]	@ (80060c0 <__assert_func+0x30>)
 80060a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80060a6:	9100      	str	r1, [sp, #0]
 80060a8:	462b      	mov	r3, r5
 80060aa:	4906      	ldr	r1, [pc, #24]	@ (80060c4 <__assert_func+0x34>)
 80060ac:	f000 f870 	bl	8006190 <fiprintf>
 80060b0:	f000 f880 	bl	80061b4 <abort>
 80060b4:	4b04      	ldr	r3, [pc, #16]	@ (80060c8 <__assert_func+0x38>)
 80060b6:	461c      	mov	r4, r3
 80060b8:	e7f3      	b.n	80060a2 <__assert_func+0x12>
 80060ba:	bf00      	nop
 80060bc:	20000048 	.word	0x20000048
 80060c0:	0800688b 	.word	0x0800688b
 80060c4:	08006898 	.word	0x08006898
 80060c8:	080068c6 	.word	0x080068c6

080060cc <_calloc_r>:
 80060cc:	b570      	push	{r4, r5, r6, lr}
 80060ce:	fba1 5402 	umull	r5, r4, r1, r2
 80060d2:	b934      	cbnz	r4, 80060e2 <_calloc_r+0x16>
 80060d4:	4629      	mov	r1, r5
 80060d6:	f7ff f99d 	bl	8005414 <_malloc_r>
 80060da:	4606      	mov	r6, r0
 80060dc:	b928      	cbnz	r0, 80060ea <_calloc_r+0x1e>
 80060de:	4630      	mov	r0, r6
 80060e0:	bd70      	pop	{r4, r5, r6, pc}
 80060e2:	220c      	movs	r2, #12
 80060e4:	2600      	movs	r6, #0
 80060e6:	6002      	str	r2, [r0, #0]
 80060e8:	e7f9      	b.n	80060de <_calloc_r+0x12>
 80060ea:	462a      	mov	r2, r5
 80060ec:	4621      	mov	r1, r4
 80060ee:	f7fe fa32 	bl	8004556 <memset>
 80060f2:	e7f4      	b.n	80060de <_calloc_r+0x12>

080060f4 <__ascii_mbtowc>:
 80060f4:	b082      	sub	sp, #8
 80060f6:	b901      	cbnz	r1, 80060fa <__ascii_mbtowc+0x6>
 80060f8:	a901      	add	r1, sp, #4
 80060fa:	b142      	cbz	r2, 800610e <__ascii_mbtowc+0x1a>
 80060fc:	b14b      	cbz	r3, 8006112 <__ascii_mbtowc+0x1e>
 80060fe:	7813      	ldrb	r3, [r2, #0]
 8006100:	600b      	str	r3, [r1, #0]
 8006102:	7812      	ldrb	r2, [r2, #0]
 8006104:	1e10      	subs	r0, r2, #0
 8006106:	bf18      	it	ne
 8006108:	2001      	movne	r0, #1
 800610a:	b002      	add	sp, #8
 800610c:	4770      	bx	lr
 800610e:	4610      	mov	r0, r2
 8006110:	e7fb      	b.n	800610a <__ascii_mbtowc+0x16>
 8006112:	f06f 0001 	mvn.w	r0, #1
 8006116:	e7f8      	b.n	800610a <__ascii_mbtowc+0x16>

08006118 <_realloc_r>:
 8006118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800611c:	4607      	mov	r7, r0
 800611e:	4614      	mov	r4, r2
 8006120:	460d      	mov	r5, r1
 8006122:	b921      	cbnz	r1, 800612e <_realloc_r+0x16>
 8006124:	4611      	mov	r1, r2
 8006126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800612a:	f7ff b973 	b.w	8005414 <_malloc_r>
 800612e:	b92a      	cbnz	r2, 800613c <_realloc_r+0x24>
 8006130:	f7ff f8fe 	bl	8005330 <_free_r>
 8006134:	4625      	mov	r5, r4
 8006136:	4628      	mov	r0, r5
 8006138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800613c:	f000 f841 	bl	80061c2 <_malloc_usable_size_r>
 8006140:	4284      	cmp	r4, r0
 8006142:	4606      	mov	r6, r0
 8006144:	d802      	bhi.n	800614c <_realloc_r+0x34>
 8006146:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800614a:	d8f4      	bhi.n	8006136 <_realloc_r+0x1e>
 800614c:	4621      	mov	r1, r4
 800614e:	4638      	mov	r0, r7
 8006150:	f7ff f960 	bl	8005414 <_malloc_r>
 8006154:	4680      	mov	r8, r0
 8006156:	b908      	cbnz	r0, 800615c <_realloc_r+0x44>
 8006158:	4645      	mov	r5, r8
 800615a:	e7ec      	b.n	8006136 <_realloc_r+0x1e>
 800615c:	42b4      	cmp	r4, r6
 800615e:	4622      	mov	r2, r4
 8006160:	4629      	mov	r1, r5
 8006162:	bf28      	it	cs
 8006164:	4632      	movcs	r2, r6
 8006166:	f7ff ff85 	bl	8006074 <memcpy>
 800616a:	4629      	mov	r1, r5
 800616c:	4638      	mov	r0, r7
 800616e:	f7ff f8df 	bl	8005330 <_free_r>
 8006172:	e7f1      	b.n	8006158 <_realloc_r+0x40>

08006174 <__ascii_wctomb>:
 8006174:	4603      	mov	r3, r0
 8006176:	4608      	mov	r0, r1
 8006178:	b141      	cbz	r1, 800618c <__ascii_wctomb+0x18>
 800617a:	2aff      	cmp	r2, #255	@ 0xff
 800617c:	d904      	bls.n	8006188 <__ascii_wctomb+0x14>
 800617e:	228a      	movs	r2, #138	@ 0x8a
 8006180:	f04f 30ff 	mov.w	r0, #4294967295
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	4770      	bx	lr
 8006188:	2001      	movs	r0, #1
 800618a:	700a      	strb	r2, [r1, #0]
 800618c:	4770      	bx	lr
	...

08006190 <fiprintf>:
 8006190:	b40e      	push	{r1, r2, r3}
 8006192:	b503      	push	{r0, r1, lr}
 8006194:	4601      	mov	r1, r0
 8006196:	ab03      	add	r3, sp, #12
 8006198:	4805      	ldr	r0, [pc, #20]	@ (80061b0 <fiprintf+0x20>)
 800619a:	f853 2b04 	ldr.w	r2, [r3], #4
 800619e:	6800      	ldr	r0, [r0, #0]
 80061a0:	9301      	str	r3, [sp, #4]
 80061a2:	f000 f83d 	bl	8006220 <_vfiprintf_r>
 80061a6:	b002      	add	sp, #8
 80061a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061ac:	b003      	add	sp, #12
 80061ae:	4770      	bx	lr
 80061b0:	20000048 	.word	0x20000048

080061b4 <abort>:
 80061b4:	2006      	movs	r0, #6
 80061b6:	b508      	push	{r3, lr}
 80061b8:	f000 fa06 	bl	80065c8 <raise>
 80061bc:	2001      	movs	r0, #1
 80061be:	f7fb fd6d 	bl	8001c9c <_exit>

080061c2 <_malloc_usable_size_r>:
 80061c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c6:	1f18      	subs	r0, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bfbc      	itt	lt
 80061cc:	580b      	ldrlt	r3, [r1, r0]
 80061ce:	18c0      	addlt	r0, r0, r3
 80061d0:	4770      	bx	lr

080061d2 <__sfputc_r>:
 80061d2:	6893      	ldr	r3, [r2, #8]
 80061d4:	b410      	push	{r4}
 80061d6:	3b01      	subs	r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	6093      	str	r3, [r2, #8]
 80061dc:	da07      	bge.n	80061ee <__sfputc_r+0x1c>
 80061de:	6994      	ldr	r4, [r2, #24]
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	db01      	blt.n	80061e8 <__sfputc_r+0x16>
 80061e4:	290a      	cmp	r1, #10
 80061e6:	d102      	bne.n	80061ee <__sfputc_r+0x1c>
 80061e8:	bc10      	pop	{r4}
 80061ea:	f000 b931 	b.w	8006450 <__swbuf_r>
 80061ee:	6813      	ldr	r3, [r2, #0]
 80061f0:	1c58      	adds	r0, r3, #1
 80061f2:	6010      	str	r0, [r2, #0]
 80061f4:	7019      	strb	r1, [r3, #0]
 80061f6:	4608      	mov	r0, r1
 80061f8:	bc10      	pop	{r4}
 80061fa:	4770      	bx	lr

080061fc <__sfputs_r>:
 80061fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fe:	4606      	mov	r6, r0
 8006200:	460f      	mov	r7, r1
 8006202:	4614      	mov	r4, r2
 8006204:	18d5      	adds	r5, r2, r3
 8006206:	42ac      	cmp	r4, r5
 8006208:	d101      	bne.n	800620e <__sfputs_r+0x12>
 800620a:	2000      	movs	r0, #0
 800620c:	e007      	b.n	800621e <__sfputs_r+0x22>
 800620e:	463a      	mov	r2, r7
 8006210:	4630      	mov	r0, r6
 8006212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006216:	f7ff ffdc 	bl	80061d2 <__sfputc_r>
 800621a:	1c43      	adds	r3, r0, #1
 800621c:	d1f3      	bne.n	8006206 <__sfputs_r+0xa>
 800621e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006220 <_vfiprintf_r>:
 8006220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	460d      	mov	r5, r1
 8006226:	4614      	mov	r4, r2
 8006228:	4698      	mov	r8, r3
 800622a:	4606      	mov	r6, r0
 800622c:	b09d      	sub	sp, #116	@ 0x74
 800622e:	b118      	cbz	r0, 8006238 <_vfiprintf_r+0x18>
 8006230:	6a03      	ldr	r3, [r0, #32]
 8006232:	b90b      	cbnz	r3, 8006238 <_vfiprintf_r+0x18>
 8006234:	f7fe f8f4 	bl	8004420 <__sinit>
 8006238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800623a:	07d9      	lsls	r1, r3, #31
 800623c:	d405      	bmi.n	800624a <_vfiprintf_r+0x2a>
 800623e:	89ab      	ldrh	r3, [r5, #12]
 8006240:	059a      	lsls	r2, r3, #22
 8006242:	d402      	bmi.n	800624a <_vfiprintf_r+0x2a>
 8006244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006246:	f7fe fa04 	bl	8004652 <__retarget_lock_acquire_recursive>
 800624a:	89ab      	ldrh	r3, [r5, #12]
 800624c:	071b      	lsls	r3, r3, #28
 800624e:	d501      	bpl.n	8006254 <_vfiprintf_r+0x34>
 8006250:	692b      	ldr	r3, [r5, #16]
 8006252:	b99b      	cbnz	r3, 800627c <_vfiprintf_r+0x5c>
 8006254:	4629      	mov	r1, r5
 8006256:	4630      	mov	r0, r6
 8006258:	f000 f938 	bl	80064cc <__swsetup_r>
 800625c:	b170      	cbz	r0, 800627c <_vfiprintf_r+0x5c>
 800625e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006260:	07dc      	lsls	r4, r3, #31
 8006262:	d504      	bpl.n	800626e <_vfiprintf_r+0x4e>
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	b01d      	add	sp, #116	@ 0x74
 800626a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800626e:	89ab      	ldrh	r3, [r5, #12]
 8006270:	0598      	lsls	r0, r3, #22
 8006272:	d4f7      	bmi.n	8006264 <_vfiprintf_r+0x44>
 8006274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006276:	f7fe f9ed 	bl	8004654 <__retarget_lock_release_recursive>
 800627a:	e7f3      	b.n	8006264 <_vfiprintf_r+0x44>
 800627c:	2300      	movs	r3, #0
 800627e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006280:	2320      	movs	r3, #32
 8006282:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006286:	2330      	movs	r3, #48	@ 0x30
 8006288:	f04f 0901 	mov.w	r9, #1
 800628c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006290:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800643c <_vfiprintf_r+0x21c>
 8006294:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006298:	4623      	mov	r3, r4
 800629a:	469a      	mov	sl, r3
 800629c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062a0:	b10a      	cbz	r2, 80062a6 <_vfiprintf_r+0x86>
 80062a2:	2a25      	cmp	r2, #37	@ 0x25
 80062a4:	d1f9      	bne.n	800629a <_vfiprintf_r+0x7a>
 80062a6:	ebba 0b04 	subs.w	fp, sl, r4
 80062aa:	d00b      	beq.n	80062c4 <_vfiprintf_r+0xa4>
 80062ac:	465b      	mov	r3, fp
 80062ae:	4622      	mov	r2, r4
 80062b0:	4629      	mov	r1, r5
 80062b2:	4630      	mov	r0, r6
 80062b4:	f7ff ffa2 	bl	80061fc <__sfputs_r>
 80062b8:	3001      	adds	r0, #1
 80062ba:	f000 80a7 	beq.w	800640c <_vfiprintf_r+0x1ec>
 80062be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062c0:	445a      	add	r2, fp
 80062c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80062c4:	f89a 3000 	ldrb.w	r3, [sl]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 809f 	beq.w	800640c <_vfiprintf_r+0x1ec>
 80062ce:	2300      	movs	r3, #0
 80062d0:	f04f 32ff 	mov.w	r2, #4294967295
 80062d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062d8:	f10a 0a01 	add.w	sl, sl, #1
 80062dc:	9304      	str	r3, [sp, #16]
 80062de:	9307      	str	r3, [sp, #28]
 80062e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80062e6:	4654      	mov	r4, sl
 80062e8:	2205      	movs	r2, #5
 80062ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ee:	4853      	ldr	r0, [pc, #332]	@ (800643c <_vfiprintf_r+0x21c>)
 80062f0:	f7fe f9b1 	bl	8004656 <memchr>
 80062f4:	9a04      	ldr	r2, [sp, #16]
 80062f6:	b9d8      	cbnz	r0, 8006330 <_vfiprintf_r+0x110>
 80062f8:	06d1      	lsls	r1, r2, #27
 80062fa:	bf44      	itt	mi
 80062fc:	2320      	movmi	r3, #32
 80062fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006302:	0713      	lsls	r3, r2, #28
 8006304:	bf44      	itt	mi
 8006306:	232b      	movmi	r3, #43	@ 0x2b
 8006308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800630c:	f89a 3000 	ldrb.w	r3, [sl]
 8006310:	2b2a      	cmp	r3, #42	@ 0x2a
 8006312:	d015      	beq.n	8006340 <_vfiprintf_r+0x120>
 8006314:	4654      	mov	r4, sl
 8006316:	2000      	movs	r0, #0
 8006318:	f04f 0c0a 	mov.w	ip, #10
 800631c:	9a07      	ldr	r2, [sp, #28]
 800631e:	4621      	mov	r1, r4
 8006320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006324:	3b30      	subs	r3, #48	@ 0x30
 8006326:	2b09      	cmp	r3, #9
 8006328:	d94b      	bls.n	80063c2 <_vfiprintf_r+0x1a2>
 800632a:	b1b0      	cbz	r0, 800635a <_vfiprintf_r+0x13a>
 800632c:	9207      	str	r2, [sp, #28]
 800632e:	e014      	b.n	800635a <_vfiprintf_r+0x13a>
 8006330:	eba0 0308 	sub.w	r3, r0, r8
 8006334:	fa09 f303 	lsl.w	r3, r9, r3
 8006338:	4313      	orrs	r3, r2
 800633a:	46a2      	mov	sl, r4
 800633c:	9304      	str	r3, [sp, #16]
 800633e:	e7d2      	b.n	80062e6 <_vfiprintf_r+0xc6>
 8006340:	9b03      	ldr	r3, [sp, #12]
 8006342:	1d19      	adds	r1, r3, #4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	9103      	str	r1, [sp, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	bfbb      	ittet	lt
 800634c:	425b      	neglt	r3, r3
 800634e:	f042 0202 	orrlt.w	r2, r2, #2
 8006352:	9307      	strge	r3, [sp, #28]
 8006354:	9307      	strlt	r3, [sp, #28]
 8006356:	bfb8      	it	lt
 8006358:	9204      	strlt	r2, [sp, #16]
 800635a:	7823      	ldrb	r3, [r4, #0]
 800635c:	2b2e      	cmp	r3, #46	@ 0x2e
 800635e:	d10a      	bne.n	8006376 <_vfiprintf_r+0x156>
 8006360:	7863      	ldrb	r3, [r4, #1]
 8006362:	2b2a      	cmp	r3, #42	@ 0x2a
 8006364:	d132      	bne.n	80063cc <_vfiprintf_r+0x1ac>
 8006366:	9b03      	ldr	r3, [sp, #12]
 8006368:	3402      	adds	r4, #2
 800636a:	1d1a      	adds	r2, r3, #4
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	9203      	str	r2, [sp, #12]
 8006370:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006374:	9305      	str	r3, [sp, #20]
 8006376:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006440 <_vfiprintf_r+0x220>
 800637a:	2203      	movs	r2, #3
 800637c:	4650      	mov	r0, sl
 800637e:	7821      	ldrb	r1, [r4, #0]
 8006380:	f7fe f969 	bl	8004656 <memchr>
 8006384:	b138      	cbz	r0, 8006396 <_vfiprintf_r+0x176>
 8006386:	2240      	movs	r2, #64	@ 0x40
 8006388:	9b04      	ldr	r3, [sp, #16]
 800638a:	eba0 000a 	sub.w	r0, r0, sl
 800638e:	4082      	lsls	r2, r0
 8006390:	4313      	orrs	r3, r2
 8006392:	3401      	adds	r4, #1
 8006394:	9304      	str	r3, [sp, #16]
 8006396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800639a:	2206      	movs	r2, #6
 800639c:	4829      	ldr	r0, [pc, #164]	@ (8006444 <_vfiprintf_r+0x224>)
 800639e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063a2:	f7fe f958 	bl	8004656 <memchr>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d03f      	beq.n	800642a <_vfiprintf_r+0x20a>
 80063aa:	4b27      	ldr	r3, [pc, #156]	@ (8006448 <_vfiprintf_r+0x228>)
 80063ac:	bb1b      	cbnz	r3, 80063f6 <_vfiprintf_r+0x1d6>
 80063ae:	9b03      	ldr	r3, [sp, #12]
 80063b0:	3307      	adds	r3, #7
 80063b2:	f023 0307 	bic.w	r3, r3, #7
 80063b6:	3308      	adds	r3, #8
 80063b8:	9303      	str	r3, [sp, #12]
 80063ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063bc:	443b      	add	r3, r7
 80063be:	9309      	str	r3, [sp, #36]	@ 0x24
 80063c0:	e76a      	b.n	8006298 <_vfiprintf_r+0x78>
 80063c2:	460c      	mov	r4, r1
 80063c4:	2001      	movs	r0, #1
 80063c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80063ca:	e7a8      	b.n	800631e <_vfiprintf_r+0xfe>
 80063cc:	2300      	movs	r3, #0
 80063ce:	f04f 0c0a 	mov.w	ip, #10
 80063d2:	4619      	mov	r1, r3
 80063d4:	3401      	adds	r4, #1
 80063d6:	9305      	str	r3, [sp, #20]
 80063d8:	4620      	mov	r0, r4
 80063da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063de:	3a30      	subs	r2, #48	@ 0x30
 80063e0:	2a09      	cmp	r2, #9
 80063e2:	d903      	bls.n	80063ec <_vfiprintf_r+0x1cc>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d0c6      	beq.n	8006376 <_vfiprintf_r+0x156>
 80063e8:	9105      	str	r1, [sp, #20]
 80063ea:	e7c4      	b.n	8006376 <_vfiprintf_r+0x156>
 80063ec:	4604      	mov	r4, r0
 80063ee:	2301      	movs	r3, #1
 80063f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80063f4:	e7f0      	b.n	80063d8 <_vfiprintf_r+0x1b8>
 80063f6:	ab03      	add	r3, sp, #12
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	462a      	mov	r2, r5
 80063fc:	4630      	mov	r0, r6
 80063fe:	4b13      	ldr	r3, [pc, #76]	@ (800644c <_vfiprintf_r+0x22c>)
 8006400:	a904      	add	r1, sp, #16
 8006402:	f7fd fbc5 	bl	8003b90 <_printf_float>
 8006406:	4607      	mov	r7, r0
 8006408:	1c78      	adds	r0, r7, #1
 800640a:	d1d6      	bne.n	80063ba <_vfiprintf_r+0x19a>
 800640c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800640e:	07d9      	lsls	r1, r3, #31
 8006410:	d405      	bmi.n	800641e <_vfiprintf_r+0x1fe>
 8006412:	89ab      	ldrh	r3, [r5, #12]
 8006414:	059a      	lsls	r2, r3, #22
 8006416:	d402      	bmi.n	800641e <_vfiprintf_r+0x1fe>
 8006418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800641a:	f7fe f91b 	bl	8004654 <__retarget_lock_release_recursive>
 800641e:	89ab      	ldrh	r3, [r5, #12]
 8006420:	065b      	lsls	r3, r3, #25
 8006422:	f53f af1f 	bmi.w	8006264 <_vfiprintf_r+0x44>
 8006426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006428:	e71e      	b.n	8006268 <_vfiprintf_r+0x48>
 800642a:	ab03      	add	r3, sp, #12
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	462a      	mov	r2, r5
 8006430:	4630      	mov	r0, r6
 8006432:	4b06      	ldr	r3, [pc, #24]	@ (800644c <_vfiprintf_r+0x22c>)
 8006434:	a904      	add	r1, sp, #16
 8006436:	f7fd fe49 	bl	80040cc <_printf_i>
 800643a:	e7e4      	b.n	8006406 <_vfiprintf_r+0x1e6>
 800643c:	08006870 	.word	0x08006870
 8006440:	08006876 	.word	0x08006876
 8006444:	0800687a 	.word	0x0800687a
 8006448:	08003b91 	.word	0x08003b91
 800644c:	080061fd 	.word	0x080061fd

08006450 <__swbuf_r>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	460e      	mov	r6, r1
 8006454:	4614      	mov	r4, r2
 8006456:	4605      	mov	r5, r0
 8006458:	b118      	cbz	r0, 8006462 <__swbuf_r+0x12>
 800645a:	6a03      	ldr	r3, [r0, #32]
 800645c:	b90b      	cbnz	r3, 8006462 <__swbuf_r+0x12>
 800645e:	f7fd ffdf 	bl	8004420 <__sinit>
 8006462:	69a3      	ldr	r3, [r4, #24]
 8006464:	60a3      	str	r3, [r4, #8]
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	071a      	lsls	r2, r3, #28
 800646a:	d501      	bpl.n	8006470 <__swbuf_r+0x20>
 800646c:	6923      	ldr	r3, [r4, #16]
 800646e:	b943      	cbnz	r3, 8006482 <__swbuf_r+0x32>
 8006470:	4621      	mov	r1, r4
 8006472:	4628      	mov	r0, r5
 8006474:	f000 f82a 	bl	80064cc <__swsetup_r>
 8006478:	b118      	cbz	r0, 8006482 <__swbuf_r+0x32>
 800647a:	f04f 37ff 	mov.w	r7, #4294967295
 800647e:	4638      	mov	r0, r7
 8006480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	6922      	ldr	r2, [r4, #16]
 8006486:	b2f6      	uxtb	r6, r6
 8006488:	1a98      	subs	r0, r3, r2
 800648a:	6963      	ldr	r3, [r4, #20]
 800648c:	4637      	mov	r7, r6
 800648e:	4283      	cmp	r3, r0
 8006490:	dc05      	bgt.n	800649e <__swbuf_r+0x4e>
 8006492:	4621      	mov	r1, r4
 8006494:	4628      	mov	r0, r5
 8006496:	f7ff fd9b 	bl	8005fd0 <_fflush_r>
 800649a:	2800      	cmp	r0, #0
 800649c:	d1ed      	bne.n	800647a <__swbuf_r+0x2a>
 800649e:	68a3      	ldr	r3, [r4, #8]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	60a3      	str	r3, [r4, #8]
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	6022      	str	r2, [r4, #0]
 80064aa:	701e      	strb	r6, [r3, #0]
 80064ac:	6962      	ldr	r2, [r4, #20]
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d004      	beq.n	80064be <__swbuf_r+0x6e>
 80064b4:	89a3      	ldrh	r3, [r4, #12]
 80064b6:	07db      	lsls	r3, r3, #31
 80064b8:	d5e1      	bpl.n	800647e <__swbuf_r+0x2e>
 80064ba:	2e0a      	cmp	r6, #10
 80064bc:	d1df      	bne.n	800647e <__swbuf_r+0x2e>
 80064be:	4621      	mov	r1, r4
 80064c0:	4628      	mov	r0, r5
 80064c2:	f7ff fd85 	bl	8005fd0 <_fflush_r>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d0d9      	beq.n	800647e <__swbuf_r+0x2e>
 80064ca:	e7d6      	b.n	800647a <__swbuf_r+0x2a>

080064cc <__swsetup_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	4b29      	ldr	r3, [pc, #164]	@ (8006574 <__swsetup_r+0xa8>)
 80064d0:	4605      	mov	r5, r0
 80064d2:	6818      	ldr	r0, [r3, #0]
 80064d4:	460c      	mov	r4, r1
 80064d6:	b118      	cbz	r0, 80064e0 <__swsetup_r+0x14>
 80064d8:	6a03      	ldr	r3, [r0, #32]
 80064da:	b90b      	cbnz	r3, 80064e0 <__swsetup_r+0x14>
 80064dc:	f7fd ffa0 	bl	8004420 <__sinit>
 80064e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064e4:	0719      	lsls	r1, r3, #28
 80064e6:	d422      	bmi.n	800652e <__swsetup_r+0x62>
 80064e8:	06da      	lsls	r2, r3, #27
 80064ea:	d407      	bmi.n	80064fc <__swsetup_r+0x30>
 80064ec:	2209      	movs	r2, #9
 80064ee:	602a      	str	r2, [r5, #0]
 80064f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064f4:	f04f 30ff 	mov.w	r0, #4294967295
 80064f8:	81a3      	strh	r3, [r4, #12]
 80064fa:	e033      	b.n	8006564 <__swsetup_r+0x98>
 80064fc:	0758      	lsls	r0, r3, #29
 80064fe:	d512      	bpl.n	8006526 <__swsetup_r+0x5a>
 8006500:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006502:	b141      	cbz	r1, 8006516 <__swsetup_r+0x4a>
 8006504:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006508:	4299      	cmp	r1, r3
 800650a:	d002      	beq.n	8006512 <__swsetup_r+0x46>
 800650c:	4628      	mov	r0, r5
 800650e:	f7fe ff0f 	bl	8005330 <_free_r>
 8006512:	2300      	movs	r3, #0
 8006514:	6363      	str	r3, [r4, #52]	@ 0x34
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800651c:	81a3      	strh	r3, [r4, #12]
 800651e:	2300      	movs	r3, #0
 8006520:	6063      	str	r3, [r4, #4]
 8006522:	6923      	ldr	r3, [r4, #16]
 8006524:	6023      	str	r3, [r4, #0]
 8006526:	89a3      	ldrh	r3, [r4, #12]
 8006528:	f043 0308 	orr.w	r3, r3, #8
 800652c:	81a3      	strh	r3, [r4, #12]
 800652e:	6923      	ldr	r3, [r4, #16]
 8006530:	b94b      	cbnz	r3, 8006546 <__swsetup_r+0x7a>
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800653c:	d003      	beq.n	8006546 <__swsetup_r+0x7a>
 800653e:	4621      	mov	r1, r4
 8006540:	4628      	mov	r0, r5
 8006542:	f000 f882 	bl	800664a <__smakebuf_r>
 8006546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800654a:	f013 0201 	ands.w	r2, r3, #1
 800654e:	d00a      	beq.n	8006566 <__swsetup_r+0x9a>
 8006550:	2200      	movs	r2, #0
 8006552:	60a2      	str	r2, [r4, #8]
 8006554:	6962      	ldr	r2, [r4, #20]
 8006556:	4252      	negs	r2, r2
 8006558:	61a2      	str	r2, [r4, #24]
 800655a:	6922      	ldr	r2, [r4, #16]
 800655c:	b942      	cbnz	r2, 8006570 <__swsetup_r+0xa4>
 800655e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006562:	d1c5      	bne.n	80064f0 <__swsetup_r+0x24>
 8006564:	bd38      	pop	{r3, r4, r5, pc}
 8006566:	0799      	lsls	r1, r3, #30
 8006568:	bf58      	it	pl
 800656a:	6962      	ldrpl	r2, [r4, #20]
 800656c:	60a2      	str	r2, [r4, #8]
 800656e:	e7f4      	b.n	800655a <__swsetup_r+0x8e>
 8006570:	2000      	movs	r0, #0
 8006572:	e7f7      	b.n	8006564 <__swsetup_r+0x98>
 8006574:	20000048 	.word	0x20000048

08006578 <_raise_r>:
 8006578:	291f      	cmp	r1, #31
 800657a:	b538      	push	{r3, r4, r5, lr}
 800657c:	4605      	mov	r5, r0
 800657e:	460c      	mov	r4, r1
 8006580:	d904      	bls.n	800658c <_raise_r+0x14>
 8006582:	2316      	movs	r3, #22
 8006584:	6003      	str	r3, [r0, #0]
 8006586:	f04f 30ff 	mov.w	r0, #4294967295
 800658a:	bd38      	pop	{r3, r4, r5, pc}
 800658c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800658e:	b112      	cbz	r2, 8006596 <_raise_r+0x1e>
 8006590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006594:	b94b      	cbnz	r3, 80065aa <_raise_r+0x32>
 8006596:	4628      	mov	r0, r5
 8006598:	f000 f830 	bl	80065fc <_getpid_r>
 800659c:	4622      	mov	r2, r4
 800659e:	4601      	mov	r1, r0
 80065a0:	4628      	mov	r0, r5
 80065a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065a6:	f000 b817 	b.w	80065d8 <_kill_r>
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d00a      	beq.n	80065c4 <_raise_r+0x4c>
 80065ae:	1c59      	adds	r1, r3, #1
 80065b0:	d103      	bne.n	80065ba <_raise_r+0x42>
 80065b2:	2316      	movs	r3, #22
 80065b4:	6003      	str	r3, [r0, #0]
 80065b6:	2001      	movs	r0, #1
 80065b8:	e7e7      	b.n	800658a <_raise_r+0x12>
 80065ba:	2100      	movs	r1, #0
 80065bc:	4620      	mov	r0, r4
 80065be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80065c2:	4798      	blx	r3
 80065c4:	2000      	movs	r0, #0
 80065c6:	e7e0      	b.n	800658a <_raise_r+0x12>

080065c8 <raise>:
 80065c8:	4b02      	ldr	r3, [pc, #8]	@ (80065d4 <raise+0xc>)
 80065ca:	4601      	mov	r1, r0
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	f7ff bfd3 	b.w	8006578 <_raise_r>
 80065d2:	bf00      	nop
 80065d4:	20000048 	.word	0x20000048

080065d8 <_kill_r>:
 80065d8:	b538      	push	{r3, r4, r5, lr}
 80065da:	2300      	movs	r3, #0
 80065dc:	4d06      	ldr	r5, [pc, #24]	@ (80065f8 <_kill_r+0x20>)
 80065de:	4604      	mov	r4, r0
 80065e0:	4608      	mov	r0, r1
 80065e2:	4611      	mov	r1, r2
 80065e4:	602b      	str	r3, [r5, #0]
 80065e6:	f7fb fb49 	bl	8001c7c <_kill>
 80065ea:	1c43      	adds	r3, r0, #1
 80065ec:	d102      	bne.n	80065f4 <_kill_r+0x1c>
 80065ee:	682b      	ldr	r3, [r5, #0]
 80065f0:	b103      	cbz	r3, 80065f4 <_kill_r+0x1c>
 80065f2:	6023      	str	r3, [r4, #0]
 80065f4:	bd38      	pop	{r3, r4, r5, pc}
 80065f6:	bf00      	nop
 80065f8:	2000044c 	.word	0x2000044c

080065fc <_getpid_r>:
 80065fc:	f7fb bb37 	b.w	8001c6e <_getpid>

08006600 <__swhatbuf_r>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	460c      	mov	r4, r1
 8006604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006608:	4615      	mov	r5, r2
 800660a:	2900      	cmp	r1, #0
 800660c:	461e      	mov	r6, r3
 800660e:	b096      	sub	sp, #88	@ 0x58
 8006610:	da0c      	bge.n	800662c <__swhatbuf_r+0x2c>
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	2100      	movs	r1, #0
 8006616:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800661a:	bf14      	ite	ne
 800661c:	2340      	movne	r3, #64	@ 0x40
 800661e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006622:	2000      	movs	r0, #0
 8006624:	6031      	str	r1, [r6, #0]
 8006626:	602b      	str	r3, [r5, #0]
 8006628:	b016      	add	sp, #88	@ 0x58
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	466a      	mov	r2, sp
 800662e:	f000 f849 	bl	80066c4 <_fstat_r>
 8006632:	2800      	cmp	r0, #0
 8006634:	dbed      	blt.n	8006612 <__swhatbuf_r+0x12>
 8006636:	9901      	ldr	r1, [sp, #4]
 8006638:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800663c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006640:	4259      	negs	r1, r3
 8006642:	4159      	adcs	r1, r3
 8006644:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006648:	e7eb      	b.n	8006622 <__swhatbuf_r+0x22>

0800664a <__smakebuf_r>:
 800664a:	898b      	ldrh	r3, [r1, #12]
 800664c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800664e:	079d      	lsls	r5, r3, #30
 8006650:	4606      	mov	r6, r0
 8006652:	460c      	mov	r4, r1
 8006654:	d507      	bpl.n	8006666 <__smakebuf_r+0x1c>
 8006656:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800665a:	6023      	str	r3, [r4, #0]
 800665c:	6123      	str	r3, [r4, #16]
 800665e:	2301      	movs	r3, #1
 8006660:	6163      	str	r3, [r4, #20]
 8006662:	b003      	add	sp, #12
 8006664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006666:	466a      	mov	r2, sp
 8006668:	ab01      	add	r3, sp, #4
 800666a:	f7ff ffc9 	bl	8006600 <__swhatbuf_r>
 800666e:	9f00      	ldr	r7, [sp, #0]
 8006670:	4605      	mov	r5, r0
 8006672:	4639      	mov	r1, r7
 8006674:	4630      	mov	r0, r6
 8006676:	f7fe fecd 	bl	8005414 <_malloc_r>
 800667a:	b948      	cbnz	r0, 8006690 <__smakebuf_r+0x46>
 800667c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006680:	059a      	lsls	r2, r3, #22
 8006682:	d4ee      	bmi.n	8006662 <__smakebuf_r+0x18>
 8006684:	f023 0303 	bic.w	r3, r3, #3
 8006688:	f043 0302 	orr.w	r3, r3, #2
 800668c:	81a3      	strh	r3, [r4, #12]
 800668e:	e7e2      	b.n	8006656 <__smakebuf_r+0xc>
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800669a:	81a3      	strh	r3, [r4, #12]
 800669c:	9b01      	ldr	r3, [sp, #4]
 800669e:	6020      	str	r0, [r4, #0]
 80066a0:	b15b      	cbz	r3, 80066ba <__smakebuf_r+0x70>
 80066a2:	4630      	mov	r0, r6
 80066a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066a8:	f000 f81e 	bl	80066e8 <_isatty_r>
 80066ac:	b128      	cbz	r0, 80066ba <__smakebuf_r+0x70>
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	f023 0303 	bic.w	r3, r3, #3
 80066b4:	f043 0301 	orr.w	r3, r3, #1
 80066b8:	81a3      	strh	r3, [r4, #12]
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	431d      	orrs	r5, r3
 80066be:	81a5      	strh	r5, [r4, #12]
 80066c0:	e7cf      	b.n	8006662 <__smakebuf_r+0x18>
	...

080066c4 <_fstat_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	2300      	movs	r3, #0
 80066c8:	4d06      	ldr	r5, [pc, #24]	@ (80066e4 <_fstat_r+0x20>)
 80066ca:	4604      	mov	r4, r0
 80066cc:	4608      	mov	r0, r1
 80066ce:	4611      	mov	r1, r2
 80066d0:	602b      	str	r3, [r5, #0]
 80066d2:	f7fb fb32 	bl	8001d3a <_fstat>
 80066d6:	1c43      	adds	r3, r0, #1
 80066d8:	d102      	bne.n	80066e0 <_fstat_r+0x1c>
 80066da:	682b      	ldr	r3, [r5, #0]
 80066dc:	b103      	cbz	r3, 80066e0 <_fstat_r+0x1c>
 80066de:	6023      	str	r3, [r4, #0]
 80066e0:	bd38      	pop	{r3, r4, r5, pc}
 80066e2:	bf00      	nop
 80066e4:	2000044c 	.word	0x2000044c

080066e8 <_isatty_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	2300      	movs	r3, #0
 80066ec:	4d05      	ldr	r5, [pc, #20]	@ (8006704 <_isatty_r+0x1c>)
 80066ee:	4604      	mov	r4, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	602b      	str	r3, [r5, #0]
 80066f4:	f7fb fb30 	bl	8001d58 <_isatty>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d102      	bne.n	8006702 <_isatty_r+0x1a>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	b103      	cbz	r3, 8006702 <_isatty_r+0x1a>
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	2000044c 	.word	0x2000044c

08006708 <_init>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	bf00      	nop
 800670c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670e:	bc08      	pop	{r3}
 8006710:	469e      	mov	lr, r3
 8006712:	4770      	bx	lr

08006714 <_fini>:
 8006714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006716:	bf00      	nop
 8006718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671a:	bc08      	pop	{r3}
 800671c:	469e      	mov	lr, r3
 800671e:	4770      	bx	lr
